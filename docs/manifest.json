{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v7.json", "dbt_version": "1.3.1", "generated_at": "2023-01-10T15:05:51.942659Z", "invocation_id": "17e04879-4e5e-4c71-bc0d-23821a31110b", "env": {}, "project_id": "0ac51e3156cc492962def32562f00537", "user_id": "7acd446d-f397-41c9-9f69-07656e135a86", "send_anonymous_usage_stats": true, "adapter_type": "snowflake"}, "nodes": {"model.claims_preprocessing_input.eligibility": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "claims_preprocessing_input", "database": "tuva", "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "claims_preprocessing_input", "fqn": ["claims_preprocessing_input", "eligibility"], "unique_id": "model.claims_preprocessing_input.eligibility", "raw_code": "select patient_id\r\n       ,member_id\r\n       ,gender\r\n       ,race\r\n       ,birth_date\r\n       ,death_date\r\n       ,death_flag\r\n       ,enrollment_start_date\r\n       ,enrollment_end_date\r\n       ,payer\r\n       ,payer_type\r\n       ,dual_status_code\r\n       ,medicare_status_code\r\n       ,first_name\r\n       ,last_name\r\n       ,address\r\n       ,city\r\n       ,state\r\n       ,zip_code\r\n       ,phone\r\n       ,data_source\r\nfrom tuva_claims_demo_sample.claims_common.eligibility", "language": "sql", "package_name": "claims_preprocessing_input", "root_path": "C:\\Users\\forre\\PycharmProjects\\claims_preprocessing\\docs\\docs_generate", "path": "eligibility.sql", "original_file_path": "models\\eligibility.sql", "name": "eligibility", "alias": "eligibility", "checksum": {"name": "sha256", "checksum": "b889c02dbbd9c98c0f538ad81bab053cb10dec8a9160050695a86292cf7694e8"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "The eligibility table includes information about a patient's health insurance coverage and demographics (note: we use the word patient as a synonym for member). Every claims dataset should include some sort of eligibility data, otherwise it's impossible to calculate member months, which are needed to calculate measures like PMPM.\n", "columns": {"patient_id": {"name": "patient_id", "description": "Unique identifier for each patient in the dataset.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "member_id": {"name": "member_id", "description": "Identifier that links a patient to a particular insurance product or health plan. A patient can have more than one member_id because they can have more than one insurance product/plan.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gender": {"name": "gender", "description": "Biological sex of the patient.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "race": {"name": "race", "description": "Race of the patient.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "birth_date": {"name": "birth_date", "description": "Date the patient was born.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "death_date": {"name": "death_date", "description": "Date the patient died.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "death_flag": {"name": "death_flag", "description": "Indicates whether the patient has died.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "enrollment_start_date": {"name": "enrollment_start_date", "description": "Date the patient's insurance eligibility began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "enrollment_end_date": {"name": "enrollment_end_date", "description": "Date the patient's insurance eligibility ended.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payer": {"name": "payer", "description": "Name of the payer (i.e. health insurer) providing coverage.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payer_type": {"name": "payer_type", "description": "Type of payer (e.g. commercial, medicare, medicaid, etc.).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dual_status_code": {"name": "dual_status_code", "description": "Indicates whether the patient is dually eligible for Medicare and Medicaid.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "medicare_status_code": {"name": "medicare_status_code", "description": "Indicates how the patient became eligible for Medicare.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "Patient's first name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "Patient's last name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "address": {"name": "address", "description": "Patient's street address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "city": {"name": "city", "description": "Patient's city of address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "state": {"name": "state", "description": "State the patient lives in (most recent known address)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "zip_code": {"name": "zip_code", "description": "Zip code the patient lives in (most recent known address).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "phone": {"name": "phone", "description": "Patient's phone number.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "data_source": {"name": "data_source", "description": "User-configured field that indicates the data source (e.g. typically named after the payer and state \"BCBS Tennessee\").", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "claims_preprocessing_input://models\\_models.yml", "compiled_path": "target\\compiled\\claims_preprocessing_input\\models\\eligibility.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "database": "tuva", "schema": "claims_preprocessing_input"}, "created_at": 1673363035.152904, "compiled_code": "select patient_id\r\n       ,member_id\r\n       ,gender\r\n       ,race\r\n       ,birth_date\r\n       ,death_date\r\n       ,death_flag\r\n       ,enrollment_start_date\r\n       ,enrollment_end_date\r\n       ,payer\r\n       ,payer_type\r\n       ,dual_status_code\r\n       ,medicare_status_code\r\n       ,first_name\r\n       ,last_name\r\n       ,address\r\n       ,city\r\n       ,state\r\n       ,zip_code\r\n       ,phone\r\n       ,data_source\r\nfrom tuva_claims_demo_sample.claims_common.eligibility", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.claims_preprocessing_input.eligibility"}, "model.claims_preprocessing_input.medical_claim": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "claims_preprocessing_input", "database": "tuva", "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "claims_preprocessing_input", "fqn": ["claims_preprocessing_input", "medical_claim"], "unique_id": "model.claims_preprocessing_input.medical_claim", "raw_code": "select claim_id\r\n       ,claim_line_number\r\n       ,claim_type\r\n       ,patient_id\r\n       ,member_id\r\n       ,claim_start_date\r\n       ,claim_end_date\r\n       ,claim_line_start_date\r\n       ,claim_line_end_date\r\n       ,admission_date\r\n       ,discharge_date\r\n       ,admit_source_code\r\n       ,admit_type_code\r\n       ,discharge_disposition_code\r\n       ,place_of_service_code\r\n       ,bill_type_code\r\n       ,ms_drg_code\r\n       ,revenue_center_code\r\n       ,service_unit_quantity\r\n       ,hcpcs_code\r\n       ,hcpcs_modifier_1\r\n       ,hcpcs_modifier_2\r\n       ,hcpcs_modifier_3\r\n       ,hcpcs_modifier_4\r\n       ,hcpcs_modifier_5\r\n       ,rendering_npi\r\n       ,billing_npi\r\n       ,facility_npi\r\n       ,paid_date\r\n       ,paid_amount\r\n       ,allowed_amount\r\n       ,charge_amount\r\n       ,diagnosis_code_type\r\n       ,diagnosis_code_1\r\n       ,diagnosis_code_2\r\n       ,diagnosis_code_3\r\n       ,diagnosis_code_4\r\n       ,diagnosis_code_5\r\n       ,diagnosis_code_6\r\n       ,diagnosis_code_7\r\n       ,diagnosis_code_8\r\n       ,diagnosis_code_9\r\n       ,diagnosis_code_10\r\n       ,diagnosis_code_11\r\n       ,diagnosis_code_12\r\n       ,diagnosis_code_13\r\n       ,diagnosis_code_14\r\n       ,diagnosis_code_15\r\n       ,diagnosis_code_16\r\n       ,diagnosis_code_17\r\n       ,diagnosis_code_18\r\n       ,diagnosis_code_19\r\n       ,diagnosis_code_20\r\n       ,diagnosis_code_21\r\n       ,diagnosis_code_22\r\n       ,diagnosis_code_23\r\n       ,diagnosis_code_24\r\n       ,diagnosis_code_25\r\n       ,diagnosis_poa_1\r\n       ,diagnosis_poa_2\r\n       ,diagnosis_poa_3\r\n       ,diagnosis_poa_4\r\n       ,diagnosis_poa_5\r\n       ,diagnosis_poa_6\r\n       ,diagnosis_poa_7\r\n       ,diagnosis_poa_8\r\n       ,diagnosis_poa_9\r\n       ,diagnosis_poa_10\r\n       ,diagnosis_poa_11\r\n       ,diagnosis_poa_12\r\n       ,diagnosis_poa_13\r\n       ,diagnosis_poa_14\r\n       ,diagnosis_poa_15\r\n       ,diagnosis_poa_16\r\n       ,diagnosis_poa_17\r\n       ,diagnosis_poa_18\r\n       ,diagnosis_poa_19\r\n       ,diagnosis_poa_20\r\n       ,diagnosis_poa_21\r\n       ,diagnosis_poa_22\r\n       ,diagnosis_poa_23\r\n       ,diagnosis_poa_24\r\n       ,diagnosis_poa_25\r\n       ,procedure_code_type\r\n       ,procedure_code_1\r\n       ,procedure_code_2\r\n       ,procedure_code_3\r\n       ,procedure_code_4\r\n       ,procedure_code_5\r\n       ,procedure_code_6\r\n       ,procedure_code_7\r\n       ,procedure_code_8\r\n       ,procedure_code_9\r\n       ,procedure_code_10\r\n       ,procedure_code_11\r\n       ,procedure_code_12\r\n       ,procedure_code_13\r\n       ,procedure_code_14\r\n       ,procedure_code_15\r\n       ,procedure_code_16\r\n       ,procedure_code_17\r\n       ,procedure_code_18\r\n       ,procedure_code_19\r\n       ,procedure_code_20\r\n       ,procedure_code_21\r\n       ,procedure_code_22\r\n       ,procedure_code_23\r\n       ,procedure_code_24\r\n       ,procedure_code_25\r\n       ,procedure_date_1\r\n       ,procedure_date_2\r\n       ,procedure_date_3\r\n       ,procedure_date_4\r\n       ,procedure_date_5\r\n       ,procedure_date_6\r\n       ,procedure_date_7\r\n       ,procedure_date_8\r\n       ,procedure_date_9\r\n       ,procedure_date_10\r\n       ,procedure_date_11\r\n       ,procedure_date_12\r\n       ,procedure_date_13\r\n       ,procedure_date_14\r\n       ,procedure_date_15\r\n       ,procedure_date_16\r\n       ,procedure_date_17\r\n       ,procedure_date_18\r\n       ,procedure_date_19\r\n       ,procedure_date_20\r\n       ,procedure_date_21\r\n       ,procedure_date_22\r\n       ,procedure_date_23\r\n       ,procedure_date_24\r\n       ,procedure_date_25\r\n       ,data_source\r\nfrom tuva_claims_demo_sample.claims_common.medical_claim", "language": "sql", "package_name": "claims_preprocessing_input", "root_path": "C:\\Users\\forre\\PycharmProjects\\claims_preprocessing\\docs\\docs_generate", "path": "medical_claim.sql", "original_file_path": "models\\medical_claim.sql", "name": "medical_claim", "alias": "medical_claim", "checksum": {"name": "sha256", "checksum": "d8da58a64f52d2af58f7d6f09dd2f34e0392ba34605ba886eda57d863efc4ba6"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "The medical_claim table contains information on healthcare services and supplies provided to patients, billed by providers, and paid for by health insurers. It includes information on the provider who rendered the service, the amount paid for the service by the health insurer, and the underlying reason for the service (i.e. diagnosis).\n", "columns": {"claim_id": {"name": "claim_id", "description": "Unique identifier for each claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "claim_line_number": {"name": "claim_line_number", "description": "Indicates the line number for the particular line of the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "claim_type": {"name": "claim_type", "description": "Indicates whether the claim is professional (CMS-1500), institutional (UB-04), dental, or vision.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "patient_id": {"name": "patient_id", "description": "Unique identifier for each patient in the dataset.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "member_id": {"name": "member_id", "description": "Identifier that links a patient to a particular insurance product or health plan. A patient can have more than one member_id because they can have more than one insurance product/plan.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "claim_start_date": {"name": "claim_start_date", "description": "Start date for the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "claim_end_date": {"name": "claim_end_date", "description": "End date for the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "claim_line_start_date": {"name": "claim_line_start_date", "description": "Start date for the claim line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "claim_line_end_date": {"name": "claim_line_end_date", "description": "End date for the claim line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "admission_date": {"name": "admission_date", "description": "Admission date for the claim (inpatient claims only).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discharge_date": {"name": "discharge_date", "description": "Discharge date for the claim (inpatient claims only).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "admit_source_code": {"name": "admit_source_code", "description": "Indicates where the patient was before the healthcare encounter (inpatient claims only).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "admit_type_code": {"name": "admit_type_code", "description": "Indicates the type of admission (inpatient claims only).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discharge_disposition_code": {"name": "discharge_disposition_code", "description": "Indicates the type of setting the patient was discharged to (institutional inpatient claims only).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "place_of_service_code": {"name": "place_of_service_code", "description": "Place of service for the claim (professional claims only).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bill_type_code": {"name": "bill_type_code", "description": "Bill type code for the claim (institutional claims only).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ms_drg_code": {"name": "ms_drg_code", "description": "MS-DRG for the claim (inpatient claims only).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "revenue_center_code": {"name": "revenue_center_code", "description": "Revenue center code for the claim line (institutional only and typically multiple codes per claim).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "service_unit_quantity": {"name": "service_unit_quantity", "description": "The number of units for the particular revenue center code.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hcpcs_code": {"name": "hcpcs_code", "description": "HCPCS level 1 or level 2 code for the claim line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hcpcs_modifier_1": {"name": "hcpcs_modifier_1", "description": "1st modifier for HCPCS code.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hcpcs_modifier_2": {"name": "hcpcs_modifier_2", "description": "2nd modifier for HCPCS code.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hcpcs_modifier_3": {"name": "hcpcs_modifier_3", "description": "3rd modifier for HCPCS code.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hcpcs_modifier_4": {"name": "hcpcs_modifier_4", "description": "4th modifier for HCPCS code.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hcpcs_modifier_5": {"name": "hcpcs_modifier_5", "description": "5th modifier for HCPCS code.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rendering_npi": {"name": "rendering_npi", "description": "Rendering NPI for the claim (typically represents the physician or entity providing services).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_npi": {"name": "billing_npi", "description": "Billing NPI for the claim (typically represents organization billing the claim).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "facility_npi": {"name": "facility_npi", "description": "Facility NPI for the claim (typically represents the facility where services were performed).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "paid_date": {"name": "paid_date", "description": "The date the claim was paid.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "paid_amount": {"name": "paid_amount", "description": "The total amount paid on the claim by the insurer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "allowed_amount": {"name": "allowed_amount", "description": "The total amount allowed (includes amount paid by the insurer and patient) on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "charge_amount": {"name": "charge_amount", "description": "The total amount charged on the claim by the provider.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code_type": {"name": "diagnosis_code_type", "description": "Indicates the type of diagnosis code (e.g. ICD-10-CM).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code_1": {"name": "diagnosis_code_1", "description": "1st ICD (9 or 10) CM diagnosis code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code_2": {"name": "diagnosis_code_2", "description": "2nd ICD (9 or 10) CM diagnosis code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code_3": {"name": "diagnosis_code_3", "description": "3rd ICD (9 or 10) CM diagnosis code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code_4": {"name": "diagnosis_code_4", "description": "4th ICD (9 or 10) CM diagnosis code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code_5": {"name": "diagnosis_code_5", "description": "5th ICD (9 or 10) CM diagnosis code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code_6": {"name": "diagnosis_code_6", "description": "6th ICD (9 or 10) CM diagnosis code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code_7": {"name": "diagnosis_code_7", "description": "7th ICD (9 or 10) CM diagnosis code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code_8": {"name": "diagnosis_code_8", "description": "8th ICD (9 or 10) CM diagnosis code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code_9": {"name": "diagnosis_code_9", "description": "9th ICD (9 or 10) CM diagnosis code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code_10": {"name": "diagnosis_code_10", "description": "10th ICD (9 or 10) CM diagnosis code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code_11": {"name": "diagnosis_code_11", "description": "11th ICD (9 or 10) CM diagnosis code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code_12": {"name": "diagnosis_code_12", "description": "12th ICD (9 or 10) CM diagnosis code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code_13": {"name": "diagnosis_code_13", "description": "13th ICD (9 or 10) CM diagnosis code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code_14": {"name": "diagnosis_code_14", "description": "14th ICD (9 or 10) CM diagnosis code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code_15": {"name": "diagnosis_code_15", "description": "15th ICD (9 or 10) CM diagnosis code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code_16": {"name": "diagnosis_code_16", "description": "16th ICD (9 or 10) CM diagnosis code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code_17": {"name": "diagnosis_code_17", "description": "17th ICD (9 or 10) CM diagnosis code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code_18": {"name": "diagnosis_code_18", "description": "18th ICD (9 or 10) CM diagnosis code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code_19": {"name": "diagnosis_code_19", "description": "19th ICD (9 or 10) CM diagnosis code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code_20": {"name": "diagnosis_code_20", "description": "20th ICD (9 or 10) CM diagnosis code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code_21": {"name": "diagnosis_code_21", "description": "21st ICD (9 or 10) CM diagnosis code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code_22": {"name": "diagnosis_code_22", "description": "22nd ICD (9 or 10) CM diagnosis code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code_23": {"name": "diagnosis_code_23", "description": "23rd ICD (9 or 10) CM diagnosis code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code_24": {"name": "diagnosis_code_24", "description": "24th ICD (9 or 10) CM diagnosis code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code_25": {"name": "diagnosis_code_25", "description": "25th ICD (9 or 10) CM diagnosis code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_poa_1": {"name": "diagnosis_poa_1", "description": "Present on admission code for the 1st diagnosis on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_poa_2": {"name": "diagnosis_poa_2", "description": "Present on admission code for the 2nd diagnosis on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_poa_3": {"name": "diagnosis_poa_3", "description": "Present on admission code for the 3rd diagnosis on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_poa_4": {"name": "diagnosis_poa_4", "description": "Present on admission code for the 4th diagnosis on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_poa_5": {"name": "diagnosis_poa_5", "description": "Present on admission code for the 5th diagnosis on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_poa_6": {"name": "diagnosis_poa_6", "description": "Present on admission code for the 6th diagnosis on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_poa_7": {"name": "diagnosis_poa_7", "description": "Present on admission code for the 7th diagnosis on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_poa_8": {"name": "diagnosis_poa_8", "description": "Present on admission code for the 8th diagnosis on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_poa_9": {"name": "diagnosis_poa_9", "description": "Present on admission code for the 9th diagnosis on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_poa_10": {"name": "diagnosis_poa_10", "description": "Present on admission code for the 10th diagnosis on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_poa_11": {"name": "diagnosis_poa_11", "description": "Present on admission code for the 11th diagnosis on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_poa_12": {"name": "diagnosis_poa_12", "description": "Present on admission code for the 12th diagnosis on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_poa_13": {"name": "diagnosis_poa_13", "description": "Present on admission code for the 13th diagnosis on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_poa_14": {"name": "diagnosis_poa_14", "description": "Present on admission code for the 14th diagnosis on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_poa_15": {"name": "diagnosis_poa_15", "description": "Present on admission code for the 15th diagnosis on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_poa_16": {"name": "diagnosis_poa_16", "description": "Present on admission code for the 16th diagnosis on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_poa_17": {"name": "diagnosis_poa_17", "description": "Present on admission code for the 17th diagnosis on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_poa_18": {"name": "diagnosis_poa_18", "description": "Present on admission code for the 18th diagnosis on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_poa_19": {"name": "diagnosis_poa_19", "description": "Present on admission code for the 19th diagnosis on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_poa_20": {"name": "diagnosis_poa_20", "description": "Present on admission code for the 20th diagnosis on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_poa_21": {"name": "diagnosis_poa_21", "description": "Present on admission code for the 21st diagnosis on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_poa_22": {"name": "diagnosis_poa_22", "description": "Present on admission code for the 22nd diagnosis on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_poa_23": {"name": "diagnosis_poa_23", "description": "Present on admission code for the 23rd diagnosis on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_poa_24": {"name": "diagnosis_poa_24", "description": "Present on admission code for the 24th diagnosis on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_poa_25": {"name": "diagnosis_poa_25", "description": "Present on admission code for the 25th diagnosis on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code_type": {"name": "procedure_code_type", "description": "Indicates the type of procedure code (e.g. ICD-10-PCS).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code_1": {"name": "procedure_code_1", "description": "1st ICD (9 or 10) procedure code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code_2": {"name": "procedure_code_2", "description": "2nd ICD (9 or 10) procedure code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code_3": {"name": "procedure_code_3", "description": "3rd ICD (9 or 10) procedure code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code_4": {"name": "procedure_code_4", "description": "4th ICD (9 or 10) procedure code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code_5": {"name": "procedure_code_5", "description": "5th ICD (9 or 10) procedure code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code_6": {"name": "procedure_code_6", "description": "6th ICD (9 or 10) procedure code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code_7": {"name": "procedure_code_7", "description": "7th ICD (9 or 10) procedure code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code_8": {"name": "procedure_code_8", "description": "8th ICD (9 or 10) procedure code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code_9": {"name": "procedure_code_9", "description": "9th ICD (9 or 10) procedure code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code_10": {"name": "procedure_code_10", "description": "10th ICD (9 or 10) procedure code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code_11": {"name": "procedure_code_11", "description": "11th ICD (9 or 10) procedure code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code_12": {"name": "procedure_code_12", "description": "12th ICD (9 or 10) procedure code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code_13": {"name": "procedure_code_13", "description": "13th ICD (9 or 10) procedure code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code_14": {"name": "procedure_code_14", "description": "14th ICD (9 or 10) procedure code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code_15": {"name": "procedure_code_15", "description": "15th ICD (9 or 10) procedure code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code_16": {"name": "procedure_code_16", "description": "16th ICD (9 or 10) procedure code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code_17": {"name": "procedure_code_17", "description": "17th ICD (9 or 10) procedure code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code_18": {"name": "procedure_code_18", "description": "18th ICD (9 or 10) procedure code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code_19": {"name": "procedure_code_19", "description": "19th ICD (9 or 10) procedure code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code_20": {"name": "procedure_code_20", "description": "20th ICD (9 or 10) procedure code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code_21": {"name": "procedure_code_21", "description": "21st ICD (9 or 10) procedure code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code_22": {"name": "procedure_code_22", "description": "22nd ICD (9 or 10) procedure code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code_23": {"name": "procedure_code_23", "description": "23rd ICD (9 or 10) procedure code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code_24": {"name": "procedure_code_24", "description": "24th ICD (9 or 10) procedure code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code_25": {"name": "procedure_code_25", "description": "25th ICD (9 or 10) procedure code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_date_1": {"name": "procedure_date_1", "description": "Date of the 1st procedure on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_date_2": {"name": "procedure_date_2", "description": "Date of the 2nd procedure on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_date_3": {"name": "procedure_date_3", "description": "Date of the 3rd procedure on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_date_4": {"name": "procedure_date_4", "description": "Date of the 4th procedure on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_date_5": {"name": "procedure_date_5", "description": "Date of the 5th procedure on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_date_6": {"name": "procedure_date_6", "description": "Date of the 6th procedure on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_date_7": {"name": "procedure_date_7", "description": "Date of the 7th procedure on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_date_8": {"name": "procedure_date_8", "description": "Date of the 8th procedure on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_date_9": {"name": "procedure_date_9", "description": "Date of the 9th procedure on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_date_10": {"name": "procedure_date_10", "description": "Date of the 10th procedure on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_date_11": {"name": "procedure_date_11", "description": "Date of the 11th procedure on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_date_12": {"name": "procedure_date_12", "description": "Date of the 12th procedure on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_date_13": {"name": "procedure_date_13", "description": "Date of the 13th procedure on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_date_14": {"name": "procedure_date_14", "description": "Date of the 14th procedure on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_date_15": {"name": "procedure_date_15", "description": "Date of the 15th procedure on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_date_16": {"name": "procedure_date_16", "description": "Date of the 16th procedure on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_date_17": {"name": "procedure_date_17", "description": "Date of the 17th procedure on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_date_18": {"name": "procedure_date_18", "description": "Date of the 18th procedure on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_date_19": {"name": "procedure_date_19", "description": "Date of the 19th procedure on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_date_20": {"name": "procedure_date_20", "description": "Date of the 20th procedure on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_date_21": {"name": "procedure_date_21", "description": "Date of the 21st procedure on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_date_22": {"name": "procedure_date_22", "description": "Date of the 22nd procedure on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_date_23": {"name": "procedure_date_23", "description": "Date of the 23rd procedure on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_date_24": {"name": "procedure_date_24", "description": "Date of the 24th procedure on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_date_25": {"name": "procedure_date_25", "description": "Date of the 25th procedure on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "data_source": {"name": "data_source", "description": "User-configured field that indicates the data source (e.g. typically named after the payer and state \"BCBS Tennessee\").", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "claims_preprocessing_input://models\\_models.yml", "compiled_path": "target\\compiled\\claims_preprocessing_input\\models\\medical_claim.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "database": "tuva", "schema": "claims_preprocessing_input"}, "created_at": 1673363035.1826055, "compiled_code": "select claim_id\r\n       ,claim_line_number\r\n       ,claim_type\r\n       ,patient_id\r\n       ,member_id\r\n       ,claim_start_date\r\n       ,claim_end_date\r\n       ,claim_line_start_date\r\n       ,claim_line_end_date\r\n       ,admission_date\r\n       ,discharge_date\r\n       ,admit_source_code\r\n       ,admit_type_code\r\n       ,discharge_disposition_code\r\n       ,place_of_service_code\r\n       ,bill_type_code\r\n       ,ms_drg_code\r\n       ,revenue_center_code\r\n       ,service_unit_quantity\r\n       ,hcpcs_code\r\n       ,hcpcs_modifier_1\r\n       ,hcpcs_modifier_2\r\n       ,hcpcs_modifier_3\r\n       ,hcpcs_modifier_4\r\n       ,hcpcs_modifier_5\r\n       ,rendering_npi\r\n       ,billing_npi\r\n       ,facility_npi\r\n       ,paid_date\r\n       ,paid_amount\r\n       ,allowed_amount\r\n       ,charge_amount\r\n       ,diagnosis_code_type\r\n       ,diagnosis_code_1\r\n       ,diagnosis_code_2\r\n       ,diagnosis_code_3\r\n       ,diagnosis_code_4\r\n       ,diagnosis_code_5\r\n       ,diagnosis_code_6\r\n       ,diagnosis_code_7\r\n       ,diagnosis_code_8\r\n       ,diagnosis_code_9\r\n       ,diagnosis_code_10\r\n       ,diagnosis_code_11\r\n       ,diagnosis_code_12\r\n       ,diagnosis_code_13\r\n       ,diagnosis_code_14\r\n       ,diagnosis_code_15\r\n       ,diagnosis_code_16\r\n       ,diagnosis_code_17\r\n       ,diagnosis_code_18\r\n       ,diagnosis_code_19\r\n       ,diagnosis_code_20\r\n       ,diagnosis_code_21\r\n       ,diagnosis_code_22\r\n       ,diagnosis_code_23\r\n       ,diagnosis_code_24\r\n       ,diagnosis_code_25\r\n       ,diagnosis_poa_1\r\n       ,diagnosis_poa_2\r\n       ,diagnosis_poa_3\r\n       ,diagnosis_poa_4\r\n       ,diagnosis_poa_5\r\n       ,diagnosis_poa_6\r\n       ,diagnosis_poa_7\r\n       ,diagnosis_poa_8\r\n       ,diagnosis_poa_9\r\n       ,diagnosis_poa_10\r\n       ,diagnosis_poa_11\r\n       ,diagnosis_poa_12\r\n       ,diagnosis_poa_13\r\n       ,diagnosis_poa_14\r\n       ,diagnosis_poa_15\r\n       ,diagnosis_poa_16\r\n       ,diagnosis_poa_17\r\n       ,diagnosis_poa_18\r\n       ,diagnosis_poa_19\r\n       ,diagnosis_poa_20\r\n       ,diagnosis_poa_21\r\n       ,diagnosis_poa_22\r\n       ,diagnosis_poa_23\r\n       ,diagnosis_poa_24\r\n       ,diagnosis_poa_25\r\n       ,procedure_code_type\r\n       ,procedure_code_1\r\n       ,procedure_code_2\r\n       ,procedure_code_3\r\n       ,procedure_code_4\r\n       ,procedure_code_5\r\n       ,procedure_code_6\r\n       ,procedure_code_7\r\n       ,procedure_code_8\r\n       ,procedure_code_9\r\n       ,procedure_code_10\r\n       ,procedure_code_11\r\n       ,procedure_code_12\r\n       ,procedure_code_13\r\n       ,procedure_code_14\r\n       ,procedure_code_15\r\n       ,procedure_code_16\r\n       ,procedure_code_17\r\n       ,procedure_code_18\r\n       ,procedure_code_19\r\n       ,procedure_code_20\r\n       ,procedure_code_21\r\n       ,procedure_code_22\r\n       ,procedure_code_23\r\n       ,procedure_code_24\r\n       ,procedure_code_25\r\n       ,procedure_date_1\r\n       ,procedure_date_2\r\n       ,procedure_date_3\r\n       ,procedure_date_4\r\n       ,procedure_date_5\r\n       ,procedure_date_6\r\n       ,procedure_date_7\r\n       ,procedure_date_8\r\n       ,procedure_date_9\r\n       ,procedure_date_10\r\n       ,procedure_date_11\r\n       ,procedure_date_12\r\n       ,procedure_date_13\r\n       ,procedure_date_14\r\n       ,procedure_date_15\r\n       ,procedure_date_16\r\n       ,procedure_date_17\r\n       ,procedure_date_18\r\n       ,procedure_date_19\r\n       ,procedure_date_20\r\n       ,procedure_date_21\r\n       ,procedure_date_22\r\n       ,procedure_date_23\r\n       ,procedure_date_24\r\n       ,procedure_date_25\r\n       ,data_source\r\nfrom tuva_claims_demo_sample.claims_common.medical_claim", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.claims_preprocessing_input.medical_claim"}, "model.claims_preprocessing_input.pharmacy_claim": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "claims_preprocessing_input", "database": "tuva", "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "claims_preprocessing_input", "fqn": ["claims_preprocessing_input", "pharmacy_claim"], "unique_id": "model.claims_preprocessing_input.pharmacy_claim", "raw_code": "select\r\n    claim_id\r\n    , claim_line_number\r\n    , patient_id\r\n    , member_id\r\n    , prescribing_provider_npi\r\n    , dispensing_provider_npi\r\n    , dispensing_date\r\n    , ndc_code\r\n    , quantity\r\n    , days_supply\r\n    , refills\r\n    , paid_date\r\n    , paid_amount\r\n    , allowed_amount\r\n    , data_source\r\nfrom tuva_claims_demo_sample.claims_common.pharmacy_claim", "language": "sql", "package_name": "claims_preprocessing_input", "root_path": "C:\\Users\\forre\\PycharmProjects\\claims_preprocessing\\docs\\docs_generate", "path": "pharmacy_claim.sql", "original_file_path": "models\\pharmacy_claim.sql", "name": "pharmacy_claim", "alias": "pharmacy_claim", "checksum": {"name": "sha256", "checksum": "6de8ce0ceebeec416291544c7deafda9b8b1324a05ed3c6f142f90fbb1370225"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "The pharmacy_claim table includes information about retail and specialty drug prescriptions that have been filled by a patient, billed by a pharmacy, and paid by an insurer.\n", "columns": {"claim_id": {"name": "claim_id", "description": "Unique identifier for each claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "claim_line_number": {"name": "claim_line_number", "description": "Indicates the line number for the particular line of the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "patient_id": {"name": "patient_id", "description": "Unique identifier for each patient in the dataset.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "member_id": {"name": "member_id", "description": "Identifier that links a patient to a particular insurance product or health plan. A patient can have more than one member_id because they can have more than one insurance product/plan.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prescribing_provider_npi": {"name": "prescribing_provider_npi", "description": "NPI for the provider that wrote the prescription (e.g. priamry care physician).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dispensing_provider_npi": {"name": "dispensing_provider_npi", "description": "NPI for the provider that dispensed the prescription (e.g. pharmacy).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dispensing_date": {"name": "dispensing_date", "description": "Date the prescription was filled.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ndc_code": {"name": "ndc_code", "description": "National drug code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "Number of doses.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "days_supply": {"name": "days_supply", "description": "Number of days supply.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "refills": {"name": "refills", "description": "Number of refills for the prescription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "paid_date": {"name": "paid_date", "description": "Date the claim was paid.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "paid_amount": {"name": "paid_amount", "description": "Amount paid by the health insurer for the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "allowed_amount": {"name": "allowed_amount", "description": "Contractual amount allowed to be paid by the payer + patient.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "data_source": {"name": "data_source", "description": "User-configured field that indicates the data source (e.g. typically named after the payer and state \"BCBS Tennessee\").", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "claims_preprocessing_input://models\\_models.yml", "compiled_path": "target\\compiled\\claims_preprocessing_input\\models\\pharmacy_claim.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "database": "tuva", "schema": "claims_preprocessing_input"}, "created_at": 1673363035.1826055, "compiled_code": "select\r\n    claim_id\r\n    , claim_line_number\r\n    , patient_id\r\n    , member_id\r\n    , prescribing_provider_npi\r\n    , dispensing_provider_npi\r\n    , dispensing_date\r\n    , ndc_code\r\n    , quantity\r\n    , days_supply\r\n    , refills\r\n    , paid_date\r\n    , paid_amount\r\n    , allowed_amount\r\n    , data_source\r\nfrom tuva_claims_demo_sample.claims_common.pharmacy_claim", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.claims_preprocessing_input.pharmacy_claim"}, "model.claims_preprocessing.claims_preprocessing__condition": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "seed.terminology.terminology__icd_10_cm", "seed.terminology.terminology__present_on_admission"]}, "config": {"enabled": true, "alias": "condition", "schema": "core", "database": "tuva", "tags": ["claims_preprocessing"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["claims_preprocessing", "claims_preprocessing__condition"], "unique_id": "model.claims_preprocessing.claims_preprocessing__condition", "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))\r\n   )\r\n}}\r\n\r\n\r\n\r\n\r\nwith unpivot_cte as (\r\n\r\nselect\r\n  aa.encounter_id,\r\n  aa.patient_id,\r\n  aa.claim_start_date as condition_date,\r\n  'discharge_diagnosis' as condition_type,\r\n  aa.diagnosis_code_type as code_type,\r\n  aa.diagnosis_code_1 as code,\r\n  1 as diagnosis_rank,\r\n  aa.diagnosis_poa_1 as present_on_admit_code,\r\n  aa.data_source\r\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\r\nwhere aa.diagnosis_code_1 is not null\r\n\r\nunion all \r\n\r\nselect\r\n  aa.encounter_id,\r\n  aa.patient_id,\r\n  aa.claim_start_date as condition_date,\r\n  'discharge_diagnosis' as condition_type,\r\n  aa.diagnosis_code_type as code_type,\r\n  aa.diagnosis_code_2 as code,\r\n  2 as diagnosis_rank,\r\n  aa.diagnosis_poa_2 as present_on_admit_code,\r\n  aa.data_source\r\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\r\nwhere aa.diagnosis_code_2 is not null\r\n\r\nunion all \r\n\r\nselect\r\n  aa.encounter_id,\r\n  aa.patient_id,\r\n  aa.claim_start_date as condition_date,\r\n  'discharge_diagnosis' as condition_type,\r\n  aa.diagnosis_code_type as code_type,\r\n  aa.diagnosis_code_3 as code,\r\n  3 as diagnosis_rank,\r\n  aa.diagnosis_poa_3 as present_on_admit_code,\r\n  aa.data_source\r\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\r\nwhere aa.diagnosis_code_3 is not null\r\n\r\nunion all \r\n\r\nselect\r\n  aa.encounter_id,\r\n  aa.patient_id,\r\n  aa.claim_start_date as condition_date,\r\n  'discharge_diagnosis' as condition_type,\r\n  aa.diagnosis_code_type as code_type,\r\n  aa.diagnosis_code_4 as code,\r\n  4 as diagnosis_rank,\r\n  aa.diagnosis_poa_4 as present_on_admit_code,\r\n  aa.data_source\r\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\r\nwhere aa.diagnosis_code_4 is not null\r\n\r\nunion all \r\n\r\nselect\r\n  aa.encounter_id,\r\n  aa.patient_id,\r\n  aa.claim_start_date as condition_date,\r\n  'discharge_diagnosis' as condition_type,\r\n  aa.diagnosis_code_type as code_type,\r\n  aa.diagnosis_code_5 as code,\r\n  5 as diagnosis_rank,\r\n  aa.diagnosis_poa_5 as present_on_admit_code,\r\n  aa.data_source\r\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\r\nwhere aa.diagnosis_code_5 is not null\r\n\r\nunion all \r\n\r\nselect\r\n  aa.encounter_id,\r\n  aa.patient_id,\r\n  aa.claim_start_date as condition_date,\r\n  'discharge_diagnosis' as condition_type,\r\n  aa.diagnosis_code_type as code_type,\r\n  aa.diagnosis_code_6 as code,\r\n  6 as diagnosis_rank,\r\n  aa.diagnosis_poa_6 as present_on_admit_code,\r\n  aa.data_source\r\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\r\nwhere aa.diagnosis_code_6 is not null\r\n\r\nunion all \r\n\r\nselect\r\n  aa.encounter_id,\r\n  aa.patient_id,\r\n  aa.claim_start_date as condition_date,\r\n  'discharge_diagnosis' as condition_type,\r\n  aa.diagnosis_code_type as code_type,\r\n  aa.diagnosis_code_7 as code,\r\n  7 as diagnosis_rank,\r\n  aa.diagnosis_poa_7 as present_on_admit_code,\r\n  aa.data_source\r\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\r\nwhere aa.diagnosis_code_7 is not null\r\n\r\nunion all \r\n\r\nselect\r\n  aa.encounter_id,\r\n  aa.patient_id,\r\n  aa.claim_start_date as condition_date,\r\n  'discharge_diagnosis' as condition_type,\r\n  aa.diagnosis_code_type as code_type,\r\n  aa.diagnosis_code_8 as code,\r\n  8 as diagnosis_rank,\r\n  aa.diagnosis_poa_8 as present_on_admit_code,\r\n  aa.data_source\r\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\r\nwhere aa.diagnosis_code_8 is not null\r\n\r\nunion all \r\n\r\nselect\r\n  aa.encounter_id,\r\n  aa.patient_id,\r\n  aa.claim_start_date as condition_date,\r\n  'discharge_diagnosis' as condition_type,\r\n  aa.diagnosis_code_type as code_type,\r\n  aa.diagnosis_code_9 as code,\r\n  9 as diagnosis_rank,\r\n  aa.diagnosis_poa_9 as present_on_admit_code,\r\n  aa.data_source\r\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\r\nwhere aa.diagnosis_code_9 is not null\r\n\r\nunion all \r\n\r\nselect\r\n  aa.encounter_id,\r\n  aa.patient_id,\r\n  aa.claim_start_date as condition_date,\r\n  'discharge_diagnosis' as condition_type,\r\n  aa.diagnosis_code_type as code_type,\r\n  aa.diagnosis_code_10 as code,\r\n  10 as diagnosis_rank,\r\n  aa.diagnosis_poa_10 as present_on_admit_code,\r\n  aa.data_source\r\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\r\nwhere aa.diagnosis_code_10 is not null\r\n\r\nunion all \r\n\r\nselect\r\n  aa.encounter_id,\r\n  aa.patient_id,\r\n  aa.claim_start_date as condition_date,\r\n  'discharge_diagnosis' as condition_type,\r\n  aa.diagnosis_code_type as code_type,\r\n  aa.diagnosis_code_11 as code,\r\n  11 as diagnosis_rank,\r\n  aa.diagnosis_poa_11 as present_on_admit_code,\r\n  aa.data_source\r\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\r\nwhere aa.diagnosis_code_11 is not null\r\n\r\nunion all \r\n\r\nselect\r\n  aa.encounter_id,\r\n  aa.patient_id,\r\n  aa.claim_start_date as condition_date,\r\n  'discharge_diagnosis' as condition_type,\r\n  aa.diagnosis_code_type as code_type,\r\n  aa.diagnosis_code_12 as code,\r\n  12 as diagnosis_rank,\r\n  aa.diagnosis_poa_12 as present_on_admit_code,\r\n  aa.data_source\r\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\r\nwhere aa.diagnosis_code_12 is not null\r\n\r\nunion all \r\n\r\nselect\r\n  aa.encounter_id,\r\n  aa.patient_id,\r\n  aa.claim_start_date as condition_date,\r\n  'discharge_diagnosis' as condition_type,\r\n  aa.diagnosis_code_type as code_type,\r\n  aa.diagnosis_code_13 as code,\r\n  13 as diagnosis_rank,\r\n  aa.diagnosis_poa_13 as present_on_admit_code,\r\n  aa.data_source\r\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\r\nwhere aa.diagnosis_code_13 is not null\r\n\r\nunion all \r\n\r\nselect\r\n  aa.encounter_id,\r\n  aa.patient_id,\r\n  aa.claim_start_date as condition_date,\r\n  'discharge_diagnosis' as condition_type,\r\n  aa.diagnosis_code_type as code_type,\r\n  aa.diagnosis_code_14 as code,\r\n  14 as diagnosis_rank,\r\n  aa.diagnosis_poa_14 as present_on_admit_code,\r\n  aa.data_source\r\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\r\nwhere aa.diagnosis_code_14 is not null\r\n\r\nunion all \r\n\r\nselect\r\n  aa.encounter_id,\r\n  aa.patient_id,\r\n  aa.claim_start_date as condition_date,\r\n  'discharge_diagnosis' as condition_type,\r\n  aa.diagnosis_code_type as code_type,\r\n  aa.diagnosis_code_15 as code,\r\n  15 as diagnosis_rank,\r\n  aa.diagnosis_poa_15 as present_on_admit_code,\r\n  aa.data_source\r\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\r\nwhere aa.diagnosis_code_15 is not null\r\n\r\nunion all \r\n\r\nselect\r\n  aa.encounter_id,\r\n  aa.patient_id,\r\n  aa.claim_start_date as condition_date,\r\n  'discharge_diagnosis' as condition_type,\r\n  aa.diagnosis_code_type as code_type,\r\n  aa.diagnosis_code_16 as code,\r\n  16 as diagnosis_rank,\r\n  aa.diagnosis_poa_16 as present_on_admit_code,\r\n  aa.data_source\r\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\r\nwhere aa.diagnosis_code_16 is not null\r\n\r\nunion all \r\n\r\nselect\r\n  aa.encounter_id,\r\n  aa.patient_id,\r\n  aa.claim_start_date as condition_date,\r\n  'discharge_diagnosis' as condition_type,\r\n  aa.diagnosis_code_type as code_type,\r\n  aa.diagnosis_code_17 as code,\r\n  17 as diagnosis_rank,\r\n  aa.diagnosis_poa_17 as present_on_admit_code,\r\n  aa.data_source\r\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\r\nwhere aa.diagnosis_code_17 is not null\r\n\r\nunion all \r\n\r\nselect\r\n  aa.encounter_id,\r\n  aa.patient_id,\r\n  aa.claim_start_date as condition_date,\r\n  'discharge_diagnosis' as condition_type,\r\n  aa.diagnosis_code_type as code_type,\r\n  aa.diagnosis_code_18 as code,\r\n  18 as diagnosis_rank,\r\n  aa.diagnosis_poa_18 as present_on_admit_code,\r\n  aa.data_source\r\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\r\nwhere aa.diagnosis_code_18 is not null\r\n\r\nunion all \r\n\r\nselect\r\n  aa.encounter_id,\r\n  aa.patient_id,\r\n  aa.claim_start_date as condition_date,\r\n  'discharge_diagnosis' as condition_type,\r\n  aa.diagnosis_code_type as code_type,\r\n  aa.diagnosis_code_19 as code,\r\n  19 as diagnosis_rank,\r\n  aa.diagnosis_poa_19 as present_on_admit_code,\r\n  aa.data_source\r\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\r\nwhere aa.diagnosis_code_19 is not null\r\n\r\nunion all \r\n\r\nselect\r\n  aa.encounter_id,\r\n  aa.patient_id,\r\n  aa.claim_start_date as condition_date,\r\n  'discharge_diagnosis' as condition_type,\r\n  aa.diagnosis_code_type as code_type,\r\n  aa.diagnosis_code_20 as code,\r\n  20 as diagnosis_rank,\r\n  aa.diagnosis_poa_20 as present_on_admit_code,\r\n  aa.data_source\r\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\r\nwhere aa.diagnosis_code_20 is not null\r\n\r\nunion all \r\n\r\nselect\r\n  aa.encounter_id,\r\n  aa.patient_id,\r\n  aa.claim_start_date as condition_date,\r\n  'discharge_diagnosis' as condition_type,\r\n  aa.diagnosis_code_type as code_type,\r\n  aa.diagnosis_code_21 as code,\r\n  21 as diagnosis_rank,\r\n  aa.diagnosis_poa_21 as present_on_admit_code,\r\n  aa.data_source\r\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\r\nwhere aa.diagnosis_code_21 is not null\r\n\r\nunion all \r\n\r\nselect\r\n  aa.encounter_id,\r\n  aa.patient_id,\r\n  aa.claim_start_date as condition_date,\r\n  'discharge_diagnosis' as condition_type,\r\n  aa.diagnosis_code_type as code_type,\r\n  aa.diagnosis_code_22 as code,\r\n  22 as diagnosis_rank,\r\n  aa.diagnosis_poa_22 as present_on_admit_code,\r\n  aa.data_source\r\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\r\nwhere aa.diagnosis_code_22 is not null\r\n\r\nunion all \r\n\r\nselect\r\n  aa.encounter_id,\r\n  aa.patient_id,\r\n  aa.claim_start_date as condition_date,\r\n  'discharge_diagnosis' as condition_type,\r\n  aa.diagnosis_code_type as code_type,\r\n  aa.diagnosis_code_23 as code,\r\n  23 as diagnosis_rank,\r\n  aa.diagnosis_poa_23 as present_on_admit_code,\r\n  aa.data_source\r\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\r\nwhere aa.diagnosis_code_23 is not null\r\n\r\nunion all \r\n\r\nselect\r\n  aa.encounter_id,\r\n  aa.patient_id,\r\n  aa.claim_start_date as condition_date,\r\n  'discharge_diagnosis' as condition_type,\r\n  aa.diagnosis_code_type as code_type,\r\n  aa.diagnosis_code_24 as code,\r\n  24 as diagnosis_rank,\r\n  aa.diagnosis_poa_24 as present_on_admit_code,\r\n  aa.data_source\r\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\r\nwhere aa.diagnosis_code_24 is not null\r\n\r\nunion all \r\n\r\nselect\r\n  aa.encounter_id,\r\n  aa.patient_id,\r\n  aa.claim_start_date as condition_date,\r\n  'discharge_diagnosis' as condition_type,\r\n  aa.diagnosis_code_type as code_type,\r\n  aa.diagnosis_code_25 as code,\r\n  25 as diagnosis_rank,\r\n  aa.diagnosis_poa_25 as present_on_admit_code,\r\n  aa.data_source\r\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\r\nwhere aa.diagnosis_code_25 is not null\r\n\r\n)\r\n\r\n\r\n\r\nselect distinct\r\n  unpivot_cte.encounter_id,\r\n  unpivot_cte.patient_id,\r\n  unpivot_cte.condition_date as condition_date,\r\n  unpivot_cte.condition_type as condition_type,\r\n  unpivot_cte.code_type as code_type,\r\n  unpivot_cte.code as code,\r\n  icd.short_description as description,\r\n  unpivot_cte.diagnosis_rank as diagnosis_rank,\r\n  unpivot_cte.present_on_admit_code as present_on_admit_code,\r\n  poa.present_on_admit_description as present_on_admit_description,\r\n  unpivot_cte.data_source as data_source\r\nfrom unpivot_cte\r\n     left join {{ ref('terminology__icd_10_cm') }} icd\r\n     on unpivot_cte.code = icd.icd_10_cm\r\n     left join {{ ref('terminology__present_on_admission') }} as poa\r\n     on unpivot_cte.present_on_admit_code = poa.present_on_admit_code", "language": "sql", "package_name": "claims_preprocessing", "root_path": "C:\\Users\\forre\\PycharmProjects\\claims_preprocessing\\docs\\docs_generate\\dbt_packages\\claims_preprocessing", "path": "claims_preprocessing__condition.sql", "original_file_path": "models\\claims_preprocessing__condition.sql", "name": "claims_preprocessing__condition", "alias": "condition", "checksum": {"name": "sha256", "checksum": "de2a99a71bd03ac5e662d1c19df95e29a6ef70f6dcef6817bb7285e2291ee531"}, "tags": ["claims_preprocessing"], "refs": [["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["terminology__icd_10_cm"], ["terminology__present_on_admission"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "claims_preprocessing://models\\_models.yml", "compiled_path": "target\\compiled\\claims_preprocessing\\models\\claims_preprocessing__condition.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "tuva", "schema": "core", "alias": "condition", "tags": "claims_preprocessing", "enabled": true}, "created_at": 1673363035.2018, "compiled_code": "\n\n\n\n\nwith unpivot_cte as (\n\nselect\n  aa.encounter_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_1 as code,\n  1 as diagnosis_rank,\n  aa.diagnosis_poa_1 as present_on_admit_code,\n  aa.data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere aa.diagnosis_code_1 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_2 as code,\n  2 as diagnosis_rank,\n  aa.diagnosis_poa_2 as present_on_admit_code,\n  aa.data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere aa.diagnosis_code_2 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_3 as code,\n  3 as diagnosis_rank,\n  aa.diagnosis_poa_3 as present_on_admit_code,\n  aa.data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere aa.diagnosis_code_3 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_4 as code,\n  4 as diagnosis_rank,\n  aa.diagnosis_poa_4 as present_on_admit_code,\n  aa.data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere aa.diagnosis_code_4 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_5 as code,\n  5 as diagnosis_rank,\n  aa.diagnosis_poa_5 as present_on_admit_code,\n  aa.data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere aa.diagnosis_code_5 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_6 as code,\n  6 as diagnosis_rank,\n  aa.diagnosis_poa_6 as present_on_admit_code,\n  aa.data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere aa.diagnosis_code_6 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_7 as code,\n  7 as diagnosis_rank,\n  aa.diagnosis_poa_7 as present_on_admit_code,\n  aa.data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere aa.diagnosis_code_7 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_8 as code,\n  8 as diagnosis_rank,\n  aa.diagnosis_poa_8 as present_on_admit_code,\n  aa.data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere aa.diagnosis_code_8 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_9 as code,\n  9 as diagnosis_rank,\n  aa.diagnosis_poa_9 as present_on_admit_code,\n  aa.data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere aa.diagnosis_code_9 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_10 as code,\n  10 as diagnosis_rank,\n  aa.diagnosis_poa_10 as present_on_admit_code,\n  aa.data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere aa.diagnosis_code_10 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_11 as code,\n  11 as diagnosis_rank,\n  aa.diagnosis_poa_11 as present_on_admit_code,\n  aa.data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere aa.diagnosis_code_11 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_12 as code,\n  12 as diagnosis_rank,\n  aa.diagnosis_poa_12 as present_on_admit_code,\n  aa.data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere aa.diagnosis_code_12 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_13 as code,\n  13 as diagnosis_rank,\n  aa.diagnosis_poa_13 as present_on_admit_code,\n  aa.data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere aa.diagnosis_code_13 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_14 as code,\n  14 as diagnosis_rank,\n  aa.diagnosis_poa_14 as present_on_admit_code,\n  aa.data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere aa.diagnosis_code_14 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_15 as code,\n  15 as diagnosis_rank,\n  aa.diagnosis_poa_15 as present_on_admit_code,\n  aa.data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere aa.diagnosis_code_15 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_16 as code,\n  16 as diagnosis_rank,\n  aa.diagnosis_poa_16 as present_on_admit_code,\n  aa.data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere aa.diagnosis_code_16 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_17 as code,\n  17 as diagnosis_rank,\n  aa.diagnosis_poa_17 as present_on_admit_code,\n  aa.data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere aa.diagnosis_code_17 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_18 as code,\n  18 as diagnosis_rank,\n  aa.diagnosis_poa_18 as present_on_admit_code,\n  aa.data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere aa.diagnosis_code_18 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_19 as code,\n  19 as diagnosis_rank,\n  aa.diagnosis_poa_19 as present_on_admit_code,\n  aa.data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere aa.diagnosis_code_19 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_20 as code,\n  20 as diagnosis_rank,\n  aa.diagnosis_poa_20 as present_on_admit_code,\n  aa.data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere aa.diagnosis_code_20 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_21 as code,\n  21 as diagnosis_rank,\n  aa.diagnosis_poa_21 as present_on_admit_code,\n  aa.data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere aa.diagnosis_code_21 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_22 as code,\n  22 as diagnosis_rank,\n  aa.diagnosis_poa_22 as present_on_admit_code,\n  aa.data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere aa.diagnosis_code_22 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_23 as code,\n  23 as diagnosis_rank,\n  aa.diagnosis_poa_23 as present_on_admit_code,\n  aa.data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere aa.diagnosis_code_23 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_24 as code,\n  24 as diagnosis_rank,\n  aa.diagnosis_poa_24 as present_on_admit_code,\n  aa.data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere aa.diagnosis_code_24 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_25 as code,\n  25 as diagnosis_rank,\n  aa.diagnosis_poa_25 as present_on_admit_code,\n  aa.data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere aa.diagnosis_code_25 is not null\n\n)\n\n\n\nselect distinct\n  unpivot_cte.encounter_id,\n  unpivot_cte.patient_id,\n  unpivot_cte.condition_date as condition_date,\n  unpivot_cte.condition_type as condition_type,\n  unpivot_cte.code_type as code_type,\n  unpivot_cte.code as code,\n  icd.short_description as description,\n  unpivot_cte.diagnosis_rank as diagnosis_rank,\n  unpivot_cte.present_on_admit_code as present_on_admit_code,\n  poa.present_on_admit_description as present_on_admit_description,\n  unpivot_cte.data_source as data_source\nfrom unpivot_cte\n     left join tuva.terminology.icd_10_cm icd\n     on unpivot_cte.code = icd.icd_10_cm\n     left join tuva.terminology.present_on_admission as poa\n     on unpivot_cte.present_on_admit_code = poa.present_on_admit_code", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.condition"}, "model.claims_preprocessing.claims_preprocessing__encounter": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "seed.terminology.terminology__admit_source", "seed.terminology.terminology__admit_type", "seed.terminology.terminology__discharge_disposition", "seed.terminology.terminology__ms_drg"]}, "config": {"enabled": true, "alias": "encounter", "schema": "core", "database": "tuva", "tags": ["claims_preprocessing"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["claims_preprocessing", "claims_preprocessing__encounter"], "unique_id": "model.claims_preprocessing.claims_preprocessing__encounter", "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))\r\n   )\r\n}}\r\n\r\n\r\n\r\n\r\nwith table_without_descriptions as (\r\nselect\r\n  encounter_id,\r\n  max(patient_id) as patient_id,\r\n  max(encounter_type) as encounter_type,\r\n  max(encounter_start_date) as encounter_start_date,\r\n  max(encounter_end_date) as encounter_end_date,\r\n  max(admission_date) as admission_date,\r\n  min(discharge_date) as discharge_date,\r\n  max(encounter_admit_source_code) as admit_source_code,\r\n  max(encounter_admit_type_code) as admit_type_code,\r\n  max(encounter_discharge_disposition_code) as discharge_disposition_code,\r\n  max(rendering_npi) as rendering_npi,\r\n  max(billing_npi) as billing_npi,\r\n  max(facility_npi) as facility_npi,\r\n  null as facility_name,\r\n  max(ms_drg_code) as ms_drg_code,\r\n  max(paid_date) as paid_date,\r\n  sum(paid_amount) as paid_amount,\r\n  sum(allowed_amount) as allowed_amount,\r\n  sum(charge_amount) as charge_amount,\r\n  max(data_source) as data_source\r\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\r\ngroup by encounter_id\r\n),\r\n\r\n\r\nadd_descriptions as (\r\nselect\r\n  aa.encounter_id,\r\n  aa.patient_id as patient_id,\r\n  aa.encounter_type as encounter_type,\r\n  aa.encounter_start_date as encounter_start_date,\r\n  aa.encounter_end_date as encounter_end_date,\r\n  aa.admit_source_code as admit_source_code,\r\n  bb.admit_source_description,\r\n  aa.admit_type_code as admit_type_code,\r\n  cc.admit_type_description,\r\n  aa.discharge_disposition_code as discharge_disposition_code,\r\n  dd.discharge_disposition_description as\r\n     discharge_disposition_description,\r\n  aa.rendering_npi as rendering_npi,\r\n  aa.billing_npi as billing_npi,\r\n  aa.facility_npi as facility_npi,\r\n  aa.ms_drg_code as ms_drg_code,\r\n  ee.ms_drg_description,\r\n  aa.paid_date as paid_date,\r\n  aa.paid_amount as paid_amount,\r\n  aa.allowed_amount as allowed_amount,\r\n  aa.charge_amount as charge_amount,\r\n  aa.data_source as data_source\r\n\r\nfrom table_without_descriptions aa\r\n     left join {{ ref('terminology__admit_source') }} bb\r\n     on aa.admit_source_code = bb.admit_source_code\r\n     left join {{ ref('terminology__admit_type') }} cc\r\n     on aa.admit_type_code = cc.admit_type_code\r\n     left join {{ ref('terminology__discharge_disposition') }} dd\r\n     on aa.discharge_disposition_code = dd.discharge_disposition_code\r\n     left join {{ ref('terminology__ms_drg') }} ee\r\n     on aa.ms_drg_code = ee.ms_drg_code\r\n     \r\n)\r\n\r\n\r\nselect *\r\nfrom add_descriptions", "language": "sql", "package_name": "claims_preprocessing", "root_path": "C:\\Users\\forre\\PycharmProjects\\claims_preprocessing\\docs\\docs_generate\\dbt_packages\\claims_preprocessing", "path": "claims_preprocessing__encounter.sql", "original_file_path": "models\\claims_preprocessing__encounter.sql", "name": "claims_preprocessing__encounter", "alias": "encounter", "checksum": {"name": "sha256", "checksum": "edd508035b809559ec57765b608b59849996c8c38fbac62023cc2df6ac11ab1e"}, "tags": ["claims_preprocessing"], "refs": [["claims_preprocessing__medical_claim_enhanced"], ["terminology__admit_source"], ["terminology__admit_type"], ["terminology__discharge_disposition"], ["terminology__ms_drg"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "claims_preprocessing://models\\_models.yml", "compiled_path": "target\\compiled\\claims_preprocessing\\models\\claims_preprocessing__encounter.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "tuva", "schema": "core", "alias": "encounter", "tags": "claims_preprocessing", "enabled": true}, "created_at": 1673363035.198643, "compiled_code": "\n\n\n\n\nwith table_without_descriptions as (\nselect\n  encounter_id,\n  max(patient_id) as patient_id,\n  max(encounter_type) as encounter_type,\n  max(encounter_start_date) as encounter_start_date,\n  max(encounter_end_date) as encounter_end_date,\n  max(admission_date) as admission_date,\n  min(discharge_date) as discharge_date,\n  max(encounter_admit_source_code) as admit_source_code,\n  max(encounter_admit_type_code) as admit_type_code,\n  max(encounter_discharge_disposition_code) as discharge_disposition_code,\n  max(rendering_npi) as rendering_npi,\n  max(billing_npi) as billing_npi,\n  max(facility_npi) as facility_npi,\n  null as facility_name,\n  max(ms_drg_code) as ms_drg_code,\n  max(paid_date) as paid_date,\n  sum(paid_amount) as paid_amount,\n  sum(allowed_amount) as allowed_amount,\n  sum(charge_amount) as charge_amount,\n  max(data_source) as data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\ngroup by encounter_id\n),\n\n\nadd_descriptions as (\nselect\n  aa.encounter_id,\n  aa.patient_id as patient_id,\n  aa.encounter_type as encounter_type,\n  aa.encounter_start_date as encounter_start_date,\n  aa.encounter_end_date as encounter_end_date,\n  aa.admit_source_code as admit_source_code,\n  bb.admit_source_description,\n  aa.admit_type_code as admit_type_code,\n  cc.admit_type_description,\n  aa.discharge_disposition_code as discharge_disposition_code,\n  dd.discharge_disposition_description as\n     discharge_disposition_description,\n  aa.rendering_npi as rendering_npi,\n  aa.billing_npi as billing_npi,\n  aa.facility_npi as facility_npi,\n  aa.ms_drg_code as ms_drg_code,\n  ee.ms_drg_description,\n  aa.paid_date as paid_date,\n  aa.paid_amount as paid_amount,\n  aa.allowed_amount as allowed_amount,\n  aa.charge_amount as charge_amount,\n  aa.data_source as data_source\n\nfrom table_without_descriptions aa\n     left join tuva.terminology.admit_source bb\n     on aa.admit_source_code = bb.admit_source_code\n     left join tuva.terminology.admit_type cc\n     on aa.admit_type_code = cc.admit_type_code\n     left join tuva.terminology.discharge_disposition dd\n     on aa.discharge_disposition_code = dd.discharge_disposition_code\n     left join tuva.terminology.ms_drg ee\n     on aa.ms_drg_code = ee.ms_drg_code\n     \n)\n\n\nselect *\nfrom add_descriptions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.encounter"}, "model.claims_preprocessing.claims_preprocessing__patient": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.type_string"], "nodes": ["model.claims_preprocessing.claims_preprocessing__eligibility"]}, "config": {"enabled": true, "alias": "patient", "schema": "core", "database": "tuva", "tags": ["claims_preprocessing"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["claims_preprocessing", "claims_preprocessing__patient"], "unique_id": "model.claims_preprocessing.claims_preprocessing__patient", "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))\r\n   )\r\n}}\r\n\r\n\r\n\r\n\r\nwith patient_stage as(\r\n    select\r\n        patient_id\r\n        ,gender\r\n        ,race\r\n        ,birth_date\r\n        ,death_date\r\n        ,death_flag\r\n        ,first_name\r\n        ,last_name\r\n        ,address\r\n        ,city\r\n        ,state\r\n        ,zip_code\r\n        ,phone\r\n        ,data_source\r\n        ,row_number() over (\r\n\t    partition by patient_id\r\n\t    order by enrollment_end_date DESC) as row_sequence\r\n    from {{ ref('claims_preprocessing__eligibility')}}\r\n)\r\n\r\nselect\r\n    cast(patient_id as {{ dbt.type_string() }}) as patient_id\r\n    ,cast(gender as {{ dbt.type_string() }}) as gender\r\n    ,cast(race as {{ dbt.type_string() }}) as race\r\n    ,cast(birth_date as date) as birth_date\r\n    ,cast(death_date as date) as death_date\r\n    ,cast(death_flag as int) as death_flag\r\n    ,cast(first_name as {{ dbt.type_string() }}) as first_name\r\n    ,cast(last_name as {{ dbt.type_string() }}) as last_name\r\n    ,cast(address as {{ dbt.type_string() }}) as address\r\n    ,cast(city as {{ dbt.type_string() }}) as city\r\n    ,cast(state as {{ dbt.type_string() }}) as state\r\n    ,cast(zip_code as {{ dbt.type_string() }}) as zip_code\r\n    ,cast(phone as {{ dbt.type_string() }}) as phone\r\n    ,cast(data_source as {{ dbt.type_string() }}) as data_source\r\nfrom patient_stage\r\nwhere row_sequence = 1", "language": "sql", "package_name": "claims_preprocessing", "root_path": "C:\\Users\\forre\\PycharmProjects\\claims_preprocessing\\docs\\docs_generate\\dbt_packages\\claims_preprocessing", "path": "claims_preprocessing__patient.sql", "original_file_path": "models\\claims_preprocessing__patient.sql", "name": "claims_preprocessing__patient", "alias": "patient", "checksum": {"name": "sha256", "checksum": "2638b91a2a6c506a44255360b02b6ba7ef64816ce9c6c2c3544b86ea49df2c70"}, "tags": ["claims_preprocessing"], "refs": [["claims_preprocessing__eligibility"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "claims_preprocessing://models\\_models.yml", "compiled_path": "target\\compiled\\claims_preprocessing\\models\\claims_preprocessing__patient.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "tuva", "schema": "core", "alias": "patient", "tags": "claims_preprocessing", "enabled": true}, "created_at": 1673363035.1926327, "compiled_code": "\n\n\n\n\nwith patient_stage as(\n    select\n        patient_id\n        ,gender\n        ,race\n        ,birth_date\n        ,death_date\n        ,death_flag\n        ,first_name\n        ,last_name\n        ,address\n        ,city\n        ,state\n        ,zip_code\n        ,phone\n        ,data_source\n        ,row_number() over (\n\t    partition by patient_id\n\t    order by enrollment_end_date DESC) as row_sequence\n    from tuva.core.staging_eligibility\n)\n\nselect\n    cast(patient_id as TEXT) as patient_id\n    ,cast(gender as TEXT) as gender\n    ,cast(race as TEXT) as race\n    ,cast(birth_date as date) as birth_date\n    ,cast(death_date as date) as death_date\n    ,cast(death_flag as int) as death_flag\n    ,cast(first_name as TEXT) as first_name\n    ,cast(last_name as TEXT) as last_name\n    ,cast(address as TEXT) as address\n    ,cast(city as TEXT) as city\n    ,cast(state as TEXT) as state\n    ,cast(zip_code as TEXT) as zip_code\n    ,cast(phone as TEXT) as phone\n    ,cast(data_source as TEXT) as data_source\nfrom patient_stage\nwhere row_sequence = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.patient"}, "model.claims_preprocessing.claims_preprocessing__prescription": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.type_string"], "nodes": ["model.claims_preprocessing_input.pharmacy_claim"]}, "config": {"enabled": true, "alias": "prescription", "schema": "core", "database": "tuva", "tags": ["claims_preprocessing"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["claims_preprocessing", "claims_preprocessing__prescription"], "unique_id": "model.claims_preprocessing.claims_preprocessing__prescription", "raw_code": "{{ config(enabled=var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))) }}\r\n\r\n{# jinja to use an empty pharmacy_claim table if the pharmacy_claim_exists var is set to false, or the node in the pharmacy_claim variable otherwise  #}\r\n{% if var('pharmacy_claim_exists',True) %}\r\nselect\r\n    cast(claim_id as {{ dbt.type_string() }}) as claim_id\r\n    , cast(claim_line_number as {{ dbt.type_string() }}) as claim_line_number\r\n    , cast(patient_id as {{ dbt.type_string() }}) as patient_id\r\n    , cast(member_id as {{ dbt.type_string() }}) as member_id\r\n    , cast(prescribing_provider_npi as {{ dbt.type_string() }}) as prescribing_provider_npi\r\n    , cast(dispensing_provider_npi as {{ dbt.type_string() }}) as dispensing_provider_npi\r\n    , cast(dispensing_date as date ) as dispensing_date\r\n    , cast(ndc_code as {{ dbt.type_string() }}) as ndc_code\r\n    , cast(quantity as int ) as quantity\r\n    , cast(days_supply as int ) as days_supply\r\n    , cast(refills as int) as refills\r\n    , cast(paid_date as date ) as paid_date\r\n    , cast(paid_amount as numeric ) as paid_amount\r\n    , cast(allowed_amount as numeric ) as allowed_amount\r\n    , cast(data_source as {{ dbt.type_string() }}) as data_source\r\nfrom {{ var('pharmacy_claim')}} m\r\n\r\n{% else %}\r\n\r\n{% if execute %}\r\n{{- log(\"pharmacy_claim soruce does not exist, using empty table.\", info=true) -}}\r\n{% endif %}\r\nselect\r\n    cast(null as {{ dbt.type_string() }}) as claim_id\r\n    , cast(null as {{ dbt.type_string() }}) as claim_line_number\r\n    , cast(null as {{ dbt.type_string() }}) as patient_id\r\n    , cast(null as {{ dbt.type_string() }}) as member_id\r\n    , cast(null as {{ dbt.type_string() }}) as prescribing_provider_npi\r\n    , cast(null as {{ dbt.type_string() }}) as dispensing_provider_npi\r\n    , cast(null as date ) as dispensing_date\r\n    , cast(null as {{ dbt.type_string() }}) as ndc_code\r\n    , cast(null as int ) as quantity\r\n    , cast(null as int ) as days_supply\r\n    , cast(null as int) as refills\r\n    , cast(null as date ) as paid_date\r\n    , cast(null as numeric ) as paid_amount\r\n    , cast(null as numeric ) as allowed_amount\r\n    , cast(null as {{ dbt.type_string() }}) as data_source\r\n    limit 0\r\n\r\n{%- endif %}", "language": "sql", "package_name": "claims_preprocessing", "root_path": "C:\\Users\\forre\\PycharmProjects\\claims_preprocessing\\docs\\docs_generate\\dbt_packages\\claims_preprocessing", "path": "claims_preprocessing__prescription.sql", "original_file_path": "models\\claims_preprocessing__prescription.sql", "name": "claims_preprocessing__prescription", "alias": "prescription", "checksum": {"name": "sha256", "checksum": "018754b22e34253fa2e2a5856767424589da073d16ec381b32594bac4d024fb1"}, "tags": ["claims_preprocessing"], "refs": [["pharmacy_claim"]], "sources": [], "metrics": [], "description": "Medications from claims", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "claims_preprocessing://models\\_models.yml", "compiled_path": "target\\compiled\\claims_preprocessing\\models\\claims_preprocessing__prescription.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "tuva", "schema": "core", "alias": "prescription", "tags": "claims_preprocessing", "enabled": true}, "created_at": 1673363035.1926327, "compiled_code": "\n\n\n\nselect\n    cast(claim_id as TEXT) as claim_id\n    , cast(claim_line_number as TEXT) as claim_line_number\n    , cast(patient_id as TEXT) as patient_id\n    , cast(member_id as TEXT) as member_id\n    , cast(prescribing_provider_npi as TEXT) as prescribing_provider_npi\n    , cast(dispensing_provider_npi as TEXT) as dispensing_provider_npi\n    , cast(dispensing_date as date ) as dispensing_date\n    , cast(ndc_code as TEXT) as ndc_code\n    , cast(quantity as int ) as quantity\n    , cast(days_supply as int ) as days_supply\n    , cast(refills as int) as refills\n    , cast(paid_date as date ) as paid_date\n    , cast(paid_amount as numeric ) as paid_amount\n    , cast(allowed_amount as numeric ) as allowed_amount\n    , cast(data_source as TEXT) as data_source\nfrom tuva.claims_preprocessing_input.pharmacy_claim m\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.prescription"}, "model.claims_preprocessing.claims_preprocessing__procedure": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "seed.terminology.terminology__icd_10_pcs"]}, "config": {"enabled": true, "alias": "procedure", "schema": "core", "database": "tuva", "tags": ["claims_preprocessing"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["claims_preprocessing", "claims_preprocessing__procedure"], "unique_id": "model.claims_preprocessing.claims_preprocessing__procedure", "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))\r\n   )\r\n}}\r\n\r\n\r\n\r\n\r\nwith unpivot_cte as (\r\n\r\nselect\r\n  aa.encounter_id as encounter_id,\r\n  aa.patient_id as patient_id,\r\n  aa.procedure_date_1 as procedure_date,\r\n  aa.procedure_code_type as code_type,\r\n  aa.procedure_code_1 as code,\r\n  aa.billing_npi as practitioner_npi,\r\n  aa.data_source as data_source\r\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\r\nwhere procedure_code_1 is not null\r\n    \r\nunion distinct\r\n\r\nselect\r\n  aa.encounter_id as encounter_id,\r\n  aa.patient_id as patient_id,\r\n  aa.procedure_date_2 as procedure_date,\r\n  aa.procedure_code_type as code_type,\r\n  aa.procedure_code_2 as code,\r\n  aa.billing_npi as practitioner_npi,\r\n  aa.data_source as data_source\r\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\r\nwhere procedure_code_2 is not null\r\n\r\nunion distinct\r\n\r\nselect\r\n  aa.encounter_id as encounter_id,\r\n  aa.patient_id as patient_id,\r\n  aa.procedure_date_3 as procedure_date,\r\n  aa.procedure_code_type as code_type,\r\n  aa.procedure_code_3 as code,\r\n  aa.billing_npi as practitioner_npi,\r\n  aa.data_source as data_source\r\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\r\nwhere procedure_code_3 is not null\r\n\r\nunion distinct\r\n\r\nselect\r\n  aa.encounter_id as encounter_id,\r\n  aa.patient_id as patient_id,\r\n  aa.procedure_date_4 as procedure_date,\r\n  aa.procedure_code_type as code_type,\r\n  aa.procedure_code_4 as code,\r\n  aa.billing_npi as practitioner_npi,\r\n  aa.data_source as data_source\r\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\r\nwhere procedure_code_4 is not null\r\n\r\nunion distinct\r\n\r\nselect\r\n  aa.encounter_id as encounter_id,\r\n  aa.patient_id as patient_id,\r\n  aa.procedure_date_5 as procedure_date,\r\n  aa.procedure_code_type as code_type,\r\n  aa.procedure_code_5 as code,\r\n  aa.billing_npi as practitioner_npi,\r\n  aa.data_source as data_source\r\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\r\nwhere procedure_code_5 is not null\r\n\r\nunion distinct\r\n\r\nselect\r\n  aa.encounter_id as encounter_id,\r\n  aa.patient_id as patient_id,\r\n  aa.procedure_date_6 as procedure_date,\r\n  aa.procedure_code_type as code_type,\r\n  aa.procedure_code_6 as code,\r\n  aa.billing_npi as practitioner_npi,\r\n  aa.data_source as data_source\r\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\r\nwhere procedure_code_6 is not null\r\n\r\nunion distinct\r\n\r\nselect\r\n  aa.encounter_id as encounter_id,\r\n  aa.patient_id as patient_id,\r\n  aa.procedure_date_7 as procedure_date,\r\n  aa.procedure_code_type as code_type,\r\n  aa.procedure_code_7 as code,\r\n  aa.billing_npi as practitioner_npi,\r\n  aa.data_source as data_source\r\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\r\nwhere procedure_code_7 is not null\r\n\r\nunion distinct\r\n\r\nselect\r\n  aa.encounter_id as encounter_id,\r\n  aa.patient_id as patient_id,\r\n  aa.procedure_date_8 as procedure_date,\r\n  aa.procedure_code_type as code_type,\r\n  aa.procedure_code_8 as code,\r\n  aa.billing_npi as practitioner_npi,\r\n  aa.data_source as data_source\r\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\r\nwhere procedure_code_8 is not null\r\n\r\nunion distinct\r\n\r\nselect\r\n  aa.encounter_id as encounter_id,\r\n  aa.patient_id as patient_id,\r\n  aa.procedure_date_9 as procedure_date,\r\n  aa.procedure_code_type as code_type,\r\n  aa.procedure_code_9 as code,\r\n  aa.billing_npi as practitioner_npi,\r\n  aa.data_source as data_source\r\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\r\nwhere procedure_code_9 is not null\r\n\r\nunion distinct\r\n\r\nselect\r\n  aa.encounter_id as encounter_id,\r\n  aa.patient_id as patient_id,\r\n  aa.procedure_date_10 as procedure_date,\r\n  aa.procedure_code_type as code_type,\r\n  aa.procedure_code_10 as code,\r\n  aa.billing_npi as practitioner_npi,\r\n  aa.data_source as data_source\r\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\r\nwhere procedure_code_10 is not null\r\n\r\nunion distinct\r\n\r\nselect\r\n  aa.encounter_id as encounter_id,\r\n  aa.patient_id as patient_id,\r\n  aa.procedure_date_11 as procedure_date,\r\n  aa.procedure_code_type as code_type,\r\n  aa.procedure_code_11 as code,\r\n  aa.billing_npi as practitioner_npi,\r\n  aa.data_source as data_source\r\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\r\nwhere procedure_code_11 is not null\r\nunion distinct\r\n\r\nselect\r\n  aa.encounter_id as encounter_id,\r\n  aa.patient_id as patient_id,\r\n  aa.procedure_date_12 as procedure_date,\r\n  aa.procedure_code_type as code_type,\r\n  aa.procedure_code_12 as code,\r\n  aa.billing_npi as practitioner_npi,\r\n  aa.data_source as data_source\r\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\r\nwhere procedure_code_12 is not null\r\n\r\nunion distinct\r\n\r\nselect\r\n  aa.encounter_id as encounter_id,\r\n  aa.patient_id as patient_id,\r\n  aa.procedure_date_13 as procedure_date,\r\n  aa.procedure_code_type as code_type,\r\n  aa.procedure_code_13 as code,\r\n  aa.billing_npi as practitioner_npi,\r\n  aa.data_source as data_source\r\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\r\nwhere procedure_code_13 is not null\r\n\r\nunion distinct\r\n\r\nselect\r\n  aa.encounter_id as encounter_id,\r\n  aa.patient_id as patient_id,\r\n  aa.procedure_date_14 as procedure_date,\r\n  aa.procedure_code_type as code_type,\r\n  aa.procedure_code_14 as code,\r\n  aa.billing_npi as practitioner_npi,\r\n  aa.data_source as data_source\r\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\r\nwhere procedure_code_14 is not null\r\n\r\nunion distinct\r\n\r\nselect\r\n  aa.encounter_id as encounter_id,\r\n  aa.patient_id as patient_id,\r\n  aa.procedure_date_15 as procedure_date,\r\n  aa.procedure_code_type as code_type,\r\n  aa.procedure_code_15 as code,\r\n  aa.billing_npi as practitioner_npi,\r\n  aa.data_source as data_source\r\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\r\nwhere procedure_code_15 is not null\r\n\r\nunion distinct\r\n\r\nselect\r\n  aa.encounter_id as encounter_id,\r\n  aa.patient_id as patient_id,\r\n  aa.procedure_date_16 as procedure_date,\r\n  aa.procedure_code_type as code_type,\r\n  aa.procedure_code_16 as code,\r\n  aa.billing_npi as practitioner_npi,\r\n  aa.data_source as data_source\r\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\r\nwhere procedure_code_16 is not null\r\n    \r\nunion distinct\r\n\r\nselect\r\n  aa.encounter_id as encounter_id,\r\n  aa.patient_id as patient_id,\r\n  aa.procedure_date_17 as procedure_date,\r\n  aa.procedure_code_type as code_type,\r\n  aa.procedure_code_17 as code,\r\n  aa.billing_npi as practitioner_npi,\r\n  aa.data_source as data_source\r\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\r\nwhere procedure_code_17 is not null\r\n\r\nunion distinct\r\n\r\nselect\r\n  aa.encounter_id as encounter_id,\r\n  aa.patient_id as patient_id,\r\n  aa.procedure_date_18 as procedure_date,\r\n  aa.procedure_code_type as code_type,\r\n  aa.procedure_code_18 as code,\r\n  aa.billing_npi as practitioner_npi,\r\n  aa.data_source as data_source\r\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\r\nwhere procedure_code_18 is not null\r\n\r\nunion distinct\r\n\r\nselect\r\n  aa.encounter_id as encounter_id,\r\n  aa.patient_id as patient_id,\r\n  aa.procedure_date_19 as procedure_date,\r\n  aa.procedure_code_type as code_type,\r\n  aa.procedure_code_19 as code,\r\n  aa.billing_npi as practitioner_npi,\r\n  aa.data_source as data_source\r\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\r\nwhere procedure_code_19 is not null\r\n\r\nunion distinct\r\n\r\nselect\r\n  aa.encounter_id as encounter_id,\r\n  aa.patient_id as patient_id,\r\n  aa.procedure_date_20 as procedure_date,\r\n  aa.procedure_code_type as code_type,\r\n  aa.procedure_code_20 as code,\r\n  aa.billing_npi as practitioner_npi,\r\n  aa.data_source as data_source\r\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\r\nwhere procedure_code_20 is not null\r\n\r\nunion distinct\r\n\r\nselect\r\n  aa.encounter_id as encounter_id,\r\n  aa.patient_id as patient_id,\r\n  aa.procedure_date_21 as procedure_date,\r\n  aa.procedure_code_type as code_type,\r\n  aa.procedure_code_21 as code,\r\n  aa.billing_npi as practitioner_npi,\r\n  aa.data_source as data_source\r\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\r\nwhere procedure_code_21 is not null\r\n\r\nunion distinct\r\n\r\nselect\r\n  aa.encounter_id as encounter_id,\r\n  aa.patient_id as patient_id,\r\n  aa.procedure_date_22 as procedure_date,\r\n  aa.procedure_code_type as code_type,\r\n  aa.procedure_code_22 as code,\r\n  aa.billing_npi as practitioner_npi,\r\n  aa.data_source as data_source\r\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\r\nwhere procedure_code_22 is not null\r\n\r\nunion distinct\r\n\r\nselect\r\n  aa.encounter_id as encounter_id,\r\n  aa.patient_id as patient_id,\r\n  aa.procedure_date_23 as procedure_date,\r\n  aa.procedure_code_type as code_type,\r\n  aa.procedure_code_23 as code,\r\n  aa.billing_npi as practitioner_npi,\r\n  aa.data_source as data_source\r\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\r\nwhere procedure_code_23 is not null\r\n\r\nunion distinct\r\n\r\nselect\r\n  aa.encounter_id as encounter_id,\r\n  aa.patient_id as patient_id,\r\n  aa.procedure_date_24 as procedure_date,\r\n  aa.procedure_code_type as code_type,\r\n  aa.procedure_code_24 as code,\r\n  aa.billing_npi as practitioner_npi,\r\n  aa.data_source as data_source\r\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\r\nwhere procedure_code_24 is not null\r\n\r\nunion distinct\r\n\r\nselect\r\n  aa.encounter_id as encounter_id,\r\n  aa.patient_id as patient_id,\r\n  aa.procedure_date_25 as procedure_date,\r\n  aa.procedure_code_type as code_type,\r\n  aa.procedure_code_25 as code,\r\n  aa.billing_npi as practitioner_npi,\r\n  aa.data_source as data_source\r\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\r\nwhere procedure_code_25 is not null\r\n\r\n)\r\n\r\n\r\nselect distinct\r\n  unpivot_cte.encounter_id as encounter_id,\r\n  unpivot_cte.patient_id as patient_id,\r\n  unpivot_cte.procedure_date as procedure_date,\r\n  unpivot_cte.code_type as code_type,\r\n  unpivot_cte.code as code,\r\n  icd.short_description as description,\r\n  unpivot_cte.practitioner_npi as practitioner_npi,\r\n  unpivot_cte.data_source as data_source\r\nfrom unpivot_cte\r\n  left join {{ ref('terminology__icd_10_pcs') }} as icd\r\n    on unpivot_cte.code = icd.icd_10_pcs", "language": "sql", "package_name": "claims_preprocessing", "root_path": "C:\\Users\\forre\\PycharmProjects\\claims_preprocessing\\docs\\docs_generate\\dbt_packages\\claims_preprocessing", "path": "claims_preprocessing__procedure.sql", "original_file_path": "models\\claims_preprocessing__procedure.sql", "name": "claims_preprocessing__procedure", "alias": "procedure", "checksum": {"name": "sha256", "checksum": "8cfa9b0c97edc3c0eeef24d0bec2371b0fba7fcc10662fa59034dd41ae1d6489"}, "tags": ["claims_preprocessing"], "refs": [["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["terminology__icd_10_pcs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "claims_preprocessing://models\\_models.yml", "compiled_path": "target\\compiled\\claims_preprocessing\\models\\claims_preprocessing__procedure.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "tuva", "schema": "core", "alias": "procedure", "tags": "claims_preprocessing", "enabled": true}, "created_at": 1673363035.2058122, "compiled_code": "\n\n\n\n\nwith unpivot_cte as (\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_1 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_1 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere procedure_code_1 is not null\n    \nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_2 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_2 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere procedure_code_2 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_3 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_3 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere procedure_code_3 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_4 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_4 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere procedure_code_4 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_5 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_5 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere procedure_code_5 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_6 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_6 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere procedure_code_6 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_7 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_7 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere procedure_code_7 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_8 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_8 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere procedure_code_8 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_9 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_9 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere procedure_code_9 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_10 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_10 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere procedure_code_10 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_11 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_11 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere procedure_code_11 is not null\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_12 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_12 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere procedure_code_12 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_13 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_13 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere procedure_code_13 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_14 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_14 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere procedure_code_14 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_15 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_15 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere procedure_code_15 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_16 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_16 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere procedure_code_16 is not null\n    \nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_17 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_17 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere procedure_code_17 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_18 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_18 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere procedure_code_18 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_19 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_19 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere procedure_code_19 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_20 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_20 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere procedure_code_20 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_21 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_21 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere procedure_code_21 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_22 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_22 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere procedure_code_22 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_23 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_23 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere procedure_code_23 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_24 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_24 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere procedure_code_24 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_25 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_25 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere procedure_code_25 is not null\n\n)\n\n\nselect distinct\n  unpivot_cte.encounter_id as encounter_id,\n  unpivot_cte.patient_id as patient_id,\n  unpivot_cte.procedure_date as procedure_date,\n  unpivot_cte.code_type as code_type,\n  unpivot_cte.code as code,\n  icd.short_description as description,\n  unpivot_cte.practitioner_npi as practitioner_npi,\n  unpivot_cte.data_source as data_source\nfrom unpivot_cte\n  left join tuva.terminology.icd_10_pcs as icd\n    on unpivot_cte.code = icd.icd_10_pcs", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.procedure"}, "model.claims_preprocessing.claims_preprocessing__encounter_id": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.claims_preprocessing.claims_preprocessing__generate_institutional_encounter_id", "model.claims_preprocessing.claims_preprocessing__professional_claims_in_institutional_encounters", "model.claims_preprocessing.claims_preprocessing__professional_encounters"]}, "config": {"enabled": true, "alias": "intermediate_encounter_id", "schema": "core", "database": "tuva", "tags": ["claims_preprocessing"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["claims_preprocessing", "intermediate", "claims_preprocessing__encounter_id"], "unique_id": "model.claims_preprocessing.claims_preprocessing__encounter_id", "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))\r\n   )\r\n}}\r\n\r\n\r\n\r\n\r\nselect\r\n  patient_id,\r\n  claim_id,\r\n  encounter_id,\r\n  encounter_type,\r\n  encounter_type_detail,\r\n  0 as orphan_claim_flag\r\nfrom {{ ref('claims_preprocessing__generate_institutional_encounter_id') }}\r\n\r\nunion distinct\r\n\r\nselect\r\n  patient_id,\r\n  claim_id,\r\n  encounter_id,\r\n  encounter_type,\r\n  encounter_type_detail,\r\n  orphan_claim_flag\r\nfrom {{ ref('claims_preprocessing__professional_claims_in_institutional_encounters') }}\r\n\r\nunion distinct\r\n\r\nselect\r\n  patient_id,\r\n  claim_id,\r\n  encounter_id,\r\n  encounter_type,\r\n  encounter_type_detail,\r\n  0 as orphan_claim_flag\r\nfrom {{ ref('claims_preprocessing__professional_encounters') }}", "language": "sql", "package_name": "claims_preprocessing", "root_path": "C:\\Users\\forre\\PycharmProjects\\claims_preprocessing\\docs\\docs_generate\\dbt_packages\\claims_preprocessing", "path": "intermediate\\claims_preprocessing__encounter_id.sql", "original_file_path": "models\\intermediate\\claims_preprocessing__encounter_id.sql", "name": "claims_preprocessing__encounter_id", "alias": "intermediate_encounter_id", "checksum": {"name": "sha256", "checksum": "ca965a27d89cb1549dfa9413ddabf97f121c3fed1c9aa6769458ad76bc180ff7"}, "tags": ["claims_preprocessing"], "refs": [["claims_preprocessing__generate_institutional_encounter_id"], ["claims_preprocessing__professional_claims_in_institutional_encounters"], ["claims_preprocessing__professional_encounters"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "claims_preprocessing://models\\_models.yml", "compiled_path": "target\\compiled\\claims_preprocessing\\models\\intermediate\\claims_preprocessing__encounter_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "tuva", "schema": "core", "alias": "intermediate_encounter_id", "tags": "claims_preprocessing", "enabled": true}, "created_at": 1673363035.2143486, "compiled_code": "\n\n\n\n\nselect\n  patient_id,\n  claim_id,\n  encounter_id,\n  encounter_type,\n  encounter_type_detail,\n  0 as orphan_claim_flag\nfrom tuva.core.intermediate_generate_institutional_encounter_id\n\nunion distinct\n\nselect\n  patient_id,\n  claim_id,\n  encounter_id,\n  encounter_type,\n  encounter_type_detail,\n  orphan_claim_flag\nfrom tuva.core.intermediate_professional_claims_in_institutional_encounters\n\nunion distinct\n\nselect\n  patient_id,\n  claim_id,\n  encounter_id,\n  encounter_type,\n  encounter_type_detail,\n  0 as orphan_claim_flag\nfrom tuva.core.intermediate_professional_encounters", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.intermediate_encounter_id"}, "model.claims_preprocessing.claims_preprocessing__encounter_type": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "seed.terminology.terminology__ms_drg", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim"]}, "config": {"enabled": true, "alias": "intermediate_encounter_type", "schema": "core", "database": "tuva", "tags": ["claims_preprocessing"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["claims_preprocessing", "intermediate", "claims_preprocessing__encounter_type"], "unique_id": "model.claims_preprocessing.claims_preprocessing__encounter_type", "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))\r\n   )\r\n}}\r\n\r\n\r\n\r\n\r\n-- *************************************************\r\n-- This dbt model assigns an encounter type to every\r\n-- unique claim_id in the medical_claim table.\r\n-- *************************************************\r\n\r\n\r\n\r\n\r\n-- Lists unique claim_ids with 'Room & Board'\r\n-- revenue_center_codes:\r\nwith room_and_board as (\r\nselect distinct claim_id\r\nfrom {{ ref('claims_preprocessing__medical_claim') }}\r\nwhere revenue_center_code in\r\n  ('0100','0101',\r\n   '0110','0111','0112','0113','0114','0116','0117','0118','0119',\r\n   '0120','0121','0122','0123','0124','0126','0127','0128','0129',\r\n   '0130','0131','0132','0133','0134','0136','0137','0138','0139',\r\n   '0140','0141','0142','0143','0144','0146','0147','0148','0149',\r\n   '0150','0151','0152','0153','0154','0156','0157','0158','0159',\r\n   '0160','0164','0167','0169',\r\n   '0170','0171','0172','0173','0174','0179',\r\n   '0190','0191','0192','0193','0194','0199',\r\n   '0200','0201','0202','0203','0204','0206','0207','0208','0209',\r\n   '0210','0211','0212','0213','0214','0219',\r\n   '1000','1001','1002')\r\n),\r\n\r\n\r\n-- Lists unique claim_ds with valid ms_drg:\r\nvalid_ms_drg as (\r\nselect distinct mc.claim_id\r\nfrom {{ ref('claims_preprocessing__medical_claim') }} mc\r\ninner join  {{ ref('terminology__ms_drg')}} as msdrg\r\n    on mc.ms_drg_code = msdrg.ms_drg_code\r\n),\r\n\r\n\r\n\r\n\r\n\r\n\r\n-- **************************************************\r\n-- Here we define all encounter types:\r\n-- **************************************************\r\n\r\n\r\n\r\n-- ****  'acute inpatient - institutional'  ****\r\n-- Lists unique claim_ids that meet the logic\r\n-- criteria for the\r\n-- 'acute inpatient - institutional' encounter type:\r\nacute_inpatient_institutional as (\r\nselect distinct\r\n  mc.claim_id,\r\n  'acute inpatient' as encounter_type,\r\n  'acute inpatient - institutional' as encounter_type_detail\r\nfrom {{ ref('claims_preprocessing__medical_claim') }} mc\r\ninner join room_and_board rb\r\n    on mc.claim_id = rb.claim_id\r\ninner join valid_ms_drg vms\r\n    on mc.claim_id = vms.claim_id\r\nwhere left(mc.bill_type_code,1) in ('1','4','8')\r\n),\r\n\r\n\r\n-- ****  'acute inpatient - professional'  ****\r\n-- Lists unique claim_ids that meet the logic\r\n-- criteria for the\r\n-- 'acute inpatient - professional' encounter type:\r\nacute_inpatient_professional as (\r\nselect distinct\r\n    claim_id,\r\n    'acute inpatient' as encounter_type,\r\n    'acute inpatient - professional' as encounter_type_detail\r\nfrom {{ ref('claims_preprocessing__medical_claim') }}\r\nwhere place_of_service_code = '21'\r\n),\r\n\r\n\r\n-- ****  'inpatient rehabilitation - institutional'  ****\r\n-- Lists unique claim_ids that meet the logic\r\n-- criteria for the\r\n-- 'inpatient rehabilitation - institutional' encounter type:\r\ninpatient_rehabilitation_institutional as (\r\nselect distinct\r\n    claim_id,\r\n    'inpatient rehabilitation' as encounter_type,\r\n    'inpatient rehabilitation - institutional' as encounter_type_detail\r\nfrom {{ ref('claims_preprocessing__medical_claim') }}\r\nwhere revenue_center_code in ('0024','0118','0128','0138','0148','0158')\r\n),\r\n\r\n\r\n-- ****  'inpatient rehabilitation - professional'  ****\r\n-- Lists unique claim_ids that meet the logic\r\n-- criteria for the\r\n-- 'inpatient rehabilitation - professional' encounter type:\r\ninpatient_rehabilitation_professional as (\r\nselect distinct\r\n    claim_id,\r\n    'inpatient rehabilitation' as encounter_type,\r\n    'inpatient rehabilitation - professional' as encounter_type_detail\r\nfrom {{ ref('claims_preprocessing__medical_claim') }}\r\nwhere place_of_service_code = '61'\r\n),\r\n\r\n\r\ninpatient_psychiatric_institutional as (\r\nselect distinct\r\n    claim_id,\r\n    'inpatient psychiatric' as encounter_type,\r\n    'inpatient psychiatric - institutional' as encounter_type_detail\r\nfrom {{ ref('claims_preprocessing__medical_claim') }}\r\nwhere revenue_center_code in\r\n  ('0114','0124','0134','0144',\r\n   '0154','0204','0513','1001')\r\n),\r\n\r\n\r\ninpatient_psychiatric_professional as (\r\nselect distinct\r\n    claim_id,\r\n    'inpatient psychiatric' as encounter_type,\r\n    'inpatient psychiatric - professional' as encounter_type_detail\r\nfrom {{ ref('claims_preprocessing__medical_claim') }}\r\nwhere place_of_service_code in ('51','52','56')\r\n),\r\n\r\n\r\ninpatient_substance_abuse_institutional as (\r\nselect distinct\r\n    claim_id,\r\n    'inpatient substance abuse' as encounter_type,\r\n    'inpatient substance abuse - institutional' as encounter_type_detail\r\nfrom {{ ref('claims_preprocessing__medical_claim') }}\r\nwhere revenue_center_code = '1002'\r\n),\r\n\r\n\r\ninpatient_substance_abuse_professional as (\r\nselect distinct\r\n    claim_id,\r\n    'inpatient substance abuse' as encounter_type,\r\n    'inpatient substance abuse - professional' as encounter_type_detail\r\nfrom {{ ref('claims_preprocessing__medical_claim') }}\r\nwhere place_of_service_code in ('55','57','58')\r\n),\r\n\r\n\r\nskilled_nursing_institutional as (\r\nselect distinct\r\n    claim_id,\r\n    'skilled nursing' as encounter_type,\r\n    'skilled nursing - institutional' as encounter_type_detail\r\nfrom {{ ref('claims_preprocessing__medical_claim') }}\r\nwhere left(bill_type_code,1) = '2'\r\n),\r\n\r\n\r\nskilled_nursing_professional as (\r\nselect distinct\r\n    claim_id,\r\n    'skilled nursing' as encounter_type,\r\n    'skilled nursing - professional' as encounter_type_detail\r\nfrom {{ ref('claims_preprocessing__medical_claim') }}\r\nwhere place_of_service_code in ('31','32')\r\n),\r\n\r\n\r\nambulatory_surgery_institutional as (\r\nselect distinct claim_id,\r\n  'ambulatory surgery' as encounter_type,\r\n  'ambulatory surgery - institutional' as encounter_type_detail\r\nfrom {{ ref('claims_preprocessing__medical_claim') }}\r\nwhere substring(bill_type_code, 1, 2) = '83'\r\n),\r\n\r\n\r\nambulatory_surgery_professional as (\r\nselect distinct\r\n    claim_id,\r\n    'ambulatory surgery' as encounter_type,\r\n    'ambulatory surgery - professional' as encounter_type_detail\r\nfrom {{ ref('claims_preprocessing__medical_claim') }}\r\nwhere place_of_service_code = '24'\r\n),\r\n\r\n\r\ndialysis_institutional as (\r\nselect distinct\r\n    claim_id,\r\n    'dialysis' as encounter_type,\r\n    'dialysis - institutional' as encounter_type_detail\r\nfrom {{ ref('claims_preprocessing__medical_claim') }}\r\nwhere substring(bill_type_code, 1, 2) = '72'\r\n),\r\n\r\n\r\ndialysis_professional as (\r\nselect distinct\r\n    claim_id,\r\n    'dialysis' as encounter_type,\r\n    'dialysis - professional' as encounter_type_detail\r\nfrom {{ ref('claims_preprocessing__medical_claim') }}\r\nwhere place_of_service_code = '65'\r\n),\r\n\r\n\r\nemergency_department_institutional as (\r\nselect distinct\r\n    claim_id,\r\n    'emergency department' as encounter_type,\r\n    'emergency department - institutional' as encounter_type_detail\r\nfrom {{ ref('claims_preprocessing__medical_claim') }}\r\nwhere revenue_center_code in ('0450','0451','0452','0459','0981')\r\n),\r\n\r\n\r\nemergency_department_professional as (\r\nselect distinct\r\n    claim_id,\r\n    'emergency department' as encounter_type,\r\n    'emergency department - professional' as encounter_type_detail\r\nfrom {{ ref('claims_preprocessing__medical_claim') }}\r\nwhere place_of_service_code = '23'\r\n),\r\n\r\n\r\nurgent_care_institutional as (\r\nselect distinct\r\n    claim_id,\r\n    'urgent care' as encounter_type,\r\n    'urgent care - institutional' as encounter_type_detail\r\nfrom {{ ref('claims_preprocessing__medical_claim') }}\r\nwhere revenue_center_code in ('0456','0516','0526')\r\n),\r\n\r\n\r\nurgent_care_professional as (\r\nselect distinct\r\n    claim_id,\r\n    'urgent care' as encounter_type,\r\n    'urgent care - professional' as encounter_type_detail\r\nfrom {{ ref('claims_preprocessing__medical_claim') }}\r\nwhere place_of_service_code = '20'\r\n),\r\n\r\nhome_health_institutional as (\r\nselect distinct\r\n    claim_id,\r\n    'home health' as encounter_type,\r\n    'home health - institutional' as encounter_type_detail\r\nfrom {{ ref('claims_preprocessing__medical_claim') }}\r\nwhere left(bill_type_code,1) = '3'\r\n),\r\n\r\n\r\nhome_health_professional as (\r\nselect distinct\r\n    claim_id,\r\n    'home health' as encounter_type,\r\n    'home health - professional' as encounter_type_detail\r\nfrom {{ ref('claims_preprocessing__medical_claim') }}\r\nwhere place_of_service_code = '12'\r\n),\r\n\r\n\r\nhospice_institutional as (\r\nselect distinct\r\n    claim_id,\r\n    'hospice' as encounter_type,\r\n    'hospice - institutional' as encounter_type_detail\r\nfrom {{ ref('claims_preprocessing__medical_claim') }}\r\nwhere substring(bill_type_code, 1, 2) in ('81','82')\r\n),\r\n\r\n\r\nhospice_professional as (\r\nselect distinct\r\n    claim_id,\r\n    'hospice' as encounter_type,\r\n    'hospice - professional' as encounter_type_detail\r\nfrom {{ ref('claims_preprocessing__medical_claim') }}\r\nwhere place_of_service_code = '34'\r\n),\r\n\r\n\r\noutpatient_rehabilitation_institutional as (\r\nselect distinct\r\n    claim_id,\r\n    'outpatient rehabilitation' as encounter_type,\r\n    'outpatient rehabilitation - institutional' as encounter_type_detail\r\nfrom {{ ref('claims_preprocessing__medical_claim') }}\r\nwhere substring(bill_type_code, 1, 2) in ('74','75')\r\n),\r\n\r\n\r\noutpatient_rehabilitation_professional as (\r\nselect distinct\r\n    claim_id,\r\n    'outpatient rehabilitation' as encounter_type,\r\n    'outpatient rehabilitation - professional' as encounter_type_detail\r\nfrom {{ ref('claims_preprocessing__medical_claim') }}\r\nwhere place_of_service_code = '62'\r\n),\r\n\r\n\r\noutpatient_mental_health_institutional as (\r\nselect distinct\r\n    claim_id,\r\n    'outpatient mental health' as encounter_type,\r\n    'outpatient mental health - institutional' as encounter_type_detail\r\nfrom {{ ref('claims_preprocessing__medical_claim') }}\r\nwhere substring(bill_type_code, 1, 2) = '76'\r\n),\r\n\r\n\r\noutpatient_mental_health_professional as (\r\nselect distinct\r\n    claim_id,\r\n    'outpatient mental health' as encounter_type,\r\n    'outpatient mental health - professional' as encounter_type_detail\r\nfrom {{ ref('claims_preprocessing__medical_claim') }}\r\nwhere place_of_service_code = '53'\r\n),\r\n\r\n\r\noffice_visit as (\r\nselect distinct\r\n    claim_id,\r\n    'office visit' as encounter_type,\r\n    'office visit' as encounter_type_detail\r\nfrom {{ ref('claims_preprocessing__medical_claim') }}\r\nwhere place_of_service_code in ('11','17','49','50','71','72')\r\n),\r\n\r\n\r\ntelehealth as (\r\nselect distinct\r\n    claim_id,\r\n    'telehealth' as encounter_type,\r\n    'telehealth' as encounter_type_detail\r\nfrom {{ ref('claims_preprocessing__medical_claim') }}\r\nwhere place_of_service_code in ('02','10')\r\n),\r\n\r\n\r\nmapped_unioned as (\r\n    select * from acute_inpatient_institutional\r\n    union all\r\n    select * from acute_inpatient_professional\r\n    union all\r\n    select * from inpatient_rehabilitation_institutional\r\n    union all\r\n    select * from inpatient_rehabilitation_professional\r\n    union all\r\n    select * from inpatient_psychiatric_institutional\r\n    union all\r\n    select * from inpatient_psychiatric_professional\r\n    union all\r\n    select * from inpatient_substance_abuse_institutional\r\n    union all\r\n    select * from inpatient_substance_abuse_professional\r\n    union all\r\n    select * from skilled_nursing_institutional\r\n    union all\r\n    select * from skilled_nursing_professional\r\n    union all\r\n    select * from ambulatory_surgery_institutional\r\n    union all\r\n    select * from ambulatory_surgery_professional\r\n    union all\r\n    select * from dialysis_institutional\r\n    union all\r\n    select * from dialysis_professional\r\n    union all\r\n    select * from emergency_department_institutional\r\n    union all\r\n    select * from emergency_department_professional\r\n    union all\r\n    select * from urgent_care_institutional\r\n    union all\r\n    select * from urgent_care_professional\r\n    union all\r\n    select * from home_health_institutional\r\n    union all\r\n    select * from home_health_professional\r\n    union all\r\n    select * from hospice_institutional\r\n    union all\r\n    select * from hospice_professional\r\n    union all\r\n    select * from outpatient_rehabilitation_institutional\r\n    union all\r\n    select * from outpatient_rehabilitation_professional\r\n    union all\r\n    select * from outpatient_mental_health_institutional\r\n    union all\r\n    select * from outpatient_mental_health_professional\r\n    union all\r\n    select * from office_visit\r\n    union all\r\n    select * from telehealth\r\n)\r\n\r\n\r\nselect distinct\r\n    mc.claim_id,\r\n    coalesce(mu.encounter_type, 'unmapped') as encounter_type,\r\n    coalesce(mu.encounter_type_detail, 'unmapped') as encounter_type_detail\r\nfrom {{ ref('claims_preprocessing__medical_claim') }} mc\r\nleft join mapped_unioned mu\r\n    on mc.claim_id = mu.claim_id", "language": "sql", "package_name": "claims_preprocessing", "root_path": "C:\\Users\\forre\\PycharmProjects\\claims_preprocessing\\docs\\docs_generate\\dbt_packages\\claims_preprocessing", "path": "intermediate\\claims_preprocessing__encounter_type.sql", "original_file_path": "models\\intermediate\\claims_preprocessing__encounter_type.sql", "name": "claims_preprocessing__encounter_type", "alias": "intermediate_encounter_type", "checksum": {"name": "sha256", "checksum": "6c039fcbf2686d474bf1456039ea44227df4a1b956aee8b9f6a189ded5beaa26"}, "tags": ["claims_preprocessing"], "refs": [["claims_preprocessing__medical_claim"], ["claims_preprocessing__medical_claim"], ["terminology__ms_drg"], ["claims_preprocessing__medical_claim"], ["claims_preprocessing__medical_claim"], ["claims_preprocessing__medical_claim"], ["claims_preprocessing__medical_claim"], ["claims_preprocessing__medical_claim"], ["claims_preprocessing__medical_claim"], ["claims_preprocessing__medical_claim"], ["claims_preprocessing__medical_claim"], ["claims_preprocessing__medical_claim"], ["claims_preprocessing__medical_claim"], ["claims_preprocessing__medical_claim"], ["claims_preprocessing__medical_claim"], ["claims_preprocessing__medical_claim"], ["claims_preprocessing__medical_claim"], ["claims_preprocessing__medical_claim"], ["claims_preprocessing__medical_claim"], ["claims_preprocessing__medical_claim"], ["claims_preprocessing__medical_claim"], ["claims_preprocessing__medical_claim"], ["claims_preprocessing__medical_claim"], ["claims_preprocessing__medical_claim"], ["claims_preprocessing__medical_claim"], ["claims_preprocessing__medical_claim"], ["claims_preprocessing__medical_claim"], ["claims_preprocessing__medical_claim"], ["claims_preprocessing__medical_claim"], ["claims_preprocessing__medical_claim"], ["claims_preprocessing__medical_claim"], ["claims_preprocessing__medical_claim"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "claims_preprocessing://models\\_models.yml", "compiled_path": "target\\compiled\\claims_preprocessing\\models\\intermediate\\claims_preprocessing__encounter_type.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "tuva", "schema": "core", "alias": "intermediate_encounter_type", "tags": "claims_preprocessing", "enabled": true}, "created_at": 1673363035.2143486, "compiled_code": "\n\n\n\n\n-- *************************************************\n-- This dbt model assigns an encounter type to every\n-- unique claim_id in the medical_claim table.\n-- *************************************************\n\n\n\n\n-- Lists unique claim_ids with 'Room & Board'\n-- revenue_center_codes:\nwith room_and_board as (\nselect distinct claim_id\nfrom tuva.core.staging_medical_claim\nwhere revenue_center_code in\n  ('0100','0101',\n   '0110','0111','0112','0113','0114','0116','0117','0118','0119',\n   '0120','0121','0122','0123','0124','0126','0127','0128','0129',\n   '0130','0131','0132','0133','0134','0136','0137','0138','0139',\n   '0140','0141','0142','0143','0144','0146','0147','0148','0149',\n   '0150','0151','0152','0153','0154','0156','0157','0158','0159',\n   '0160','0164','0167','0169',\n   '0170','0171','0172','0173','0174','0179',\n   '0190','0191','0192','0193','0194','0199',\n   '0200','0201','0202','0203','0204','0206','0207','0208','0209',\n   '0210','0211','0212','0213','0214','0219',\n   '1000','1001','1002')\n),\n\n\n-- Lists unique claim_ds with valid ms_drg:\nvalid_ms_drg as (\nselect distinct mc.claim_id\nfrom tuva.core.staging_medical_claim mc\ninner join  tuva.terminology.ms_drg as msdrg\n    on mc.ms_drg_code = msdrg.ms_drg_code\n),\n\n\n\n\n\n\n-- **************************************************\n-- Here we define all encounter types:\n-- **************************************************\n\n\n\n-- ****  'acute inpatient - institutional'  ****\n-- Lists unique claim_ids that meet the logic\n-- criteria for the\n-- 'acute inpatient - institutional' encounter type:\nacute_inpatient_institutional as (\nselect distinct\n  mc.claim_id,\n  'acute inpatient' as encounter_type,\n  'acute inpatient - institutional' as encounter_type_detail\nfrom tuva.core.staging_medical_claim mc\ninner join room_and_board rb\n    on mc.claim_id = rb.claim_id\ninner join valid_ms_drg vms\n    on mc.claim_id = vms.claim_id\nwhere left(mc.bill_type_code,1) in ('1','4','8')\n),\n\n\n-- ****  'acute inpatient - professional'  ****\n-- Lists unique claim_ids that meet the logic\n-- criteria for the\n-- 'acute inpatient - professional' encounter type:\nacute_inpatient_professional as (\nselect distinct\n    claim_id,\n    'acute inpatient' as encounter_type,\n    'acute inpatient - professional' as encounter_type_detail\nfrom tuva.core.staging_medical_claim\nwhere place_of_service_code = '21'\n),\n\n\n-- ****  'inpatient rehabilitation - institutional'  ****\n-- Lists unique claim_ids that meet the logic\n-- criteria for the\n-- 'inpatient rehabilitation - institutional' encounter type:\ninpatient_rehabilitation_institutional as (\nselect distinct\n    claim_id,\n    'inpatient rehabilitation' as encounter_type,\n    'inpatient rehabilitation - institutional' as encounter_type_detail\nfrom tuva.core.staging_medical_claim\nwhere revenue_center_code in ('0024','0118','0128','0138','0148','0158')\n),\n\n\n-- ****  'inpatient rehabilitation - professional'  ****\n-- Lists unique claim_ids that meet the logic\n-- criteria for the\n-- 'inpatient rehabilitation - professional' encounter type:\ninpatient_rehabilitation_professional as (\nselect distinct\n    claim_id,\n    'inpatient rehabilitation' as encounter_type,\n    'inpatient rehabilitation - professional' as encounter_type_detail\nfrom tuva.core.staging_medical_claim\nwhere place_of_service_code = '61'\n),\n\n\ninpatient_psychiatric_institutional as (\nselect distinct\n    claim_id,\n    'inpatient psychiatric' as encounter_type,\n    'inpatient psychiatric - institutional' as encounter_type_detail\nfrom tuva.core.staging_medical_claim\nwhere revenue_center_code in\n  ('0114','0124','0134','0144',\n   '0154','0204','0513','1001')\n),\n\n\ninpatient_psychiatric_professional as (\nselect distinct\n    claim_id,\n    'inpatient psychiatric' as encounter_type,\n    'inpatient psychiatric - professional' as encounter_type_detail\nfrom tuva.core.staging_medical_claim\nwhere place_of_service_code in ('51','52','56')\n),\n\n\ninpatient_substance_abuse_institutional as (\nselect distinct\n    claim_id,\n    'inpatient substance abuse' as encounter_type,\n    'inpatient substance abuse - institutional' as encounter_type_detail\nfrom tuva.core.staging_medical_claim\nwhere revenue_center_code = '1002'\n),\n\n\ninpatient_substance_abuse_professional as (\nselect distinct\n    claim_id,\n    'inpatient substance abuse' as encounter_type,\n    'inpatient substance abuse - professional' as encounter_type_detail\nfrom tuva.core.staging_medical_claim\nwhere place_of_service_code in ('55','57','58')\n),\n\n\nskilled_nursing_institutional as (\nselect distinct\n    claim_id,\n    'skilled nursing' as encounter_type,\n    'skilled nursing - institutional' as encounter_type_detail\nfrom tuva.core.staging_medical_claim\nwhere left(bill_type_code,1) = '2'\n),\n\n\nskilled_nursing_professional as (\nselect distinct\n    claim_id,\n    'skilled nursing' as encounter_type,\n    'skilled nursing - professional' as encounter_type_detail\nfrom tuva.core.staging_medical_claim\nwhere place_of_service_code in ('31','32')\n),\n\n\nambulatory_surgery_institutional as (\nselect distinct claim_id,\n  'ambulatory surgery' as encounter_type,\n  'ambulatory surgery - institutional' as encounter_type_detail\nfrom tuva.core.staging_medical_claim\nwhere substring(bill_type_code, 1, 2) = '83'\n),\n\n\nambulatory_surgery_professional as (\nselect distinct\n    claim_id,\n    'ambulatory surgery' as encounter_type,\n    'ambulatory surgery - professional' as encounter_type_detail\nfrom tuva.core.staging_medical_claim\nwhere place_of_service_code = '24'\n),\n\n\ndialysis_institutional as (\nselect distinct\n    claim_id,\n    'dialysis' as encounter_type,\n    'dialysis - institutional' as encounter_type_detail\nfrom tuva.core.staging_medical_claim\nwhere substring(bill_type_code, 1, 2) = '72'\n),\n\n\ndialysis_professional as (\nselect distinct\n    claim_id,\n    'dialysis' as encounter_type,\n    'dialysis - professional' as encounter_type_detail\nfrom tuva.core.staging_medical_claim\nwhere place_of_service_code = '65'\n),\n\n\nemergency_department_institutional as (\nselect distinct\n    claim_id,\n    'emergency department' as encounter_type,\n    'emergency department - institutional' as encounter_type_detail\nfrom tuva.core.staging_medical_claim\nwhere revenue_center_code in ('0450','0451','0452','0459','0981')\n),\n\n\nemergency_department_professional as (\nselect distinct\n    claim_id,\n    'emergency department' as encounter_type,\n    'emergency department - professional' as encounter_type_detail\nfrom tuva.core.staging_medical_claim\nwhere place_of_service_code = '23'\n),\n\n\nurgent_care_institutional as (\nselect distinct\n    claim_id,\n    'urgent care' as encounter_type,\n    'urgent care - institutional' as encounter_type_detail\nfrom tuva.core.staging_medical_claim\nwhere revenue_center_code in ('0456','0516','0526')\n),\n\n\nurgent_care_professional as (\nselect distinct\n    claim_id,\n    'urgent care' as encounter_type,\n    'urgent care - professional' as encounter_type_detail\nfrom tuva.core.staging_medical_claim\nwhere place_of_service_code = '20'\n),\n\nhome_health_institutional as (\nselect distinct\n    claim_id,\n    'home health' as encounter_type,\n    'home health - institutional' as encounter_type_detail\nfrom tuva.core.staging_medical_claim\nwhere left(bill_type_code,1) = '3'\n),\n\n\nhome_health_professional as (\nselect distinct\n    claim_id,\n    'home health' as encounter_type,\n    'home health - professional' as encounter_type_detail\nfrom tuva.core.staging_medical_claim\nwhere place_of_service_code = '12'\n),\n\n\nhospice_institutional as (\nselect distinct\n    claim_id,\n    'hospice' as encounter_type,\n    'hospice - institutional' as encounter_type_detail\nfrom tuva.core.staging_medical_claim\nwhere substring(bill_type_code, 1, 2) in ('81','82')\n),\n\n\nhospice_professional as (\nselect distinct\n    claim_id,\n    'hospice' as encounter_type,\n    'hospice - professional' as encounter_type_detail\nfrom tuva.core.staging_medical_claim\nwhere place_of_service_code = '34'\n),\n\n\noutpatient_rehabilitation_institutional as (\nselect distinct\n    claim_id,\n    'outpatient rehabilitation' as encounter_type,\n    'outpatient rehabilitation - institutional' as encounter_type_detail\nfrom tuva.core.staging_medical_claim\nwhere substring(bill_type_code, 1, 2) in ('74','75')\n),\n\n\noutpatient_rehabilitation_professional as (\nselect distinct\n    claim_id,\n    'outpatient rehabilitation' as encounter_type,\n    'outpatient rehabilitation - professional' as encounter_type_detail\nfrom tuva.core.staging_medical_claim\nwhere place_of_service_code = '62'\n),\n\n\noutpatient_mental_health_institutional as (\nselect distinct\n    claim_id,\n    'outpatient mental health' as encounter_type,\n    'outpatient mental health - institutional' as encounter_type_detail\nfrom tuva.core.staging_medical_claim\nwhere substring(bill_type_code, 1, 2) = '76'\n),\n\n\noutpatient_mental_health_professional as (\nselect distinct\n    claim_id,\n    'outpatient mental health' as encounter_type,\n    'outpatient mental health - professional' as encounter_type_detail\nfrom tuva.core.staging_medical_claim\nwhere place_of_service_code = '53'\n),\n\n\noffice_visit as (\nselect distinct\n    claim_id,\n    'office visit' as encounter_type,\n    'office visit' as encounter_type_detail\nfrom tuva.core.staging_medical_claim\nwhere place_of_service_code in ('11','17','49','50','71','72')\n),\n\n\ntelehealth as (\nselect distinct\n    claim_id,\n    'telehealth' as encounter_type,\n    'telehealth' as encounter_type_detail\nfrom tuva.core.staging_medical_claim\nwhere place_of_service_code in ('02','10')\n),\n\n\nmapped_unioned as (\n    select * from acute_inpatient_institutional\n    union all\n    select * from acute_inpatient_professional\n    union all\n    select * from inpatient_rehabilitation_institutional\n    union all\n    select * from inpatient_rehabilitation_professional\n    union all\n    select * from inpatient_psychiatric_institutional\n    union all\n    select * from inpatient_psychiatric_professional\n    union all\n    select * from inpatient_substance_abuse_institutional\n    union all\n    select * from inpatient_substance_abuse_professional\n    union all\n    select * from skilled_nursing_institutional\n    union all\n    select * from skilled_nursing_professional\n    union all\n    select * from ambulatory_surgery_institutional\n    union all\n    select * from ambulatory_surgery_professional\n    union all\n    select * from dialysis_institutional\n    union all\n    select * from dialysis_professional\n    union all\n    select * from emergency_department_institutional\n    union all\n    select * from emergency_department_professional\n    union all\n    select * from urgent_care_institutional\n    union all\n    select * from urgent_care_professional\n    union all\n    select * from home_health_institutional\n    union all\n    select * from home_health_professional\n    union all\n    select * from hospice_institutional\n    union all\n    select * from hospice_professional\n    union all\n    select * from outpatient_rehabilitation_institutional\n    union all\n    select * from outpatient_rehabilitation_professional\n    union all\n    select * from outpatient_mental_health_institutional\n    union all\n    select * from outpatient_mental_health_professional\n    union all\n    select * from office_visit\n    union all\n    select * from telehealth\n)\n\n\nselect distinct\n    mc.claim_id,\n    coalesce(mu.encounter_type, 'unmapped') as encounter_type,\n    coalesce(mu.encounter_type_detail, 'unmapped') as encounter_type_detail\nfrom tuva.core.staging_medical_claim mc\nleft join mapped_unioned mu\n    on mc.claim_id = mu.claim_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.intermediate_encounter_type"}, "model.claims_preprocessing.claims_preprocessing__generate_institutional_encounter_id": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.claims_preprocessing.claims_preprocessing__relevant_encounter_type_claims", "model.claims_preprocessing.claims_preprocessing__relevant_encounter_type_claims", "model.claims_preprocessing.claims_preprocessing__relevant_encounter_type_claims"]}, "config": {"enabled": true, "alias": "intermediate_generate_institutional_encounter_id", "schema": "core", "database": "tuva", "tags": ["claims_preprocessing"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["claims_preprocessing", "intermediate", "claims_preprocessing__generate_institutional_encounter_id"], "unique_id": "model.claims_preprocessing.claims_preprocessing__generate_institutional_encounter_id", "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))\r\n   )\r\n}}\r\n\r\n\r\n\r\n\r\n-- Here we select all rows from the medical_claim table\r\n-- that correspond to encounter types where the encounter\r\n-- may be composed of more than one claim_id.\r\n-- These encounter types are the ones that may have\r\n-- institutional claims.\r\n--\r\n-- Continuation of the logic started in claims_preprocessing__relevant_encounter_type_claims\r\n\r\nwith\r\njoin_every_row_to_all_later_closes as (\r\nselect\r\n  aa.patient_id as patient_id,\r\n  aa.claim_id as claim_id,\r\n  aa.encounter_type,\r\n  aa.encounter_type_detail,\r\n  aa.row_num as row_num,\r\n  bb.row_num as row_num_b\r\nfrom {{ ref('claims_preprocessing__relevant_encounter_type_claims') }}  aa\r\n     inner join\r\n     {{ ref('claims_preprocessing__relevant_encounter_type_claims') }}  bb\r\n     on aa.patient_id = bb.patient_id\r\n     and aa.encounter_type_detail = bb.encounter_type_detail\r\n     and aa.row_num <= bb.row_num\r\nwhere bb.close_flag = 1\r\n),\r\n\r\n\r\nfind_min_closing_line_for_every_claim_id as (\r\nselect\r\n  patient_id,\r\n  claim_id,\r\n  min(row_num_b) as min_closing_row\r\nfrom join_every_row_to_all_later_closes\r\ngroup by patient_id, claim_id\r\n),\r\n\r\n\r\nadd_min_closing_row_to_each_claim_id as (\r\nselect\r\n  aa.patient_id as patient_id,\r\n  aa.claim_id as claim_id,\r\n  aa.encounter_type as encounter_type,\r\n  aa.encounter_type_detail as encounter_type_detail,\r\n  aa.claim_start_date as claim_start_date,\r\n  aa.claim_end_date as claim_end_date,\r\n  aa.discharge_disposition_code as discharge_disposition_code,\r\n  aa.facility_npi as facility_npi,\r\n  aa.row_num as row_num,\r\n  aa.close_flag as close_flag,\r\n  bb.min_closing_row as min_closing_row\r\nfrom {{ ref('claims_preprocessing__relevant_encounter_type_claims') }}  aa\r\n     left join find_min_closing_line_for_every_claim_id bb\r\n     on aa.patient_id = bb.patient_id\r\n     and aa.claim_id = bb.claim_id\r\n),\r\n\r\n\r\nadd_encounter_id as (\r\nselect\r\n  aa.patient_id as patient_id,\r\n  aa.claim_id as claim_id,\r\n  aa.encounter_type as encounter_type,\r\n  aa.encounter_type_detail as encounter_type_detail,\r\n  aa.claim_start_date as claim_start_date,\r\n  aa.claim_end_date as claim_end_date,\r\n  aa.discharge_disposition_code as discharge_disposition_code,\r\n  aa.facility_npi as facility_npi,\r\n  aa.row_num as row_num,\r\n  aa.close_flag as close_flag,\r\n  aa.min_closing_row as min_closing_row,\r\n  bb.claim_id as encounter_id\r\nfrom add_min_closing_row_to_each_claim_id aa\r\n     left join add_min_closing_row_to_each_claim_id bb\r\n     on aa.patient_id = bb.patient_id\r\n     and aa.encounter_type_detail = bb.encounter_type_detail\r\n     and aa.min_closing_row = bb.row_num\r\n)\r\n\r\n\r\n\r\n\r\n\r\nselect\r\n  patient_id,\r\n  claim_id,\r\n  encounter_id,\r\n  encounter_type,\r\n  encounter_type_detail\r\nfrom add_encounter_id", "language": "sql", "package_name": "claims_preprocessing", "root_path": "C:\\Users\\forre\\PycharmProjects\\claims_preprocessing\\docs\\docs_generate\\dbt_packages\\claims_preprocessing", "path": "intermediate\\claims_preprocessing__generate_institutional_encounter_id.sql", "original_file_path": "models\\intermediate\\claims_preprocessing__generate_institutional_encounter_id.sql", "name": "claims_preprocessing__generate_institutional_encounter_id", "alias": "intermediate_generate_institutional_encounter_id", "checksum": {"name": "sha256", "checksum": "ca41a6d343d71cc5bdbae1a7c33e92b1eec46e3bafbdf5fdc690faf466fac6fd"}, "tags": ["claims_preprocessing"], "refs": [["claims_preprocessing__relevant_encounter_type_claims"], ["claims_preprocessing__relevant_encounter_type_claims"], ["claims_preprocessing__relevant_encounter_type_claims"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "claims_preprocessing://models\\_models.yml", "compiled_path": "target\\compiled\\claims_preprocessing\\models\\intermediate\\claims_preprocessing__generate_institutional_encounter_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "tuva", "schema": "core", "alias": "intermediate_generate_institutional_encounter_id", "tags": "claims_preprocessing", "enabled": true}, "created_at": 1673363035.2208538, "compiled_code": "\n\n\n\n\n-- Here we select all rows from the medical_claim table\n-- that correspond to encounter types where the encounter\n-- may be composed of more than one claim_id.\n-- These encounter types are the ones that may have\n-- institutional claims.\n--\n-- Continuation of the logic started in claims_preprocessing__relevant_encounter_type_claims\n\nwith\njoin_every_row_to_all_later_closes as (\nselect\n  aa.patient_id as patient_id,\n  aa.claim_id as claim_id,\n  aa.encounter_type,\n  aa.encounter_type_detail,\n  aa.row_num as row_num,\n  bb.row_num as row_num_b\nfrom tuva.core.intermediate_relevant_encounter_type_claims  aa\n     inner join\n     tuva.core.intermediate_relevant_encounter_type_claims  bb\n     on aa.patient_id = bb.patient_id\n     and aa.encounter_type_detail = bb.encounter_type_detail\n     and aa.row_num <= bb.row_num\nwhere bb.close_flag = 1\n),\n\n\nfind_min_closing_line_for_every_claim_id as (\nselect\n  patient_id,\n  claim_id,\n  min(row_num_b) as min_closing_row\nfrom join_every_row_to_all_later_closes\ngroup by patient_id, claim_id\n),\n\n\nadd_min_closing_row_to_each_claim_id as (\nselect\n  aa.patient_id as patient_id,\n  aa.claim_id as claim_id,\n  aa.encounter_type as encounter_type,\n  aa.encounter_type_detail as encounter_type_detail,\n  aa.claim_start_date as claim_start_date,\n  aa.claim_end_date as claim_end_date,\n  aa.discharge_disposition_code as discharge_disposition_code,\n  aa.facility_npi as facility_npi,\n  aa.row_num as row_num,\n  aa.close_flag as close_flag,\n  bb.min_closing_row as min_closing_row\nfrom tuva.core.intermediate_relevant_encounter_type_claims  aa\n     left join find_min_closing_line_for_every_claim_id bb\n     on aa.patient_id = bb.patient_id\n     and aa.claim_id = bb.claim_id\n),\n\n\nadd_encounter_id as (\nselect\n  aa.patient_id as patient_id,\n  aa.claim_id as claim_id,\n  aa.encounter_type as encounter_type,\n  aa.encounter_type_detail as encounter_type_detail,\n  aa.claim_start_date as claim_start_date,\n  aa.claim_end_date as claim_end_date,\n  aa.discharge_disposition_code as discharge_disposition_code,\n  aa.facility_npi as facility_npi,\n  aa.row_num as row_num,\n  aa.close_flag as close_flag,\n  aa.min_closing_row as min_closing_row,\n  bb.claim_id as encounter_id\nfrom add_min_closing_row_to_each_claim_id aa\n     left join add_min_closing_row_to_each_claim_id bb\n     on aa.patient_id = bb.patient_id\n     and aa.encounter_type_detail = bb.encounter_type_detail\n     and aa.min_closing_row = bb.row_num\n)\n\n\n\n\n\nselect\n  patient_id,\n  claim_id,\n  encounter_id,\n  encounter_type,\n  encounter_type_detail\nfrom add_encounter_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.intermediate_generate_institutional_encounter_id"}, "model.claims_preprocessing.claims_preprocessing__institutional_encounter_start_and_end_dates": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__generate_institutional_encounter_id"]}, "config": {"enabled": true, "alias": "intermediate_institutional_encounter_start_and_end_dates", "schema": "core", "database": "tuva", "tags": ["claims_preprocessing"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["claims_preprocessing", "intermediate", "claims_preprocessing__institutional_encounter_start_and_end_dates"], "unique_id": "model.claims_preprocessing.claims_preprocessing__institutional_encounter_start_and_end_dates", "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))\r\n   )\r\n}}\r\n\r\n\r\n\r\n\r\nwith claims_for_institutional_encounters as (\r\nselect\r\n  aa.*,\r\n  bb.encounter_type as encounter_type,\r\n  bb.encounter_type_detail as encounter_type_detail,\r\n  bb.encounter_id as encounter_id\r\nfrom {{ ref('claims_preprocessing__medical_claim') }} aa\r\n     inner join {{ ref('claims_preprocessing__generate_institutional_encounter_id') }} bb\r\n     on aa.patient_id = bb.patient_id\r\n     and aa.claim_id = bb.claim_id\r\n),\r\n\r\n\r\ninstitutional_encounter_start_and_end_dates as (\r\nselect\r\n  patient_id,\r\n  encounter_id,\r\n  max(encounter_type) as encounter_type,\r\n  max(encounter_type_detail) as encounter_type_detail,\r\n  min(claim_start_date) as encounter_start_date,\r\n  max(claim_end_date) as encounter_end_date\r\nfrom claims_for_institutional_encounters\r\ngroup by patient_id, encounter_id\r\n)\r\n\r\n\r\nselect *\r\nfrom institutional_encounter_start_and_end_dates", "language": "sql", "package_name": "claims_preprocessing", "root_path": "C:\\Users\\forre\\PycharmProjects\\claims_preprocessing\\docs\\docs_generate\\dbt_packages\\claims_preprocessing", "path": "intermediate\\claims_preprocessing__institutional_encounter_start_and_end_dates.sql", "original_file_path": "models\\intermediate\\claims_preprocessing__institutional_encounter_start_and_end_dates.sql", "name": "claims_preprocessing__institutional_encounter_start_and_end_dates", "alias": "intermediate_institutional_encounter_start_and_end_dates", "checksum": {"name": "sha256", "checksum": "0613244fc5c06b11e5b5de907489219e268be43badd8bfa0608019f33307f33d"}, "tags": ["claims_preprocessing"], "refs": [["claims_preprocessing__medical_claim"], ["claims_preprocessing__generate_institutional_encounter_id"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "claims_preprocessing://models\\_models.yml", "compiled_path": "target\\compiled\\claims_preprocessing\\models\\intermediate\\claims_preprocessing__institutional_encounter_start_and_end_dates.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "tuva", "schema": "core", "alias": "intermediate_institutional_encounter_start_and_end_dates", "tags": "claims_preprocessing", "enabled": true}, "created_at": 1673363035.221862, "compiled_code": "\n\n\n\n\nwith claims_for_institutional_encounters as (\nselect\n  aa.*,\n  bb.encounter_type as encounter_type,\n  bb.encounter_type_detail as encounter_type_detail,\n  bb.encounter_id as encounter_id\nfrom tuva.core.staging_medical_claim aa\n     inner join tuva.core.intermediate_generate_institutional_encounter_id bb\n     on aa.patient_id = bb.patient_id\n     and aa.claim_id = bb.claim_id\n),\n\n\ninstitutional_encounter_start_and_end_dates as (\nselect\n  patient_id,\n  encounter_id,\n  max(encounter_type) as encounter_type,\n  max(encounter_type_detail) as encounter_type_detail,\n  min(claim_start_date) as encounter_start_date,\n  max(claim_end_date) as encounter_end_date\nfrom claims_for_institutional_encounters\ngroup by patient_id, encounter_id\n)\n\n\nselect *\nfrom institutional_encounter_start_and_end_dates", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.intermediate_institutional_encounter_start_and_end_dates"}, "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__encounter_id"]}, "config": {"enabled": true, "alias": "intermediate_medical_claim_enhanced", "schema": "core", "database": "tuva", "tags": ["claims_preprocessing"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["claims_preprocessing", "intermediate", "claims_preprocessing__medical_claim_enhanced"], "unique_id": "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))\r\n   )\r\n}}\r\n\r\n\r\n\r\n\r\nwith add_encounter_fields as (\r\nselect\r\n  aa.*,\r\n  bb.encounter_id as encounter_id,\r\n  bb.encounter_type as encounter_type,\r\n  bb.encounter_type_detail as encounter_type_detail,\r\n  bb.orphan_claim_flag as orphan_claim_flag\r\nfrom {{ ref('claims_preprocessing__medical_claim') }} aa\r\n     left join {{ ref('claims_preprocessing__encounter_id') }} bb\r\n     on aa.patient_id = bb.patient_id\r\n     and aa.claim_id = bb.claim_id\r\n),\r\n\r\n\r\nencounter_start_and_end_dates as (\r\nselect\r\n  encounter_id,\r\n  min(claim_start_date) as encounter_start_date,\r\n  max(claim_end_date) as encounter_end_date\r\nfrom add_encounter_fields\r\ngroup by encounter_id\r\n),\r\n\r\nadd_encounter_start_and_end_dates as (\r\nselect\r\n  aa.*,\r\n  bb.encounter_start_date,\r\n  bb.encounter_end_date\r\nfrom add_encounter_fields aa\r\n     left join encounter_start_and_end_dates bb\r\n     on aa.encounter_id = bb.encounter_id\r\n),\r\n\r\n\r\nadmit_codes as (\r\nselect\r\n  encounter_id,\r\n  max(admit_source_code) as encounter_admit_source_code,\r\n  max(admit_type_code) as encounter_admit_type_code\r\nfrom add_encounter_start_and_end_dates\r\nwhere claim_start_date = encounter_start_date\r\ngroup by encounter_id\r\n),\r\n\r\n\r\ndischarge_code as (\r\nselect\r\n  encounter_id,\r\n  max(discharge_disposition_code) as encounter_discharge_disposition_code\r\nfrom add_encounter_start_and_end_dates\r\nwhere claim_end_date = encounter_end_date\r\ngroup by encounter_id\r\n),\r\n\r\n\r\nadd_admit_and_discharge_codes as (\r\nselect\r\n  aa.*,\r\n  bb.encounter_admit_source_code,\r\n  bb.encounter_admit_type_code,\r\n  cc.encounter_discharge_disposition_code\r\nfrom add_encounter_start_and_end_dates aa\r\n     left join admit_codes bb on aa.encounter_id = bb.encounter_id\r\n     left join discharge_code cc on aa.encounter_id = cc.encounter_id\r\n)\r\n\r\n\r\nselect *\r\nfrom add_admit_and_discharge_codes", "language": "sql", "package_name": "claims_preprocessing", "root_path": "C:\\Users\\forre\\PycharmProjects\\claims_preprocessing\\docs\\docs_generate\\dbt_packages\\claims_preprocessing", "path": "intermediate\\claims_preprocessing__medical_claim_enhanced.sql", "original_file_path": "models\\intermediate\\claims_preprocessing__medical_claim_enhanced.sql", "name": "claims_preprocessing__medical_claim_enhanced", "alias": "intermediate_medical_claim_enhanced", "checksum": {"name": "sha256", "checksum": "e5343f8e1599fe78e81f900b3edbee565d7486b4bc18f068adaa7e980390cb43"}, "tags": ["claims_preprocessing"], "refs": [["claims_preprocessing__medical_claim"], ["claims_preprocessing__encounter_id"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "claims_preprocessing://models\\_models.yml", "compiled_path": "target\\compiled\\claims_preprocessing\\models\\intermediate\\claims_preprocessing__medical_claim_enhanced.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "tuva", "schema": "core", "alias": "intermediate_medical_claim_enhanced", "tags": "claims_preprocessing", "enabled": true}, "created_at": 1673363035.2263772, "compiled_code": "\n\n\n\n\nwith add_encounter_fields as (\nselect\n  aa.*,\n  bb.encounter_id as encounter_id,\n  bb.encounter_type as encounter_type,\n  bb.encounter_type_detail as encounter_type_detail,\n  bb.orphan_claim_flag as orphan_claim_flag\nfrom tuva.core.staging_medical_claim aa\n     left join tuva.core.intermediate_encounter_id bb\n     on aa.patient_id = bb.patient_id\n     and aa.claim_id = bb.claim_id\n),\n\n\nencounter_start_and_end_dates as (\nselect\n  encounter_id,\n  min(claim_start_date) as encounter_start_date,\n  max(claim_end_date) as encounter_end_date\nfrom add_encounter_fields\ngroup by encounter_id\n),\n\nadd_encounter_start_and_end_dates as (\nselect\n  aa.*,\n  bb.encounter_start_date,\n  bb.encounter_end_date\nfrom add_encounter_fields aa\n     left join encounter_start_and_end_dates bb\n     on aa.encounter_id = bb.encounter_id\n),\n\n\nadmit_codes as (\nselect\n  encounter_id,\n  max(admit_source_code) as encounter_admit_source_code,\n  max(admit_type_code) as encounter_admit_type_code\nfrom add_encounter_start_and_end_dates\nwhere claim_start_date = encounter_start_date\ngroup by encounter_id\n),\n\n\ndischarge_code as (\nselect\n  encounter_id,\n  max(discharge_disposition_code) as encounter_discharge_disposition_code\nfrom add_encounter_start_and_end_dates\nwhere claim_end_date = encounter_end_date\ngroup by encounter_id\n),\n\n\nadd_admit_and_discharge_codes as (\nselect\n  aa.*,\n  bb.encounter_admit_source_code,\n  bb.encounter_admit_type_code,\n  cc.encounter_discharge_disposition_code\nfrom add_encounter_start_and_end_dates aa\n     left join admit_codes bb on aa.encounter_id = bb.encounter_id\n     left join discharge_code cc on aa.encounter_id = cc.encounter_id\n)\n\n\nselect *\nfrom add_admit_and_discharge_codes", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.intermediate_medical_claim_enhanced"}, "model.claims_preprocessing.claims_preprocessing__mutually_exclusive_encounter_type": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.claims_preprocessing.claims_preprocessing__encounter_type"]}, "config": {"enabled": true, "alias": "intermediate_mutually_exclusive_encounter_type", "schema": "core", "database": "tuva", "tags": ["claims_preprocessing"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["claims_preprocessing", "intermediate", "claims_preprocessing__mutually_exclusive_encounter_type"], "unique_id": "model.claims_preprocessing.claims_preprocessing__mutually_exclusive_encounter_type", "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))\r\n   )\r\n}}\r\n\r\n\r\n\r\n\r\nwith encounter_ranking as (\r\nselect\r\n  claim_id,\r\n  encounter_type,\r\n  encounter_type_detail,\r\n  case\r\n    when encounter_type = 'acute inpatient' then 1\r\n    when encounter_type = 'skilled nursing' then 2\r\n    when encounter_type = 'emergency department' then 3\r\n    when encounter_type = 'urgent care' then 4\r\n    when encounter_type = 'inpatient rehabilitation' then 5\r\n    when encounter_type = 'inpatient psychiatric' then 6\r\n    when encounter_type = 'inpatient substance abuse' then 7\r\n    when encounter_type = 'ambulatory surgery' then 8\r\n    when encounter_type = 'dialysis' then 9\r\n    when encounter_type = 'hospice' then 10\r\n    when encounter_type = 'home health' then 11\r\n    when encounter_type = 'outpatient rehabilitation' then 12\r\n    when encounter_type = 'outpatient mental health' then 13\r\n    when encounter_type = 'office visit' then 14\r\n    when encounter_type = 'telehealth' then 15\r\n    when encounter_type = 'unmapped' then 16\r\n  end as encounter_rank\r\n  \r\nfrom {{ ref('claims_preprocessing__encounter_type') }}\r\n  \r\n),\r\n\r\n\r\nencounter_hierarchy as (\r\nselect\r\n  claim_id,\r\n  encounter_type,\r\n  encounter_type_detail\r\nfrom (\r\n    select\r\n        claim_id,\r\n        encounter_type,\r\n\tencounter_type_detail,\r\n\tencounter_rank,\r\n        row_number() over (\r\n            partition by claim_id order by encounter_rank\r\n        ) as row_num\r\n    from encounter_ranking\r\n)\r\nwhere row_num = 1\r\n)\r\n\r\n\r\nselect *\r\nfrom encounter_hierarchy", "language": "sql", "package_name": "claims_preprocessing", "root_path": "C:\\Users\\forre\\PycharmProjects\\claims_preprocessing\\docs\\docs_generate\\dbt_packages\\claims_preprocessing", "path": "intermediate\\claims_preprocessing__mutually_exclusive_encounter_type.sql", "original_file_path": "models\\intermediate\\claims_preprocessing__mutually_exclusive_encounter_type.sql", "name": "claims_preprocessing__mutually_exclusive_encounter_type", "alias": "intermediate_mutually_exclusive_encounter_type", "checksum": {"name": "sha256", "checksum": "eb9b2bbd2b32742afdd447bf38daf3c3ceb1fe24c939ad49f8a92fcfaf9178b0"}, "tags": ["claims_preprocessing"], "refs": [["claims_preprocessing__encounter_type"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "claims_preprocessing://models\\_models.yml", "compiled_path": "target\\compiled\\claims_preprocessing\\models\\intermediate\\claims_preprocessing__mutually_exclusive_encounter_type.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "tuva", "schema": "core", "alias": "intermediate_mutually_exclusive_encounter_type", "tags": "claims_preprocessing", "enabled": true}, "created_at": 1673363035.230891, "compiled_code": "\n\n\n\n\nwith encounter_ranking as (\nselect\n  claim_id,\n  encounter_type,\n  encounter_type_detail,\n  case\n    when encounter_type = 'acute inpatient' then 1\n    when encounter_type = 'skilled nursing' then 2\n    when encounter_type = 'emergency department' then 3\n    when encounter_type = 'urgent care' then 4\n    when encounter_type = 'inpatient rehabilitation' then 5\n    when encounter_type = 'inpatient psychiatric' then 6\n    when encounter_type = 'inpatient substance abuse' then 7\n    when encounter_type = 'ambulatory surgery' then 8\n    when encounter_type = 'dialysis' then 9\n    when encounter_type = 'hospice' then 10\n    when encounter_type = 'home health' then 11\n    when encounter_type = 'outpatient rehabilitation' then 12\n    when encounter_type = 'outpatient mental health' then 13\n    when encounter_type = 'office visit' then 14\n    when encounter_type = 'telehealth' then 15\n    when encounter_type = 'unmapped' then 16\n  end as encounter_rank\n  \nfrom tuva.core.intermediate_encounter_type\n  \n),\n\n\nencounter_hierarchy as (\nselect\n  claim_id,\n  encounter_type,\n  encounter_type_detail\nfrom (\n    select\n        claim_id,\n        encounter_type,\n\tencounter_type_detail,\n\tencounter_rank,\n        row_number() over (\n            partition by claim_id order by encounter_rank\n        ) as row_num\n    from encounter_ranking\n)\nwhere row_num = 1\n)\n\n\nselect *\nfrom encounter_hierarchy", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.intermediate_mutually_exclusive_encounter_type"}, "model.claims_preprocessing.claims_preprocessing__professional_claims_in_institutional_encounters": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__mutually_exclusive_encounter_type", "model.claims_preprocessing.claims_preprocessing__institutional_encounter_start_and_end_dates"]}, "config": {"enabled": true, "alias": "intermediate_professional_claims_in_institutional_encounters", "schema": "core", "database": "tuva", "tags": ["claims_preprocessing"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["claims_preprocessing", "intermediate", "claims_preprocessing__professional_claims_in_institutional_encounters"], "unique_id": "model.claims_preprocessing.claims_preprocessing__professional_claims_in_institutional_encounters", "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))\r\n   )\r\n}}\r\n\r\n\r\n\r\n\r\nwith relevant_professional_encounter_rows_from_medical_claim as (\r\nselect\r\n  aa.claim_id,\r\n  aa.patient_id,\r\n  aa.claim_start_date,\r\n  aa.claim_end_date,\r\n  bb.encounter_type,\r\n  bb.encounter_type_detail\r\n  \r\nfrom {{ ref('claims_preprocessing__medical_claim') }} aa\r\n     left join {{ ref('claims_preprocessing__mutually_exclusive_encounter_type') }} bb\r\n     on aa.claim_id = bb.claim_id\r\nwhere bb.encounter_type_detail\r\n\t\t   in ('acute inpatient - professional',\r\n                       'inpatient rehabilitation - professional',\r\n                       'inpatient psychiatric - professional',\r\n                       'inpatient substance abuse - professional',\r\n                       'skilled nursing - professional',\r\n                       'ambulatory surgery - professional',\r\n                       'dialysis - professional',\r\n                       'emergency department - professional',\r\n                       'urgent care - professional',\r\n                       'outpatient mental health - professional',\r\n                       'hospice - professional',\r\n                       'outpatient rehabilitation - professional',\r\n                       'home health - professional') \r\n),\r\n\r\n\r\nrelevant_professional_encounter_claims as (\r\nselect\r\n  claim_id,\r\n  patient_id,\r\n  min(claim_start_date) as claim_start_date,\r\n  max(claim_end_date) as claim_end_date,\r\n  max(encounter_type) as encounter_type,\r\n  max(encounter_type_detail) as encounter_type_detail\r\nfrom relevant_professional_encounter_rows_from_medical_claim\r\ngroup by patient_id, claim_id\r\n),\r\n\r\n\r\nfind_orphan_professional_claims as (\r\nselect\r\n  aa.patient_id,\r\n  aa.claim_id,\r\n  bb.encounter_id,\r\n  aa.encounter_type,\r\n  aa.encounter_type_detail,\r\n  case\r\n    when bb.encounter_id is null then 1\r\n    else 0\r\n  end as orphan_claim_flag\r\n  \r\nfrom relevant_professional_encounter_claims aa\r\n     left join\r\n     {{ ref('claims_preprocessing__institutional_encounter_start_and_end_dates') }} bb\r\n     on aa.patient_id = bb.patient_id\r\n     and aa.encounter_type = bb.encounter_type\r\n     and (aa.claim_start_date\r\n          between bb.encounter_start_date and bb.encounter_end_date)\r\n     and (aa.claim_end_date\r\n          between bb.encounter_start_date and bb.encounter_end_date)\r\n\t \r\n)\r\n\r\n\r\n\r\nselect *\r\nfrom find_orphan_professional_claims", "language": "sql", "package_name": "claims_preprocessing", "root_path": "C:\\Users\\forre\\PycharmProjects\\claims_preprocessing\\docs\\docs_generate\\dbt_packages\\claims_preprocessing", "path": "intermediate\\claims_preprocessing__professional_claims_in_institutional_encounters.sql", "original_file_path": "models\\intermediate\\claims_preprocessing__professional_claims_in_institutional_encounters.sql", "name": "claims_preprocessing__professional_claims_in_institutional_encounters", "alias": "intermediate_professional_claims_in_institutional_encounters", "checksum": {"name": "sha256", "checksum": "d65b233e6de111128160e57653eb7eb7104f09bd0585075712505b8911eccf5a"}, "tags": ["claims_preprocessing"], "refs": [["claims_preprocessing__medical_claim"], ["claims_preprocessing__mutually_exclusive_encounter_type"], ["claims_preprocessing__institutional_encounter_start_and_end_dates"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "claims_preprocessing://models\\_models.yml", "compiled_path": "target\\compiled\\claims_preprocessing\\models\\intermediate\\claims_preprocessing__professional_claims_in_institutional_encounters.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "tuva", "schema": "core", "alias": "intermediate_professional_claims_in_institutional_encounters", "tags": "claims_preprocessing", "enabled": true}, "created_at": 1673363035.231899, "compiled_code": "\n\n\n\n\nwith relevant_professional_encounter_rows_from_medical_claim as (\nselect\n  aa.claim_id,\n  aa.patient_id,\n  aa.claim_start_date,\n  aa.claim_end_date,\n  bb.encounter_type,\n  bb.encounter_type_detail\n  \nfrom tuva.core.staging_medical_claim aa\n     left join tuva.core.intermediate_mutually_exclusive_encounter_type bb\n     on aa.claim_id = bb.claim_id\nwhere bb.encounter_type_detail\n\t\t   in ('acute inpatient - professional',\n                       'inpatient rehabilitation - professional',\n                       'inpatient psychiatric - professional',\n                       'inpatient substance abuse - professional',\n                       'skilled nursing - professional',\n                       'ambulatory surgery - professional',\n                       'dialysis - professional',\n                       'emergency department - professional',\n                       'urgent care - professional',\n                       'outpatient mental health - professional',\n                       'hospice - professional',\n                       'outpatient rehabilitation - professional',\n                       'home health - professional') \n),\n\n\nrelevant_professional_encounter_claims as (\nselect\n  claim_id,\n  patient_id,\n  min(claim_start_date) as claim_start_date,\n  max(claim_end_date) as claim_end_date,\n  max(encounter_type) as encounter_type,\n  max(encounter_type_detail) as encounter_type_detail\nfrom relevant_professional_encounter_rows_from_medical_claim\ngroup by patient_id, claim_id\n),\n\n\nfind_orphan_professional_claims as (\nselect\n  aa.patient_id,\n  aa.claim_id,\n  bb.encounter_id,\n  aa.encounter_type,\n  aa.encounter_type_detail,\n  case\n    when bb.encounter_id is null then 1\n    else 0\n  end as orphan_claim_flag\n  \nfrom relevant_professional_encounter_claims aa\n     left join\n     tuva.core.intermediate_institutional_encounter_start_and_end_dates bb\n     on aa.patient_id = bb.patient_id\n     and aa.encounter_type = bb.encounter_type\n     and (aa.claim_start_date\n          between bb.encounter_start_date and bb.encounter_end_date)\n     and (aa.claim_end_date\n          between bb.encounter_start_date and bb.encounter_end_date)\n\t \n)\n\n\n\nselect *\nfrom find_orphan_professional_claims", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.intermediate_professional_claims_in_institutional_encounters"}, "model.claims_preprocessing.claims_preprocessing__professional_encounters": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__mutually_exclusive_encounter_type"]}, "config": {"enabled": true, "alias": "intermediate_professional_encounters", "schema": "core", "database": "tuva", "tags": ["claims_preprocessing"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["claims_preprocessing", "intermediate", "claims_preprocessing__professional_encounters"], "unique_id": "model.claims_preprocessing.claims_preprocessing__professional_encounters", "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))\r\n   )\r\n}}\r\n\r\n\r\n\r\n\r\nwith relevant_rows_from_medical_claim as (\r\nselect\r\n  aa.patient_id,\r\n  aa.claim_id,\r\n  aa.claim_id as encounter_id,\r\n  bb.encounter_type,\r\n  bb.encounter_type_detail\r\nfrom {{ ref('claims_preprocessing__medical_claim') }} aa\r\n     left join {{ ref('claims_preprocessing__mutually_exclusive_encounter_type') }} bb\r\n     on aa.claim_id = bb.claim_id\r\nwhere bb.encounter_type_detail in ('office visit','telehealth','unmapped')\r\n)\r\n\r\n\r\nselect distinct *\r\nfrom relevant_rows_from_medical_claim", "language": "sql", "package_name": "claims_preprocessing", "root_path": "C:\\Users\\forre\\PycharmProjects\\claims_preprocessing\\docs\\docs_generate\\dbt_packages\\claims_preprocessing", "path": "intermediate\\claims_preprocessing__professional_encounters.sql", "original_file_path": "models\\intermediate\\claims_preprocessing__professional_encounters.sql", "name": "claims_preprocessing__professional_encounters", "alias": "intermediate_professional_encounters", "checksum": {"name": "sha256", "checksum": "78f9374942a8767cda7714f33a622ac4074cd4da33cfdd0bea8a0937a6c0a4aa"}, "tags": ["claims_preprocessing"], "refs": [["claims_preprocessing__medical_claim"], ["claims_preprocessing__mutually_exclusive_encounter_type"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "claims_preprocessing://models\\_models.yml", "compiled_path": "target\\compiled\\claims_preprocessing\\models\\intermediate\\claims_preprocessing__professional_encounters.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "tuva", "schema": "core", "alias": "intermediate_professional_encounters", "tags": "claims_preprocessing", "enabled": true}, "created_at": 1673363035.23591, "compiled_code": "\n\n\n\n\nwith relevant_rows_from_medical_claim as (\nselect\n  aa.patient_id,\n  aa.claim_id,\n  aa.claim_id as encounter_id,\n  bb.encounter_type,\n  bb.encounter_type_detail\nfrom tuva.core.staging_medical_claim aa\n     left join tuva.core.intermediate_mutually_exclusive_encounter_type bb\n     on aa.claim_id = bb.claim_id\nwhere bb.encounter_type_detail in ('office visit','telehealth','unmapped')\n)\n\n\nselect distinct *\nfrom relevant_rows_from_medical_claim", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.intermediate_professional_encounters"}, "model.claims_preprocessing.claims_preprocessing__relevant_encounter_type_claims": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__mutually_exclusive_encounter_type"]}, "config": {"enabled": true, "alias": "intermediate_relevant_encounter_type_claims", "schema": "core", "database": "tuva", "tags": ["claims_preprocessing"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["claims_preprocessing", "intermediate", "claims_preprocessing__relevant_encounter_type_claims"], "unique_id": "model.claims_preprocessing.claims_preprocessing__relevant_encounter_type_claims", "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))\r\n   )\r\n}}\r\n\r\n\r\n\r\n\r\n-- Here we select all rows from the medical_claim table\r\n-- that correspond to encounter types where the encounter\r\n-- may be composed of more than one claim_id.\r\n-- These encounter types are the ones that may have\r\n-- institutional claims.\r\n\r\n\r\nwith relevant_encounter_type_rows_from_medical_claim as (\r\nselect\r\n  aa.*,\r\n  bb.encounter_type as encounter_type,\r\n  bb.encounter_type_detail as encounter_type_detail\r\nfrom {{ ref('claims_preprocessing__medical_claim') }} aa\r\n     left join {{ ref('claims_preprocessing__mutually_exclusive_encounter_type') }} bb\r\n     on aa.claim_id = bb.claim_id\r\nwhere bb.encounter_type_detail\r\n\t\t   in ('acute inpatient - institutional',\r\n                       'inpatient rehabilitation - institutional',\r\n                       'inpatient psychiatric - institutional',\r\n                       'inpatient substance abuse - institutional',\r\n                       'skilled nursing - institutional',\r\n                       'ambulatory surgery - institutional',\r\n                       'dialysis - institutional',\r\n                       'emergency department - institutional',\r\n                       'urgent care - institutional',\r\n                       'outpatient mental health - institutional',\r\n                       'hospice - institutional',\r\n                       'outpatient rehabilitation - institutional',\r\n                       'home health - institutional')\r\n),\r\n\r\n\r\nkey_counts as (\r\nselect\r\n  claim_id,\r\n  count(distinct patient_id) as patient_id_count,\r\n  count(distinct claim_start_date) as claim_start_date_count,\r\n  count(distinct claim_end_date) as claim_end_date_count,\r\n  count(distinct discharge_disposition_code)\r\n                 as discharge_disposition_code_count,\r\n  count(distinct facility_npi) as facility_npi_count\r\n\r\nfrom relevant_encounter_type_rows_from_medical_claim\r\ngroup by claim_id\r\nhaving\r\n  patient_id_count = 1 and\r\n  discharge_disposition_code_count = 1 and\r\n  claim_start_date_count = 1 and\r\n  claim_end_date_count = 1 and\r\n  facility_npi_count = 1\r\n),\r\n\r\n\r\nrelevant_encounter_type_rows_that_meet_counts_requirement as (\r\nselect rel_enc_types.*\r\nfrom relevant_encounter_type_rows_from_medical_claim as rel_enc_types\r\n    left join key_counts\r\n        on rel_enc_types.claim_id = key_counts.claim_id\r\n),\r\n\r\n\r\nrelevant_encounter_type_claims as (\r\nselect\r\n  claim_id,\r\n  max(patient_id) as patient_id,\r\n  max(encounter_type) as encounter_type,\r\n  max(encounter_type_detail) as encounter_type_detail,\r\n  min(claim_start_date) as claim_start_date,\r\n  max(claim_end_date) as claim_end_date,\r\n  max(discharge_disposition_code) as discharge_disposition_code,\r\n  max(facility_npi) as facility_npi\r\nfrom relevant_encounter_type_rows_that_meet_counts_requirement\r\ngroup by claim_id\r\n),\r\n\r\n\r\n-- relevant_encounter_type_claims_that_meet_data_quality_requirements as (\r\n-- select *\r\n-- from relevant_encounter_type_claims\r\n-- where claim_start_date <= claim_end_date\r\n-- ),\r\n\r\n\r\nrelevant_encounter_type_claims_with_row_num as (\r\nselect\r\n  patient_id,\r\n  claim_id,\r\n  encounter_type,\r\n  encounter_type_detail,\r\n  claim_start_date,\r\n  claim_end_date,\r\n  discharge_disposition_code,\r\n  facility_npi,\r\n  row_number() over (\r\n    partition by patient_id, encounter_type\r\n    order by claim_end_date, claim_start_date, claim_id\r\n  ) as row_num\r\nfrom relevant_encounter_type_claims\r\nwhere claim_start_date <= claim_end_date\r\n),\r\n\r\ncheck_for_merges_with_larger_row_num as (\r\nselect\r\n  aa.patient_id,\r\n  aa.encounter_type,\r\n  aa.encounter_type_detail,\r\n  aa.claim_id as claim_id_a,\r\n  bb.claim_id as claim_id_b,\r\n  aa.row_num as row_num_a,\r\n  bb.row_num as row_num_b,\r\n  case\r\n    -- Claims have same claim_end_date and should be merged:\r\n    when (aa.claim_end_date = bb.claim_end_date\r\n          and aa.facility_npi = bb.facility_npi) then 1\r\n\r\n    -- Claims have different claim_end_date and are\r\n    -- adjacent and should be merged:\r\n    when (aa.claim_end_date + 1 = bb.claim_start_date\r\n          and aa.facility_npi = bb.facility_npi\r\n\t  and aa.discharge_disposition_code = '30') then 1\r\n\r\n    -- Claims have different claim_end_date and overlap\r\n    -- and should be merged:\r\n    when (aa.claim_end_date >= bb.claim_start_date\r\n          and aa.facility_npi = bb.facility_npi ) then 1\r\n    else 0\r\n  end as merge_flag\r\n\r\nfrom relevant_encounter_type_claims_with_row_num aa\r\n     inner join relevant_encounter_type_claims_with_row_num bb\r\n     on aa.patient_id = bb.patient_id\r\n     and aa.encounter_type_detail = bb.encounter_type_detail\r\n     and aa.row_num < bb.row_num\r\n),\r\n\r\n\r\nmerges_with_larger_row_num as (\r\nselect\r\n  patient_id,\r\n  encounter_type,\r\n  encounter_type_detail,\r\n  claim_id_a,\r\n  claim_id_b,\r\n  row_num_a,\r\n  row_num_b,\r\n  merge_flag\r\nfrom check_for_merges_with_larger_row_num\r\nwhere merge_flag = 1\r\n),\r\n\r\n\r\nclaim_ids_that_merge_with_a_larger_row_num as (\r\nselect distinct claim_id_a as claim_id\r\nfrom merges_with_larger_row_num\r\n),\r\n\r\n\r\nclaim_ids_having_a_smaller_row_num_merging_with_a_larger_row_num as (\r\nselect distinct aa.claim_id as claim_id\r\nfrom relevant_encounter_type_claims_with_row_num aa\r\n     inner join\r\n     merges_with_larger_row_num bb\r\n     on aa.patient_id = bb.patient_id\r\n     and aa.encounter_type_detail = bb.encounter_type_detail\r\n     and bb.row_num_a < aa.row_num\r\n     and bb.row_num_b > aa.row_num\r\n),\r\n\r\n\r\nrelevant_encounter_type_claims_with_row_num_and_close_flag as (\r\nselect\r\n  rel.patient_id,\r\n  rel.claim_id,\r\n  rel.encounter_type,\r\n  rel.encounter_type_detail,\r\n  rel.claim_start_date,\r\n  rel.claim_end_date,\r\n  rel.discharge_disposition_code,\r\n  rel.facility_npi,\r\n  rel.row_num ,\r\n  case when rel_w_lar.claim_id is null and rel_w_small.claim_id is null then 1\r\n    else 0\r\n  end as close_flag\r\nfrom relevant_encounter_type_claims_with_row_num as rel\r\nleft join claim_ids_that_merge_with_a_larger_row_num as rel_w_lar\r\n        on rel.claim_id = rel_w_lar.claim_id\r\nleft join claim_ids_having_a_smaller_row_num_merging_with_a_larger_row_num as rel_w_small\r\n        on rel.claim_id = rel_w_small.claim_id\r\n\r\n\r\n)\r\n    select * From relevant_encounter_type_claims_with_row_num_and_close_flag", "language": "sql", "package_name": "claims_preprocessing", "root_path": "C:\\Users\\forre\\PycharmProjects\\claims_preprocessing\\docs\\docs_generate\\dbt_packages\\claims_preprocessing", "path": "intermediate\\claims_preprocessing__relevant_encounter_type_claims.sql", "original_file_path": "models\\intermediate\\claims_preprocessing__relevant_encounter_type_claims.sql", "name": "claims_preprocessing__relevant_encounter_type_claims", "alias": "intermediate_relevant_encounter_type_claims", "checksum": {"name": "sha256", "checksum": "fd1fd290e979f91f942fa525527c56dd8b9365c7a18cfce1fd7fffb847e5f6e7"}, "tags": ["claims_preprocessing"], "refs": [["claims_preprocessing__medical_claim"], ["claims_preprocessing__mutually_exclusive_encounter_type"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "claims_preprocessing://models\\_models.yml", "compiled_path": "target\\compiled\\claims_preprocessing\\models\\intermediate\\claims_preprocessing__relevant_encounter_type_claims.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "tuva", "schema": "core", "alias": "intermediate_relevant_encounter_type_claims", "tags": "claims_preprocessing", "enabled": true}, "created_at": 1673363035.23591, "compiled_code": "\n\n\n\n\n-- Here we select all rows from the medical_claim table\n-- that correspond to encounter types where the encounter\n-- may be composed of more than one claim_id.\n-- These encounter types are the ones that may have\n-- institutional claims.\n\n\nwith relevant_encounter_type_rows_from_medical_claim as (\nselect\n  aa.*,\n  bb.encounter_type as encounter_type,\n  bb.encounter_type_detail as encounter_type_detail\nfrom tuva.core.staging_medical_claim aa\n     left join tuva.core.intermediate_mutually_exclusive_encounter_type bb\n     on aa.claim_id = bb.claim_id\nwhere bb.encounter_type_detail\n\t\t   in ('acute inpatient - institutional',\n                       'inpatient rehabilitation - institutional',\n                       'inpatient psychiatric - institutional',\n                       'inpatient substance abuse - institutional',\n                       'skilled nursing - institutional',\n                       'ambulatory surgery - institutional',\n                       'dialysis - institutional',\n                       'emergency department - institutional',\n                       'urgent care - institutional',\n                       'outpatient mental health - institutional',\n                       'hospice - institutional',\n                       'outpatient rehabilitation - institutional',\n                       'home health - institutional')\n),\n\n\nkey_counts as (\nselect\n  claim_id,\n  count(distinct patient_id) as patient_id_count,\n  count(distinct claim_start_date) as claim_start_date_count,\n  count(distinct claim_end_date) as claim_end_date_count,\n  count(distinct discharge_disposition_code)\n                 as discharge_disposition_code_count,\n  count(distinct facility_npi) as facility_npi_count\n\nfrom relevant_encounter_type_rows_from_medical_claim\ngroup by claim_id\nhaving\n  patient_id_count = 1 and\n  discharge_disposition_code_count = 1 and\n  claim_start_date_count = 1 and\n  claim_end_date_count = 1 and\n  facility_npi_count = 1\n),\n\n\nrelevant_encounter_type_rows_that_meet_counts_requirement as (\nselect rel_enc_types.*\nfrom relevant_encounter_type_rows_from_medical_claim as rel_enc_types\n    left join key_counts\n        on rel_enc_types.claim_id = key_counts.claim_id\n),\n\n\nrelevant_encounter_type_claims as (\nselect\n  claim_id,\n  max(patient_id) as patient_id,\n  max(encounter_type) as encounter_type,\n  max(encounter_type_detail) as encounter_type_detail,\n  min(claim_start_date) as claim_start_date,\n  max(claim_end_date) as claim_end_date,\n  max(discharge_disposition_code) as discharge_disposition_code,\n  max(facility_npi) as facility_npi\nfrom relevant_encounter_type_rows_that_meet_counts_requirement\ngroup by claim_id\n),\n\n\n-- relevant_encounter_type_claims_that_meet_data_quality_requirements as (\n-- select *\n-- from relevant_encounter_type_claims\n-- where claim_start_date <= claim_end_date\n-- ),\n\n\nrelevant_encounter_type_claims_with_row_num as (\nselect\n  patient_id,\n  claim_id,\n  encounter_type,\n  encounter_type_detail,\n  claim_start_date,\n  claim_end_date,\n  discharge_disposition_code,\n  facility_npi,\n  row_number() over (\n    partition by patient_id, encounter_type\n    order by claim_end_date, claim_start_date, claim_id\n  ) as row_num\nfrom relevant_encounter_type_claims\nwhere claim_start_date <= claim_end_date\n),\n\ncheck_for_merges_with_larger_row_num as (\nselect\n  aa.patient_id,\n  aa.encounter_type,\n  aa.encounter_type_detail,\n  aa.claim_id as claim_id_a,\n  bb.claim_id as claim_id_b,\n  aa.row_num as row_num_a,\n  bb.row_num as row_num_b,\n  case\n    -- Claims have same claim_end_date and should be merged:\n    when (aa.claim_end_date = bb.claim_end_date\n          and aa.facility_npi = bb.facility_npi) then 1\n\n    -- Claims have different claim_end_date and are\n    -- adjacent and should be merged:\n    when (aa.claim_end_date + 1 = bb.claim_start_date\n          and aa.facility_npi = bb.facility_npi\n\t  and aa.discharge_disposition_code = '30') then 1\n\n    -- Claims have different claim_end_date and overlap\n    -- and should be merged:\n    when (aa.claim_end_date >= bb.claim_start_date\n          and aa.facility_npi = bb.facility_npi ) then 1\n    else 0\n  end as merge_flag\n\nfrom relevant_encounter_type_claims_with_row_num aa\n     inner join relevant_encounter_type_claims_with_row_num bb\n     on aa.patient_id = bb.patient_id\n     and aa.encounter_type_detail = bb.encounter_type_detail\n     and aa.row_num < bb.row_num\n),\n\n\nmerges_with_larger_row_num as (\nselect\n  patient_id,\n  encounter_type,\n  encounter_type_detail,\n  claim_id_a,\n  claim_id_b,\n  row_num_a,\n  row_num_b,\n  merge_flag\nfrom check_for_merges_with_larger_row_num\nwhere merge_flag = 1\n),\n\n\nclaim_ids_that_merge_with_a_larger_row_num as (\nselect distinct claim_id_a as claim_id\nfrom merges_with_larger_row_num\n),\n\n\nclaim_ids_having_a_smaller_row_num_merging_with_a_larger_row_num as (\nselect distinct aa.claim_id as claim_id\nfrom relevant_encounter_type_claims_with_row_num aa\n     inner join\n     merges_with_larger_row_num bb\n     on aa.patient_id = bb.patient_id\n     and aa.encounter_type_detail = bb.encounter_type_detail\n     and bb.row_num_a < aa.row_num\n     and bb.row_num_b > aa.row_num\n),\n\n\nrelevant_encounter_type_claims_with_row_num_and_close_flag as (\nselect\n  rel.patient_id,\n  rel.claim_id,\n  rel.encounter_type,\n  rel.encounter_type_detail,\n  rel.claim_start_date,\n  rel.claim_end_date,\n  rel.discharge_disposition_code,\n  rel.facility_npi,\n  rel.row_num ,\n  case when rel_w_lar.claim_id is null and rel_w_small.claim_id is null then 1\n    else 0\n  end as close_flag\nfrom relevant_encounter_type_claims_with_row_num as rel\nleft join claim_ids_that_merge_with_a_larger_row_num as rel_w_lar\n        on rel.claim_id = rel_w_lar.claim_id\nleft join claim_ids_having_a_smaller_row_num_merging_with_a_larger_row_num as rel_w_small\n        on rel.claim_id = rel_w_small.claim_id\n\n\n)\n    select * From relevant_encounter_type_claims_with_row_num_and_close_flag", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.intermediate_relevant_encounter_type_claims"}, "model.claims_preprocessing.claims_preprocessing__eligibility": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.claims_preprocessing_input.eligibility"]}, "config": {"enabled": true, "alias": "staging_eligibility", "schema": "core", "database": "tuva", "tags": ["claims_preprocessing"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["claims_preprocessing", "staging", "claims_preprocessing__eligibility"], "unique_id": "model.claims_preprocessing.claims_preprocessing__eligibility", "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))\r\n   )\r\n}}\r\n\r\n\r\n\r\n\r\nselect *\r\nfrom {{ var('eligibility')}}", "language": "sql", "package_name": "claims_preprocessing", "root_path": "C:\\Users\\forre\\PycharmProjects\\claims_preprocessing\\docs\\docs_generate\\dbt_packages\\claims_preprocessing", "path": "staging\\claims_preprocessing__eligibility.sql", "original_file_path": "models\\staging\\claims_preprocessing__eligibility.sql", "name": "claims_preprocessing__eligibility", "alias": "staging_eligibility", "checksum": {"name": "sha256", "checksum": "2c6d4ead52be2f7e819aa24eda2d36bdbc282e62ae1287237e5052afddbe0dc3"}, "tags": ["claims_preprocessing"], "refs": [["eligibility"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "claims_preprocessing://models\\_models.yml", "compiled_path": "target\\compiled\\claims_preprocessing\\models\\staging\\claims_preprocessing__eligibility.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "tuva", "schema": "core", "alias": "staging_eligibility", "tags": "claims_preprocessing", "enabled": true}, "created_at": 1673363035.2058122, "compiled_code": "\n\n\n\n\nselect *\nfrom tuva.claims_preprocessing_input.eligibility", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.staging_eligibility"}, "model.claims_preprocessing.claims_preprocessing__medical_claim": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.claims_preprocessing_input.medical_claim"]}, "config": {"enabled": true, "alias": "staging_medical_claim", "schema": "core", "database": "tuva", "tags": ["claims_preprocessing"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["claims_preprocessing", "staging", "claims_preprocessing__medical_claim"], "unique_id": "model.claims_preprocessing.claims_preprocessing__medical_claim", "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))\r\n   )\r\n}}\r\n\r\n\r\n\r\n\r\nselect *\r\nfrom {{ var('medical_claim')}}", "language": "sql", "package_name": "claims_preprocessing", "root_path": "C:\\Users\\forre\\PycharmProjects\\claims_preprocessing\\docs\\docs_generate\\dbt_packages\\claims_preprocessing", "path": "staging\\claims_preprocessing__medical_claim.sql", "original_file_path": "models\\staging\\claims_preprocessing__medical_claim.sql", "name": "claims_preprocessing__medical_claim", "alias": "staging_medical_claim", "checksum": {"name": "sha256", "checksum": "362008aa50c04335ec64e286b5d575519c9dc27497c7135089f0b66dc1dd2a2a"}, "tags": ["claims_preprocessing"], "refs": [["medical_claim"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "claims_preprocessing://models\\_models.yml", "compiled_path": "target\\compiled\\claims_preprocessing\\models\\staging\\claims_preprocessing__medical_claim.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "tuva", "schema": "core", "alias": "staging_medical_claim", "tags": "claims_preprocessing", "enabled": true}, "created_at": 1673363035.2118418, "compiled_code": "\n\n\n\n\nselect *\nfrom tuva.claims_preprocessing_input.medical_claim", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.staging_medical_claim"}, "seed.terminology.terminology__admit_source": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "admit_source", "schema": "terminology", "database": "tuva", "tags": ["terminology", "claims_preprocessing"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"admit_source_code": "varchar", "admit_source_description": "varchar", "newborn_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__admit_source"], "unique_id": "seed.terminology.terminology__admit_source", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\claims_preprocessing\\docs\\docs_generate\\dbt_packages\\terminology", "path": "terminology__admit_source.csv", "original_file_path": "terminology\\terminology__admit_source.csv", "name": "terminology__admit_source", "alias": "admit_source", "checksum": {"name": "sha256", "checksum": "392e0c1935973dbea2e96030db856a8ccfa660cbd51f45c92d51d121aa432a8b"}, "tags": ["terminology", "claims_preprocessing"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "admit_source", "enabled": true, "tags": ["terminology", "claims_preprocessing"], "column_types": {"admit_source_code": "varchar", "admit_source_description": "varchar", "newborn_description": "varchar"}}, "created_at": 1673363035.2595987, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.admit_source"}, "seed.terminology.terminology__admit_type": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "admit_type", "schema": "terminology", "database": "tuva", "tags": ["terminology", "claims_preprocessing"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"admit_type_code": "varchar", "admit_type_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__admit_type"], "unique_id": "seed.terminology.terminology__admit_type", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\claims_preprocessing\\docs\\docs_generate\\dbt_packages\\terminology", "path": "terminology__admit_type.csv", "original_file_path": "terminology\\terminology__admit_type.csv", "name": "terminology__admit_type", "alias": "admit_type", "checksum": {"name": "sha256", "checksum": "0fba96cde9676541c9205364a2e2285efa0e9500507a4bcc7b790a982c9482ac"}, "tags": ["terminology", "claims_preprocessing"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "admit_type", "enabled": true, "tags": ["terminology", "claims_preprocessing"], "column_types": {"admit_type_code": "varchar", "admit_type_description": "varchar"}}, "created_at": 1673363035.2626116, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.admit_type"}, "seed.terminology.terminology__bill_type": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "bill_type", "schema": "terminology", "database": "tuva", "tags": ["terminology", "data_profiling"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"bill_type_code": "varchar", "bill_type_description": "varchar", "deprecated": "integer", "deprecated_date": "date"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__bill_type"], "unique_id": "seed.terminology.terminology__bill_type", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\claims_preprocessing\\docs\\docs_generate\\dbt_packages\\terminology", "path": "terminology__bill_type.csv", "original_file_path": "terminology\\terminology__bill_type.csv", "name": "terminology__bill_type", "alias": "bill_type", "checksum": {"name": "sha256", "checksum": "8b363106ed8e54488d71b8f4ccfca6e371692e836ef77b335621df6bf63b9a8a"}, "tags": ["terminology", "data_profiling"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "bill_type", "enabled": true, "tags": ["terminology", "data_profiling"], "column_types": {"bill_type_code": "varchar", "bill_type_description": "varchar", "deprecated": "integer", "deprecated_date": "date"}}, "created_at": 1673363035.2817047, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.bill_type"}, "seed.terminology.terminology__claim_type": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "claim_type", "schema": "terminology", "database": "tuva", "tags": ["terminology", "data_profiling"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"claim_type_code": "varchar", "claim_type_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__claim_type"], "unique_id": "seed.terminology.terminology__claim_type", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\claims_preprocessing\\docs\\docs_generate\\dbt_packages\\terminology", "path": "terminology__claim_type.csv", "original_file_path": "terminology\\terminology__claim_type.csv", "name": "terminology__claim_type", "alias": "claim_type", "checksum": {"name": "sha256", "checksum": "da35be4c432144ba8003d5ef8f2d815d8afce6ed215d6aa065e305ad11f7552c"}, "tags": ["terminology", "data_profiling"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "claim_type", "enabled": true, "tags": ["terminology", "data_profiling"], "column_types": {"claim_type_code": "varchar", "claim_type_description": "varchar"}}, "created_at": 1673363035.2938242, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.claim_type"}, "seed.terminology.terminology__cms_chronic_conditions": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "cms_chronic_conditions", "schema": "terminology", "database": "tuva", "tags": ["terminology", "cms_chronic_conditions"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"condition_id": "varchar", "condition": "varchar", "condition_column_name": "varchar", "chronic_condition_type": "varchar", "condition_category": "varchar", "additional_logic": "varchar(1000)", "claims_qualification": "varchar(1000)", "inclusion_type": "varchar", "code_system": "varchar", "code": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__cms_chronic_conditions"], "unique_id": "seed.terminology.terminology__cms_chronic_conditions", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\claims_preprocessing\\docs\\docs_generate\\dbt_packages\\terminology", "path": "terminology__cms_chronic_conditions.csv", "original_file_path": "terminology\\terminology__cms_chronic_conditions.csv", "name": "terminology__cms_chronic_conditions", "alias": "cms_chronic_conditions", "checksum": {"name": "path", "checksum": "terminology\\terminology__cms_chronic_conditions.csv"}, "tags": ["terminology", "cms_chronic_conditions"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "cms_chronic_conditions", "enabled": true, "tags": ["terminology", "cms_chronic_conditions"], "column_types": {"condition_id": "varchar", "condition": "varchar", "condition_column_name": "varchar", "chronic_condition_type": "varchar", "condition_category": "varchar", "additional_logic": "varchar(1000)", "claims_qualification": "varchar(1000)", "inclusion_type": "varchar", "code_system": "varchar", "code": "varchar"}}, "created_at": 1673363035.2907991, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.cms_chronic_conditions"}, "seed.terminology.terminology__code_type": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "code_type", "schema": "terminology", "database": "tuva", "tags": ["terminology"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__code_type"], "unique_id": "seed.terminology.terminology__code_type", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\claims_preprocessing\\docs\\docs_generate\\dbt_packages\\terminology", "path": "terminology__code_type.csv", "original_file_path": "terminology\\terminology__code_type.csv", "name": "terminology__code_type", "alias": "code_type", "checksum": {"name": "sha256", "checksum": "5fe9aa562e036ca6f98866fe29d85c1f2351f53d00fdde631ad8dce183ce5788"}, "tags": ["terminology"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "code_type", "enabled": true, "tags": "terminology", "column_types": {"description": "varchar"}}, "created_at": 1673363035.3008275, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.code_type"}, "seed.terminology.terminology__discharge_disposition": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "discharge_disposition", "schema": "terminology", "database": "tuva", "tags": ["terminology", "claims_preprocessing", "readmissions", "data_profiling"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"discharge_disposition_code": "varchar", "discharge_disposition_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__discharge_disposition"], "unique_id": "seed.terminology.terminology__discharge_disposition", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\claims_preprocessing\\docs\\docs_generate\\dbt_packages\\terminology", "path": "terminology__discharge_disposition.csv", "original_file_path": "terminology\\terminology__discharge_disposition.csv", "name": "terminology__discharge_disposition", "alias": "discharge_disposition", "checksum": {"name": "sha256", "checksum": "992cf51c8d6a2dfe3d3f54e65bf618e68599ed2f48bcf75d59ee8bdd48d1aa0e"}, "tags": ["terminology", "claims_preprocessing", "readmissions", "data_profiling"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "discharge_disposition", "enabled": true, "tags": ["terminology", "claims_preprocessing", "readmissions", "data_profiling"], "column_types": {"discharge_disposition_code": "varchar", "discharge_disposition_description": "varchar"}}, "created_at": 1673363035.3029535, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.discharge_disposition"}, "seed.terminology.terminology__encounter_type": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "encounter_type", "schema": "terminology", "database": "tuva", "tags": ["terminology", "claims_preprocessing"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__encounter_type"], "unique_id": "seed.terminology.terminology__encounter_type", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\claims_preprocessing\\docs\\docs_generate\\dbt_packages\\terminology", "path": "terminology__encounter_type.csv", "original_file_path": "terminology\\terminology__encounter_type.csv", "name": "terminology__encounter_type", "alias": "encounter_type", "checksum": {"name": "sha256", "checksum": "d75ee477d89a9d8d679a9fcc64ce29975b9fe6eea1ad094d2e60d62e5b011c3c"}, "tags": ["terminology", "claims_preprocessing"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "encounter_type", "enabled": true, "tags": ["terminology", "claims_preprocessing"], "column_types": {"description": "varchar"}}, "created_at": 1673363035.3118944, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.encounter_type"}, "seed.terminology.terminology__ethnicity": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "ethnicity", "schema": "terminology", "database": "tuva", "tags": ["terminology"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"code": "varchar", "description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__ethnicity"], "unique_id": "seed.terminology.terminology__ethnicity", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\claims_preprocessing\\docs\\docs_generate\\dbt_packages\\terminology", "path": "terminology__ethnicity.csv", "original_file_path": "terminology\\terminology__ethnicity.csv", "name": "terminology__ethnicity", "alias": "ethnicity", "checksum": {"name": "sha256", "checksum": "d23c1e3d7417d569bbb1e11cd0a493cfd60f60e231756adb2f7b6160ca2f93e6"}, "tags": ["terminology"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "ethnicity", "enabled": true, "tags": "terminology", "column_types": {"code": "varchar", "description": "varchar"}}, "created_at": 1673363035.3118944, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.ethnicity"}, "seed.terminology.terminology__fips_county": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "fips_county", "schema": "terminology", "database": "tuva", "tags": ["terminology"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"fips_code": "varchar", "county": "varchar", "state": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__fips_county"], "unique_id": "seed.terminology.terminology__fips_county", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\claims_preprocessing\\docs\\docs_generate\\dbt_packages\\terminology", "path": "terminology__fips_county.csv", "original_file_path": "terminology\\terminology__fips_county.csv", "name": "terminology__fips_county", "alias": "fips_county", "checksum": {"name": "sha256", "checksum": "51c80da82ec1f20665fbd65379796c53f724781fa3833396cba093c89004bfb5"}, "tags": ["terminology"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "fips_county", "enabled": true, "tags": "terminology", "column_types": {"fips_code": "varchar", "county": "varchar", "state": "varchar"}}, "created_at": 1673363035.3264842, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.fips_county"}, "seed.terminology.terminology__fips_state": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "fips_state", "schema": "terminology", "database": "tuva", "tags": ["terminology"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"fips_code": "varchar", "abbreviation": "varchar", "description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__fips_state"], "unique_id": "seed.terminology.terminology__fips_state", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\claims_preprocessing\\docs\\docs_generate\\dbt_packages\\terminology", "path": "terminology__fips_state.csv", "original_file_path": "terminology\\terminology__fips_state.csv", "name": "terminology__fips_state", "alias": "fips_state", "checksum": {"name": "sha256", "checksum": "2208d05e654084a3cff054be9aa2b340fe76e8fee9af380406ce0fa3fe592a89"}, "tags": ["terminology"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "fips_state", "enabled": true, "tags": "terminology", "column_types": {"fips_code": "varchar", "abbreviation": "varchar", "description": "varchar"}}, "created_at": 1673363035.3319921, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.fips_state"}, "seed.terminology.terminology__gender": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "gender", "schema": "terminology", "database": "tuva", "tags": ["terminology", "data_profiling"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__gender"], "unique_id": "seed.terminology.terminology__gender", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\claims_preprocessing\\docs\\docs_generate\\dbt_packages\\terminology", "path": "terminology__gender.csv", "original_file_path": "terminology\\terminology__gender.csv", "name": "terminology__gender", "alias": "gender", "checksum": {"name": "sha256", "checksum": "49caad564a6d46cabcbbaa25857984aa1f7d4426ed5927989cdeddc1539d6fb6"}, "tags": ["terminology", "data_profiling"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "gender", "enabled": true, "tags": ["terminology", "data_profiling"], "column_types": {"description": "varchar"}}, "created_at": 1673363035.335999, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.gender"}, "seed.terminology.terminology__hcpcs_level_2": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "hcpcs_level_2", "schema": "terminology", "database": "tuva", "tags": ["terminology"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"hcpcs": "varchar", "seqnum": "varchar", "recid": "varchar", "long_description": "varchar(2000)", "short_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__hcpcs_level_2"], "unique_id": "seed.terminology.terminology__hcpcs_level_2", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\claims_preprocessing\\docs\\docs_generate\\dbt_packages\\terminology", "path": "terminology__hcpcs_level_2.csv", "original_file_path": "terminology\\terminology__hcpcs_level_2.csv", "name": "terminology__hcpcs_level_2", "alias": "hcpcs_level_2", "checksum": {"name": "path", "checksum": "terminology\\terminology__hcpcs_level_2.csv"}, "tags": ["terminology"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "hcpcs_level_2", "enabled": true, "tags": "terminology", "column_types": {"hcpcs": "varchar", "seqnum": "varchar", "recid": "varchar", "long_description": "varchar(2000)", "short_description": "varchar"}}, "created_at": 1673363035.3429499, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.hcpcs_level_2"}, "seed.terminology.terminology__icd_10_cm": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "icd_10_cm", "schema": "terminology", "database": "tuva", "tags": ["terminology", "claims_preprocessing", "readmissions", "data_profiling"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"icd_10_cm": "varchar", "valid_flag": "varchar", "short_description": "varchar", "long_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__icd_10_cm"], "unique_id": "seed.terminology.terminology__icd_10_cm", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\claims_preprocessing\\docs\\docs_generate\\dbt_packages\\terminology", "path": "terminology__icd_10_cm.csv", "original_file_path": "terminology\\terminology__icd_10_cm.csv", "name": "terminology__icd_10_cm", "alias": "icd_10_cm", "checksum": {"name": "path", "checksum": "terminology\\terminology__icd_10_cm.csv"}, "tags": ["terminology", "claims_preprocessing", "readmissions", "data_profiling"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "icd_10_cm", "enabled": true, "tags": ["terminology", "claims_preprocessing", "readmissions", "data_profiling"], "column_types": {"icd_10_cm": "varchar", "valid_flag": "varchar", "short_description": "varchar", "long_description": "varchar"}}, "created_at": 1673363035.3519728, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.icd_10_cm"}, "seed.terminology.terminology__icd_10_pcs": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "icd_10_pcs", "schema": "terminology", "database": "tuva", "tags": ["terminology", "claims_preprocessing", "readmissions"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"icd_10_pcs": "varchar", "valid_flag": "varchar", "short_description": "varchar", "long_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__icd_10_pcs"], "unique_id": "seed.terminology.terminology__icd_10_pcs", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\claims_preprocessing\\docs\\docs_generate\\dbt_packages\\terminology", "path": "terminology__icd_10_pcs.csv", "original_file_path": "terminology\\terminology__icd_10_pcs.csv", "name": "terminology__icd_10_pcs", "alias": "icd_10_pcs", "checksum": {"name": "path", "checksum": "terminology\\terminology__icd_10_pcs.csv"}, "tags": ["terminology", "claims_preprocessing", "readmissions"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "icd_10_pcs", "enabled": true, "tags": ["terminology", "claims_preprocessing", "readmissions"], "column_types": {"icd_10_pcs": "varchar", "valid_flag": "varchar", "short_description": "varchar", "long_description": "varchar"}}, "created_at": 1673363035.36304, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.icd_10_pcs"}, "seed.terminology.terminology__mdc": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "mdc", "schema": "terminology", "database": "tuva", "tags": ["terminology"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"mdc_code": "varchar", "mcd_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__mdc"], "unique_id": "seed.terminology.terminology__mdc", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\claims_preprocessing\\docs\\docs_generate\\dbt_packages\\terminology", "path": "terminology__mdc.csv", "original_file_path": "terminology\\terminology__mdc.csv", "name": "terminology__mdc", "alias": "mdc", "checksum": {"name": "sha256", "checksum": "c941d78a6e4de2c32b546a46f0b0c429bb209a9e1a7049a803cf8c447c73d0d6"}, "tags": ["terminology"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "mdc", "enabled": true, "tags": "terminology", "column_types": {"mdc_code": "varchar", "mcd_description": "varchar"}}, "created_at": 1673363035.3731155, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.mdc"}, "seed.terminology.terminology__medicare_dual_eligibility": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "medicare_dual_eligibility", "schema": "terminology", "database": "tuva", "tags": ["terminology", "claims_preprocessing"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"dual_status_code": "varchar", "dual_status_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__medicare_dual_eligibility"], "unique_id": "seed.terminology.terminology__medicare_dual_eligibility", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\claims_preprocessing\\docs\\docs_generate\\dbt_packages\\terminology", "path": "terminology__medicare_dual_eligibility.csv", "original_file_path": "terminology\\terminology__medicare_dual_eligibility.csv", "name": "terminology__medicare_dual_eligibility", "alias": "medicare_dual_eligibility", "checksum": {"name": "sha256", "checksum": "db7415a91cd31bbf2318963aa717b319319516bdc8426e2ebb2e78db002cb58d"}, "tags": ["terminology", "claims_preprocessing"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "medicare_dual_eligibility", "enabled": true, "tags": ["terminology", "claims_preprocessing"], "column_types": {"dual_status_code": "varchar", "dual_status_description": "varchar"}}, "created_at": 1673363035.3816273, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.medicare_dual_eligibility"}, "seed.terminology.terminology__medicare_state_fips": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "medicare_state_fips", "schema": "terminology", "database": "tuva", "tags": ["terminology", "medicare_cclf_connector"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"fips_code": "varchar", "state": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__medicare_state_fips"], "unique_id": "seed.terminology.terminology__medicare_state_fips", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\claims_preprocessing\\docs\\docs_generate\\dbt_packages\\terminology", "path": "terminology__medicare_state_fips.csv", "original_file_path": "terminology\\terminology__medicare_state_fips.csv", "name": "terminology__medicare_state_fips", "alias": "medicare_state_fips", "checksum": {"name": "sha256", "checksum": "66012b041d1956dca6bf24bc25e691d419e458b1e6b54bb13d8bf5ff802ba2d9"}, "tags": ["terminology", "medicare_cclf_connector"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "medicare_state_fips", "enabled": true, "tags": ["terminology", "medicare_cclf_connector"], "column_types": {"fips_code": "varchar", "state": "varchar"}}, "created_at": 1673363035.3861387, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.medicare_state_fips"}, "seed.terminology.terminology__medicare_status": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "medicare_status", "schema": "terminology", "database": "tuva", "tags": ["terminology", "claims_preprocessing"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"medicare_status_code": "varchar", "medicare_status_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__medicare_status"], "unique_id": "seed.terminology.terminology__medicare_status", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\claims_preprocessing\\docs\\docs_generate\\dbt_packages\\terminology", "path": "terminology__medicare_status.csv", "original_file_path": "terminology\\terminology__medicare_status.csv", "name": "terminology__medicare_status", "alias": "medicare_status", "checksum": {"name": "sha256", "checksum": "2bd1a8a081fceb69bf91287c8a56c370ea1544a1fbbe12829566955012c04c97"}, "tags": ["terminology", "claims_preprocessing"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "medicare_status", "enabled": true, "tags": ["terminology", "claims_preprocessing"], "column_types": {"medicare_status_code": "varchar", "medicare_status_description": "varchar"}}, "created_at": 1673363035.3928306, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.medicare_status"}, "seed.terminology.terminology__ms_drg": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "ms_drg", "schema": "terminology", "database": "tuva", "tags": ["terminology", "readmissions", "data_profiling", "claims_preprocessing"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ms_drg_code": "varchar", "mdc_code": "varchar", "medical_surgical": "varchar", "ms_drg_description": "varchar", "deprecated": "integer", "deprecated_date": "date"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__ms_drg"], "unique_id": "seed.terminology.terminology__ms_drg", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\claims_preprocessing\\docs\\docs_generate\\dbt_packages\\terminology", "path": "terminology__ms_drg.csv", "original_file_path": "terminology\\terminology__ms_drg.csv", "name": "terminology__ms_drg", "alias": "ms_drg", "checksum": {"name": "sha256", "checksum": "63740ef5cb6d40d8b4f261a59de820df7f8d80ca96989194348b1874f65861d6"}, "tags": ["terminology", "readmissions", "data_profiling", "claims_preprocessing"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "ms_drg", "enabled": true, "tags": ["terminology", "readmissions", "data_profiling", "claims_preprocessing"], "column_types": {"ms_drg_code": "varchar", "mdc_code": "varchar", "medical_surgical": "varchar", "ms_drg_description": "varchar", "deprecated": "integer", "deprecated_date": "date"}}, "created_at": 1673363035.3928306, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.ms_drg"}, "seed.terminology.terminology__payer_type": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "payer_type", "schema": "terminology", "database": "tuva", "tags": ["terminology"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"payer_type": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__payer_type"], "unique_id": "seed.terminology.terminology__payer_type", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\claims_preprocessing\\docs\\docs_generate\\dbt_packages\\terminology", "path": "terminology__payer_type.csv", "original_file_path": "terminology\\terminology__payer_type.csv", "name": "terminology__payer_type", "alias": "payer_type", "checksum": {"name": "sha256", "checksum": "b79b79e782eb2d68211a9f375c0c1aebc9828449c51f77297e8e70c51a6827e0"}, "tags": ["terminology"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "payer_type", "enabled": true, "tags": "terminology", "column_types": {"payer_type": "varchar"}}, "created_at": 1673363035.4018471, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.payer_type"}, "seed.terminology.terminology__place_of_service": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "place_of_service", "schema": "terminology", "database": "tuva", "tags": ["terminology", "claims_preprocessing", "data_profiling"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"place_of_service_code": "varchar", "place_of_service_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__place_of_service"], "unique_id": "seed.terminology.terminology__place_of_service", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\claims_preprocessing\\docs\\docs_generate\\dbt_packages\\terminology", "path": "terminology__place_of_service.csv", "original_file_path": "terminology\\terminology__place_of_service.csv", "name": "terminology__place_of_service", "alias": "place_of_service", "checksum": {"name": "sha256", "checksum": "760955a3ad21bd2c8f4257881e8f713276eda10623bb05f373634ff186ea8592"}, "tags": ["terminology", "claims_preprocessing", "data_profiling"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "place_of_service", "enabled": true, "tags": ["terminology", "claims_preprocessing", "data_profiling"], "column_types": {"place_of_service_code": "varchar", "place_of_service_description": "varchar"}}, "created_at": 1673363035.4054034, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.place_of_service"}, "seed.terminology.terminology__present_on_admission": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "present_on_admission", "schema": "terminology", "database": "tuva", "tags": ["terminology", "data_profiling", "claims_preprocessing"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"present_on_admit_code": "varchar", "description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__present_on_admission"], "unique_id": "seed.terminology.terminology__present_on_admission", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\claims_preprocessing\\docs\\docs_generate\\dbt_packages\\terminology", "path": "terminology__present_on_admission.csv", "original_file_path": "terminology\\terminology__present_on_admission.csv", "name": "terminology__present_on_admission", "alias": "present_on_admission", "checksum": {"name": "sha256", "checksum": "4a0669b7aed638378b8cde6a1e4d0202071923c695ecba93cf266d7c1b206d8e"}, "tags": ["terminology", "data_profiling", "claims_preprocessing"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "present_on_admission", "enabled": true, "tags": ["terminology", "data_profiling", "claims_preprocessing"], "column_types": {"present_on_admit_code": "varchar", "description": "varchar"}}, "created_at": 1673363035.4260323, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.present_on_admission"}, "seed.terminology.terminology__race": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "race", "schema": "terminology", "database": "tuva", "tags": ["terminology"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"race_code": "varchar", "race_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__race"], "unique_id": "seed.terminology.terminology__race", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\claims_preprocessing\\docs\\docs_generate\\dbt_packages\\terminology", "path": "terminology__race.csv", "original_file_path": "terminology\\terminology__race.csv", "name": "terminology__race", "alias": "race", "checksum": {"name": "sha256", "checksum": "267e1246e929209855c8128566cb1eadc21f878998bf5ee3fd36b50a76e2da2c"}, "tags": ["terminology"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "race", "enabled": true, "tags": "terminology", "column_types": {"race_code": "varchar", "race_description": "varchar"}}, "created_at": 1673363035.432045, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.race"}, "seed.terminology.terminology__revenue_center": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "revenue_center", "schema": "terminology", "database": "tuva", "tags": ["terminology", "claims_preprocessing", "data_profiling"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"revenue_center_code": "varchar", "description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__revenue_center"], "unique_id": "seed.terminology.terminology__revenue_center", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\claims_preprocessing\\docs\\docs_generate\\dbt_packages\\terminology", "path": "terminology__revenue_center.csv", "original_file_path": "terminology\\terminology__revenue_center.csv", "name": "terminology__revenue_center", "alias": "revenue_center", "checksum": {"name": "sha256", "checksum": "6d630994900478a2efc0f63fa4045b387bd020cb519fac04ba16b32fb11a1647"}, "tags": ["terminology", "claims_preprocessing", "data_profiling"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "revenue_center", "enabled": true, "tags": ["terminology", "claims_preprocessing", "data_profiling"], "column_types": {"revenue_center_code": "varchar", "description": "varchar"}}, "created_at": 1673363035.4376984, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.revenue_center"}, "seed.terminology.terminology__acute_diagnosis_ccs": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "acute_diagnosis_ccs", "schema": "terminology", "database": "tuva", "tags": ["terminology", "readmissions"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ccs_diagnosis_category": "varchar", "description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "readmissions", "terminology__acute_diagnosis_ccs"], "unique_id": "seed.terminology.terminology__acute_diagnosis_ccs", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\claims_preprocessing\\docs\\docs_generate\\dbt_packages\\terminology", "path": "readmissions\\terminology__acute_diagnosis_ccs.csv", "original_file_path": "terminology\\readmissions\\terminology__acute_diagnosis_ccs.csv", "name": "terminology__acute_diagnosis_ccs", "alias": "acute_diagnosis_ccs", "checksum": {"name": "sha256", "checksum": "654779d4a8e08465f9037d8e544b7a4c96053a6daefaa6d7fe56496b31ef25e4"}, "tags": ["terminology", "readmissions"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "acute_diagnosis_ccs", "enabled": true, "tags": ["terminology", "readmissions"], "column_types": {"ccs_diagnosis_category": "varchar", "description": "varchar"}}, "created_at": 1673363035.2470732, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.acute_diagnosis_ccs"}, "seed.terminology.terminology__acute_diagnosis_icd_10_cm": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "acute_diagnosis_icd_10_cm", "schema": "terminology", "database": "tuva", "tags": ["terminology", "readmissions"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"icd_10_cm": "varchar", "description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "readmissions", "terminology__acute_diagnosis_icd_10_cm"], "unique_id": "seed.terminology.terminology__acute_diagnosis_icd_10_cm", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\claims_preprocessing\\docs\\docs_generate\\dbt_packages\\terminology", "path": "readmissions\\terminology__acute_diagnosis_icd_10_cm.csv", "original_file_path": "terminology\\readmissions\\terminology__acute_diagnosis_icd_10_cm.csv", "name": "terminology__acute_diagnosis_icd_10_cm", "alias": "acute_diagnosis_icd_10_cm", "checksum": {"name": "path", "checksum": "terminology\\readmissions\\terminology__acute_diagnosis_icd_10_cm.csv"}, "tags": ["terminology", "readmissions"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "acute_diagnosis_icd_10_cm", "enabled": true, "tags": ["terminology", "readmissions"], "column_types": {"icd_10_cm": "varchar", "description": "varchar"}}, "created_at": 1673363035.251585, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.acute_diagnosis_icd_10_cm"}, "seed.terminology.terminology__always_planned_ccs_diagnosis_category": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "always_planned_ccs_diagnosis_category", "schema": "terminology", "database": "tuva", "tags": ["terminology", "readmissions"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ccs_diagnosis_category": "varchar", "description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "readmissions", "terminology__always_planned_ccs_diagnosis_category"], "unique_id": "seed.terminology.terminology__always_planned_ccs_diagnosis_category", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\claims_preprocessing\\docs\\docs_generate\\dbt_packages\\terminology", "path": "readmissions\\terminology__always_planned_ccs_diagnosis_category.csv", "original_file_path": "terminology\\readmissions\\terminology__always_planned_ccs_diagnosis_category.csv", "name": "terminology__always_planned_ccs_diagnosis_category", "alias": "always_planned_ccs_diagnosis_category", "checksum": {"name": "sha256", "checksum": "3ec5bc59c274f64708e2b16e9eff3db72230522289dd3f21567956d2070b3be2"}, "tags": ["terminology", "readmissions"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "always_planned_ccs_diagnosis_category", "enabled": true, "tags": ["terminology", "readmissions"], "column_types": {"ccs_diagnosis_category": "varchar", "description": "varchar"}}, "created_at": 1673363035.26862, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.always_planned_ccs_diagnosis_category"}, "seed.terminology.terminology__always_planned_ccs_procedure_category": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "always_planned_ccs_procedure_category", "schema": "terminology", "database": "tuva", "tags": ["terminology", "readmissions"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ccs_procedure_category": "varchar", "description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "readmissions", "terminology__always_planned_ccs_procedure_category"], "unique_id": "seed.terminology.terminology__always_planned_ccs_procedure_category", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\claims_preprocessing\\docs\\docs_generate\\dbt_packages\\terminology", "path": "readmissions\\terminology__always_planned_ccs_procedure_category.csv", "original_file_path": "terminology\\readmissions\\terminology__always_planned_ccs_procedure_category.csv", "name": "terminology__always_planned_ccs_procedure_category", "alias": "always_planned_ccs_procedure_category", "checksum": {"name": "sha256", "checksum": "af9918830532c9dd37924853c29502d8c9f14bbb1a380de74cfcc740b0ba48b7"}, "tags": ["terminology", "readmissions"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "always_planned_ccs_procedure_category", "enabled": true, "tags": ["terminology", "readmissions"], "column_types": {"ccs_procedure_category": "varchar", "description": "varchar"}}, "created_at": 1673363035.2761846, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.always_planned_ccs_procedure_category"}, "seed.terminology.terminology__exclusion_ccs_diagnosis_category": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "exclusion_ccs_diagnosis_category", "schema": "terminology", "database": "tuva", "tags": ["terminology", "readmissions"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ccs_diagnosis_category": "varchar", "description": "varchar", "exclusion_category": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "readmissions", "terminology__exclusion_ccs_diagnosis_category"], "unique_id": "seed.terminology.terminology__exclusion_ccs_diagnosis_category", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\claims_preprocessing\\docs\\docs_generate\\dbt_packages\\terminology", "path": "readmissions\\terminology__exclusion_ccs_diagnosis_category.csv", "original_file_path": "terminology\\readmissions\\terminology__exclusion_ccs_diagnosis_category.csv", "name": "terminology__exclusion_ccs_diagnosis_category", "alias": "exclusion_ccs_diagnosis_category", "checksum": {"name": "sha256", "checksum": "4bacd904ef0767100c7371e367970c9b25139aae994d3b020ceee61a7aa1e0a7"}, "tags": ["terminology", "readmissions"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "exclusion_ccs_diagnosis_category", "enabled": true, "tags": ["terminology", "readmissions"], "column_types": {"ccs_diagnosis_category": "varchar", "description": "varchar", "exclusion_category": "varchar"}}, "created_at": 1673363035.3228745, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.exclusion_ccs_diagnosis_category"}, "seed.terminology.terminology__icd_10_cm_to_ccs": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "icd_10_cm_to_ccs", "schema": "terminology", "database": "tuva", "tags": ["terminology", "readmissions"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"icd_10_cm": "varchar", "description": "varchar", "ccs_diagnosis_category": "varchar", "ccs_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "readmissions", "terminology__icd_10_cm_to_ccs"], "unique_id": "seed.terminology.terminology__icd_10_cm_to_ccs", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\claims_preprocessing\\docs\\docs_generate\\dbt_packages\\terminology", "path": "readmissions\\terminology__icd_10_cm_to_ccs.csv", "original_file_path": "terminology\\readmissions\\terminology__icd_10_cm_to_ccs.csv", "name": "terminology__icd_10_cm_to_ccs", "alias": "icd_10_cm_to_ccs", "checksum": {"name": "path", "checksum": "terminology\\readmissions\\terminology__icd_10_cm_to_ccs.csv"}, "tags": ["terminology", "readmissions"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "icd_10_cm_to_ccs", "enabled": true, "tags": ["terminology", "readmissions"], "column_types": {"icd_10_cm": "varchar", "description": "varchar", "ccs_diagnosis_category": "varchar", "ccs_description": "varchar"}}, "created_at": 1673363035.3569875, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.icd_10_cm_to_ccs"}, "seed.terminology.terminology__icd_10_pcs_to_ccs": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "icd_10_pcs_to_ccs", "schema": "terminology", "database": "tuva", "tags": ["terminology", "readmissions"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"icd_10_pcs": "varchar", "description": "varchar", "ccs_procedure_category": "varchar", "ccs_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "readmissions", "terminology__icd_10_pcs_to_ccs"], "unique_id": "seed.terminology.terminology__icd_10_pcs_to_ccs", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\claims_preprocessing\\docs\\docs_generate\\dbt_packages\\terminology", "path": "readmissions\\terminology__icd_10_pcs_to_ccs.csv", "original_file_path": "terminology\\readmissions\\terminology__icd_10_pcs_to_ccs.csv", "name": "terminology__icd_10_pcs_to_ccs", "alias": "icd_10_pcs_to_ccs", "checksum": {"name": "path", "checksum": "terminology\\readmissions\\terminology__icd_10_pcs_to_ccs.csv"}, "tags": ["terminology", "readmissions"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "icd_10_pcs_to_ccs", "enabled": true, "tags": ["terminology", "readmissions"], "column_types": {"icd_10_pcs": "varchar", "description": "varchar", "ccs_procedure_category": "varchar", "ccs_description": "varchar"}}, "created_at": 1673363035.3716066, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.icd_10_pcs_to_ccs"}, "seed.terminology.terminology__potentially_planned_ccs_procedure_category": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "potentially_planned_ccs_procedure_category", "schema": "terminology", "database": "tuva", "tags": ["terminology", "readmissions"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ccs_procedure_category": "varchar", "description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "readmissions", "terminology__potentially_planned_ccs_procedure_category"], "unique_id": "seed.terminology.terminology__potentially_planned_ccs_procedure_category", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\claims_preprocessing\\docs\\docs_generate\\dbt_packages\\terminology", "path": "readmissions\\terminology__potentially_planned_ccs_procedure_category.csv", "original_file_path": "terminology\\readmissions\\terminology__potentially_planned_ccs_procedure_category.csv", "name": "terminology__potentially_planned_ccs_procedure_category", "alias": "potentially_planned_ccs_procedure_category", "checksum": {"name": "sha256", "checksum": "7b9db975327ccef9eb004256f6dac2d16248422f0c189d1c79b19826f793afd5"}, "tags": ["terminology", "readmissions"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "potentially_planned_ccs_procedure_category", "enabled": true, "tags": ["terminology", "readmissions"], "column_types": {"ccs_procedure_category": "varchar", "description": "varchar"}}, "created_at": 1673363035.4129858, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.potentially_planned_ccs_procedure_category"}, "seed.terminology.terminology__potentially_planned_icd_10_pcs": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "potentially_planned_icd_10_pcs", "schema": "terminology", "database": "tuva", "tags": ["terminology", "readmissions"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"icd_10_pcs": "varchar", "description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "readmissions", "terminology__potentially_planned_icd_10_pcs"], "unique_id": "seed.terminology.terminology__potentially_planned_icd_10_pcs", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\claims_preprocessing\\docs\\docs_generate\\dbt_packages\\terminology", "path": "readmissions\\terminology__potentially_planned_icd_10_pcs.csv", "original_file_path": "terminology\\readmissions\\terminology__potentially_planned_icd_10_pcs.csv", "name": "terminology__potentially_planned_icd_10_pcs", "alias": "potentially_planned_icd_10_pcs", "checksum": {"name": "sha256", "checksum": "d3b577c57486f9fa6d12cd8b7da4c54d8f2f6996d19d35ca169e5861f12c031f"}, "tags": ["terminology", "readmissions"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "potentially_planned_icd_10_pcs", "enabled": true, "tags": ["terminology", "readmissions"], "column_types": {"icd_10_pcs": "varchar", "description": "varchar"}}, "created_at": 1673363035.4209945, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.potentially_planned_icd_10_pcs"}, "seed.terminology.terminology__specialty_cohort": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "specialty_cohort", "schema": "terminology", "database": "tuva", "tags": ["terminology", "readmissions"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ccs": "varchar", "description": "varchar", "specialty_cohort": "varchar", "procedure_or_diagnosis": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "readmissions", "terminology__specialty_cohort"], "unique_id": "seed.terminology.terminology__specialty_cohort", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\claims_preprocessing\\docs\\docs_generate\\dbt_packages\\terminology", "path": "readmissions\\terminology__specialty_cohort.csv", "original_file_path": "terminology\\readmissions\\terminology__specialty_cohort.csv", "name": "terminology__specialty_cohort", "alias": "specialty_cohort", "checksum": {"name": "sha256", "checksum": "f4c090fe63477ea354c6a36dd54816fe76cdead723bbb39aeeba640a319c6d8d"}, "tags": ["terminology", "readmissions"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "specialty_cohort", "enabled": true, "tags": ["terminology", "readmissions"], "column_types": {"ccs": "varchar", "description": "varchar", "specialty_cohort": "varchar", "procedure_or_diagnosis": "varchar"}}, "created_at": 1673363035.4417117, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.specialty_cohort"}, "seed.terminology.terminology__surgery_gynecology_cohort": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "surgery_gynecology_cohort", "schema": "terminology", "database": "tuva", "tags": ["terminology", "readmissions"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"icd_10_pcs": "varchar", "description": "varchar", "ccs_code_and_description": "varchar", "specialty_cohort": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "readmissions", "terminology__surgery_gynecology_cohort"], "unique_id": "seed.terminology.terminology__surgery_gynecology_cohort", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\claims_preprocessing\\docs\\docs_generate\\dbt_packages\\terminology", "path": "readmissions\\terminology__surgery_gynecology_cohort.csv", "original_file_path": "terminology\\readmissions\\terminology__surgery_gynecology_cohort.csv", "name": "terminology__surgery_gynecology_cohort", "alias": "surgery_gynecology_cohort", "checksum": {"name": "sha256", "checksum": "aebcfa4c5a82d3af091d8d223b26ca9349da581228f32f0d59a7754343199a58"}, "tags": ["terminology", "readmissions"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "surgery_gynecology_cohort", "enabled": true, "tags": ["terminology", "readmissions"], "column_types": {"icd_10_pcs": "varchar", "description": "varchar", "ccs_code_and_description": "varchar", "specialty_cohort": "varchar"}}, "created_at": 1673363035.446224, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.surgery_gynecology_cohort"}}, "sources": {}, "macros": {"macro.dbt_snowflake.snowflake__create_table_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set transient = config.get('transient', default=true) -%}\n    {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n    {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n    {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n    {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n      {%- set cluster_by_keys = [cluster_by_keys] -%}\n    {%- endif -%}\n    {%- if cluster_by_keys is not none -%}\n      {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n    {% else %}\n      {%- set cluster_by_string = none -%}\n    {%- endif -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n        create or replace {% if temporary -%}\n          temporary\n        {%- elif transient -%}\n          transient\n        {%- endif %} table {{ relation }} {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n        (\n          {%- if cluster_by_string is not none -%}\n            select * from(\n              {{ compiled_code }}\n              ) order by ({{ cluster_by_string }})\n          {%- else -%}\n            {{ compiled_code }}\n          {%- endif %}\n        );\n      {% if cluster_by_string is not none and not temporary -%}\n        alter table {{relation}} cluster by ({{cluster_by_string}});\n      {%- endif -%}\n      {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n        alter table {{relation}} resume recluster;\n      {%- endif -%}\n\n  {%- elif language == 'python' -%}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation, temporary=temporary) }}\n  {%- else -%}\n      {% do exceptions.raise_compiler_error(\"snowflake__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.5818949, "supported_languages": null}, "macro.dbt_snowflake.get_column_comment_sql": {"unique_id": "macro.dbt_snowflake.get_column_comment_sql", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n  {% if (column_name|upper in column_dict) -%}\n    {% set matched_column = column_name|upper -%}\n  {% elif (column_name|lower in column_dict) -%}\n    {% set matched_column = column_name|lower -%}\n  {% elif (column_name in column_dict) -%}\n    {% set matched_column = column_name -%}\n  {% else -%}\n    {% set matched_column = None -%}\n  {% endif -%}\n  {% if matched_column -%}\n    {{ adapter.quote(column_name) }} COMMENT $${{ column_dict[matched_column]['description'] | replace('$', '[$]') }}$$\n  {%- else -%}\n    {{ adapter.quote(column_name) }} COMMENT $$$$\n  {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.5818949, "supported_languages": null}, "macro.dbt_snowflake.get_persist_docs_column_list": {"unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {{ get_column_comment_sql(column_name, model_columns) }}\n    {{- \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.5858994, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.5858994, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.5858994, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_schemas": {"unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.5858994, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in schema  {{ schema_relation }}! dbt can only get\n      information about schemas with fewer than {{ maximum }} objects.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {%- do return(result) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.5858994, "supported_languages": null}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.5858994, "supported_languages": null}, "macro.dbt_snowflake.snowflake__rename_relation": {"unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.5858994, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_type": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.5858994, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n  comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.5909016, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    alter {{ relation.type }} {{ relation }} alter\n    {% for column_name in existing_columns if (column_name in existing_columns) or (column_name|lower in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{- ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.5909016, "supported_languages": null}, "macro.dbt_snowflake.get_current_query_tag": {"unique_id": "macro.dbt_snowflake.get_current_query_tag", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.5909016, "supported_languages": null}, "macro.dbt_snowflake.set_query_tag": {"unique_id": "macro.dbt_snowflake.set_query_tag", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.591906, "supported_languages": null}, "macro.dbt_snowflake.snowflake__set_query_tag": {"unique_id": "macro.dbt_snowflake.snowflake__set_query_tag", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__set_query_tag", "macro_sql": "{% macro snowflake__set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.591906, "supported_languages": null}, "macro.dbt_snowflake.unset_query_tag": {"unique_id": "macro.dbt_snowflake.unset_query_tag", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt')(original_query_tag)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.5929105, "supported_languages": null}, "macro.dbt_snowflake.snowflake__unset_query_tag": {"unique_id": "macro.dbt_snowflake.snowflake__unset_query_tag", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__unset_query_tag", "macro_sql": "{% macro snowflake__unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.5929105, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation.type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n  {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.5929105, "supported_languages": null}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.5949152, "supported_languages": null}, "macro.dbt_snowflake.snowflake__truncate_relation": {"unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.5949152, "supported_languages": null}, "macro.dbt_snowflake.snowflake__copy_grants": {"unique_id": "macro.dbt_snowflake.snowflake__copy_grants", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\apply_grants.sql", "original_file_path": "macros\\apply_grants.sql", "name": "snowflake__copy_grants", "macro_sql": "{% macro snowflake__copy_grants() %}\n    {% set copy_grants = config.get('copy_grants', False) %}\n    {{ return(copy_grants) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.5949152, "supported_languages": null}, "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\apply_grants.sql", "original_file_path": "macros\\apply_grants.sql", "name": "snowflake__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro snowflake__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(False) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.5949152, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog": {"unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "name": "snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      where (\n        {%- for schema in schemas -%}\n          upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.5949152, "supported_languages": null}, "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "name": "dbt_snowflake_get_tmp_relation_type", "macro_sql": "{% macro dbt_snowflake_get_tmp_relation_type(strategy, unique_key, language) %}\n\n  /* {#\n       If we are running multiple statements (DELETE + INSERT),\n       we must first save the model query results as a temporary table\n       in order to guarantee consistent inputs to both statements.\n\n       If we are running a single statement (MERGE or INSERT alone),\n       we can save the model query definition as a view instead,\n       for faster overall incremental processing.\n  #} */\n\n  {% if language == 'sql' and (strategy in ('default', 'append', 'merge') or (unique_key is none)) %}\n    {{ return('view') }}\n  {% else %}  {#--  play it safe -- #}\n    {{ return('table') }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.5949152, "supported_languages": null}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "name": "materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake', supported_languages=['sql', 'python'] -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {#-- Set vars --#}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] -%}\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n\n  {#-- The temp relation will be a view (faster) or temp table, depending on upsert/merge strategy --#}\n  {%- set unique_key = config.get('unique_key') -%}\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set tmp_relation_type = dbt_snowflake_get_tmp_relation_type(incremental_strategy, unique_key, language) %}\n  {% set tmp_relation = make_temp_relation(this).incorporate(type=tmp_relation_type) %}\n\n  {% set grant_config = config.get('grants') %}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n  {% elif full_refresh_mode %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% else %}\n    {#-- Create the temp relation, either as a view or as a temp table --#}\n    {% if tmp_relation_type == 'view' %}\n        {%- call statement('create_tmp_relation') -%}\n          {{ create_view_as(tmp_relation, compiled_code) }}\n        {%- endcall -%}\n    {% else %}\n        {%- call statement('create_tmp_relation', language=language) -%}\n          {{ create_table_as(True, tmp_relation, compiled_code, language) }}\n        {%- endcall -%}\n    {% endif %}\n\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': tmp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'predicates': incremental_predicates }) %}\n\n    {%- call statement('main') -%}\n      {{ strategy_sql_macro_func(strategy_arg_dict) }}\n    {%- endcall -%}\n  {% endif %}\n\n  {% do drop_relation_if_exists(tmp_relation) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n\n  {% set should_revoke =\n   should_revoke(existing_relation.is_table, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro.dbt.make_temp_relation", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.create_view_as", "macro.dbt.process_schema_changes", "macro.dbt.drop_relation_if_exists", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.602947, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.snowflake__get_incremental_default_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_incremental_default_sql", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "name": "snowflake__get_incremental_default_sql", "macro_sql": "{% macro snowflake__get_incremental_default_sql(arg_dict) %}\n  {{ return(get_incremental_merge_sql(arg_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.602947, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\merge.sql", "original_file_path": "macros\\materializations\\merge.sql", "name": "snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.602947, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\merge.sql", "original_file_path": "macros\\materializations\\merge.sql", "name": "snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.602947, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\merge.sql", "original_file_path": "macros\\materializations\\merge.sql", "name": "snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.602947, "supported_languages": null}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "name": "snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.602947, "supported_languages": null}, "macro.dbt_snowflake.materialization_seed_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "name": "materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6094513, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot.sql", "name": "materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6094513, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_table_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "name": "materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake', supported_languages=['sql', 'python']%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set language = model['language'] -%}\n\n  {% set grant_config = config.get('grants') %}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  {% call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.611978, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.py_write_table": {"unique_id": "macro.dbt_snowflake.py_write_table", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "name": "py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation, temporary=False) %}\n{{ compiled_code }}\ndef materialize(session, df, target_relation):\n    # make sure pandas exists\n    import importlib.util\n    package_name = 'pandas'\n    if importlib.util.find_spec(package_name):\n        import pandas\n        if isinstance(df, pandas.core.frame.DataFrame):\n          # session.write_pandas does not have overwrite function\n          df = session.createDataFrame(df)\n    df.write.mode(\"overwrite\").save_as_table(\"{{ target_relation }}\", create_temp_table={{temporary}})\n\ndef main(session):\n    dbt = dbtObj(session.table)\n    df = model(dbt, session)\n    materialize(session, df, dbt.this)\n    return \"OK\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.611978, "supported_languages": null}, "macro.dbt_snowflake.py_script_comment": {"unique_id": "macro.dbt_snowflake.py_script_comment", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "name": "py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n# To run this in snowsight, you need to select entry point to be main\n# And you may have to modify the return type to text to get the result back\n# def main(session):\n#     dbt = dbtObj(session.table)\n#     df = model(dbt, session)\n#     return df.collect()\n\n# to run this in local notebook, you need to create a session following examples https://github.com/Snowflake-Labs/sfguide-getting-started-snowpark-python\n# then you can do the following to run model\n# dbt = dbtObj(session.table)\n# df = model(dbt, session)\n{%endmacro%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.611978, "supported_languages": null}, "macro.dbt_snowflake.materialization_test_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_test_snowflake", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\test.sql", "original_file_path": "macros\\materializations\\test.sql", "name": "materialization_test_snowflake", "macro_sql": "{%- materialization test, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_test_default() %}\n    {% do unset_query_tag(original_query_tag) %}\n    {{ return(relations) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.611978, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_view_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\view.sql", "original_file_path": "macros\\materializations\\view.sql", "name": "materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do return(to_return) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.611978, "supported_languages": ["sql"]}, "macro.dbt_snowflake.snowflake__array_construct": {"unique_id": "macro.dbt_snowflake.snowflake__array_construct", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "name": "snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.611978, "supported_languages": null}, "macro.dbt_snowflake.snowflake__bool_or": {"unique_id": "macro.dbt_snowflake.snowflake__bool_or", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "name": "snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n\n    boolor_agg({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6159875, "supported_languages": null}, "macro.dbt_snowflake.snowflake__escape_single_quotes": {"unique_id": "macro.dbt_snowflake.snowflake__escape_single_quotes", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "name": "snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6159875, "supported_languages": null}, "macro.dbt_snowflake.snowflake__right": {"unique_id": "macro.dbt_snowflake.snowflake__right", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6159875, "supported_languages": null}, "macro.dbt_snowflake.snowflake__safe_cast": {"unique_id": "macro.dbt_snowflake.snowflake__safe_cast", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6159875, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "name": "snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6159875, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "name": "snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n  {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n  {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6159875, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "name": "snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6159875, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_backcompat": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "name": "snowflake__current_timestamp_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_backcompat() %}\n  current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6159875, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "name": "snowflake__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_in_utc_backcompat() %}\n  convert_timezone('UTC', {{ snowflake__current_timestamp_backcompat() }})::{{ type_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6159875, "supported_languages": null}, "macro.dbt.copy_grants": {"unique_id": "macro.dbt.copy_grants", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6159875, "supported_languages": null}, "macro.dbt.default__copy_grants": {"unique_id": "macro.dbt.default__copy_grants", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6159875, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6159875, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6159875, "supported_languages": null}, "macro.dbt.should_revoke": {"unique_id": "macro.dbt.should_revoke", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6209924, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"unique_id": "macro.dbt.get_show_grant_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6209924, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"unique_id": "macro.dbt.default__get_show_grant_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6209924, "supported_languages": null}, "macro.dbt.get_grant_sql": {"unique_id": "macro.dbt.get_grant_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6220005, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"unique_id": "macro.dbt.default__get_grant_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6220005, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"unique_id": "macro.dbt.get_revoke_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6220005, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"unique_id": "macro.dbt.default__get_revoke_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6220005, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"unique_id": "macro.dbt.get_dcl_statement_list", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6230218, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"unique_id": "macro.dbt.default__get_dcl_statement_list", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6230218, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"unique_id": "macro.dbt.call_dcl_statements", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6230218, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"unique_id": "macro.dbt.default__call_dcl_statements", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6230218, "supported_languages": null}, "macro.dbt.apply_grants": {"unique_id": "macro.dbt.apply_grants", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6230218, "supported_languages": null}, "macro.dbt.default__apply_grants": {"unique_id": "macro.dbt.default__apply_grants", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.626029, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.627042, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.627042, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.627042, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.627042, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.627042, "supported_languages": null}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.627042, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.627042, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6310458, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.632053, "supported_languages": null}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.632053, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.632053, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.632053, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.632053, "supported_languages": null}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.632053, "supported_languages": null}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.632053, "supported_languages": null}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6360633, "supported_languages": null}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6360633, "supported_languages": null}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6360633, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6360633, "supported_languages": null}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6360633, "supported_languages": null}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6360633, "supported_languages": null}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6360633, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6360633, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6360633, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6360633, "supported_languages": null}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6360633, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6360633, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6410677, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6410677, "supported_languages": null}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6410677, "supported_languages": null}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6420755, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"unique_id": "macro.dbt.make_intermediate_relation", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6430845, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"unique_id": "macro.dbt.default__make_intermediate_relation", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6430845, "supported_languages": null}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6430845, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6430845, "supported_languages": null}, "macro.dbt.make_backup_relation": {"unique_id": "macro.dbt.make_backup_relation", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6430845, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"unique_id": "macro.dbt.default__make_backup_relation", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6430845, "supported_languages": null}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6430845, "supported_languages": null}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6430845, "supported_languages": null}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6430845, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6430845, "supported_languages": null}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6430845, "supported_languages": null}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6430845, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6430845, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6430845, "supported_languages": null}, "macro.dbt.load_cached_relation": {"unique_id": "macro.dbt.load_cached_relation", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6430845, "supported_languages": null}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6430845, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6430845, "supported_languages": null}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6516185, "supported_languages": null}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6516185, "supported_languages": null}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6516185, "supported_languages": null}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6516185, "supported_languages": null}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "name": "current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6516185, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6516185, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "name": "snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6516185, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6516185, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"unique_id": "macro.dbt.current_timestamp_backcompat", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "name": "current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6516185, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"unique_id": "macro.dbt.default__current_timestamp_backcompat", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "name": "default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6516185, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "name": "current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6516185, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "name": "default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6516185, "supported_languages": null}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.656128, "supported_languages": null}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.656128, "supported_languages": null}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.659132, "supported_languages": null}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.659132, "supported_languages": null}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "name": "statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6611438, "supported_languages": null}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6616504, "supported_languages": null}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6626217, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\accepted_values.sql", "original_file_path": "macros\\generic_test_sql\\accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6626217, "supported_languages": null}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\not_null.sql", "original_file_path": "macros\\generic_test_sql\\not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6626217, "supported_languages": null}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\relationships.sql", "original_file_path": "macros\\generic_test_sql\\relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6626217, "supported_languages": null}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\unique.sql", "original_file_path": "macros\\generic_test_sql\\unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6626217, "supported_languages": null}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6626217, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6626217, "supported_languages": null}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6626217, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6626217, "supported_languages": null}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.claims_preprocessing.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6626217, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.668243, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.668243, "supported_languages": null}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.668243, "supported_languages": null}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.668243, "supported_languages": null}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.668243, "supported_languages": null}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6717546, "supported_languages": null}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6717546, "supported_languages": null}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6717546, "supported_languages": null}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6717546, "supported_languages": null}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6717546, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6717546, "supported_languages": null}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6747637, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6747637, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"unique_id": "macro.dbt.get_merge_update_columns", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "name": "get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6762676, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"unique_id": "macro.dbt.default__get_merge_update_columns", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "name": "default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6762676, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6828558, "supported_languages": ["sql"]}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6828558, "supported_languages": null}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6828558, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6908667, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6908667, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            );\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6918955, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6929078, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6929078, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.6929078, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7009163, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7019253, "supported_languages": null}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7029686, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"unique_id": "macro.dbt.get_incremental_append_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7029686, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"unique_id": "macro.dbt.default__get_incremental_append_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7029686, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"unique_id": "macro.dbt.get_incremental_delete_insert_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7029686, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7029686, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"unique_id": "macro.dbt.get_incremental_merge_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7029686, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"unique_id": "macro.dbt.default__get_incremental_merge_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7029686, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7029686, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"predicates\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7069778, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"unique_id": "macro.dbt.get_incremental_default_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7069778, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"unique_id": "macro.dbt.default__get_incremental_default_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7069778, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"unique_id": "macro.dbt.get_insert_into_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7069778, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7094808, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7094808, "supported_languages": null}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7094808, "supported_languages": null}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7109897, "supported_languages": null}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\table.sql", "original_file_path": "macros\\materializations\\models\\table\\table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.711997, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_or_replace_view.sql", "original_file_path": "macros\\materializations\\models\\view\\create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7160058, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7160058, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7160058, "supported_languages": null}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7160058, "supported_languages": null}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7160058, "supported_languages": null}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\helpers.sql", "original_file_path": "macros\\materializations\\models\\view\\helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7160058, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\helpers.sql", "original_file_path": "macros\\materializations\\models\\view\\helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7160058, "supported_languages": null}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\view.sql", "original_file_path": "macros\\materializations\\models\\view\\view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.722017, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7262218, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7262218, "supported_languages": null}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7262218, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7262218, "supported_languages": null}, "macro.dbt.get_csv_sql": {"unique_id": "macro.dbt.get_csv_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7262218, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"unique_id": "macro.dbt.default__get_csv_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7262218, "supported_languages": null}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7262218, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7262218, "supported_languages": null}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7262218, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7262218, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7262218, "supported_languages": null}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.731232, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7317386, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\seed.sql", "original_file_path": "macros\\materializations\\seeds\\seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7362466, "supported_languages": ["sql"]}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7407522, "supported_languages": null}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7407522, "supported_languages": null}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7407522, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7407522, "supported_languages": null}, "macro.dbt.get_true_sql": {"unique_id": "macro.dbt.get_true_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7417572, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"unique_id": "macro.dbt.default__get_true_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7417572, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7417572, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.742762, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.742762, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.742762, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.742762, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.750766, "supported_languages": ["sql"]}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7517715, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7517715, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7547662, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7547662, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7547662, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7547662, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7547662, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7547662, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_code'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.759768, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.761777, "supported_languages": null}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.761777, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.761777, "supported_languages": null}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\test.sql", "original_file_path": "macros\\materializations\\tests\\test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.761777, "supported_languages": ["sql"]}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.766281, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.766281, "supported_languages": null}, "macro.dbt.build_ref_function": {"unique_id": "macro.dbt.build_ref_function", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "name": "build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {%- set resolved = ref(*_ref) -%}\n        {%- do ref_dict.update({_ref | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef ref(*args,dbt_load_df_function):\n    refs = {{ ref_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7683945, "supported_languages": null}, "macro.dbt.build_source_function": {"unique_id": "macro.dbt.build_source_function", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "name": "build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7683945, "supported_languages": null}, "macro.dbt.build_config_dict": {"unique_id": "macro.dbt.build_config_dict", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "name": "build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {%- for key in model.config.config_keys_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == 'language' -%}\n          {%- set value = 'python' -%}\n        {%- endif -%}\n        {%- set value = model.config[key] -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7683945, "supported_languages": null}, "macro.dbt.py_script_postfix": {"unique_id": "macro.dbt.py_script_postfix", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "name": "py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = '{{ this.database }}'\n    schema = '{{ this.schema }}'\n    identifier = '{{ this.identifier }}'\n    def __repr__(self):\n        return '{{ this }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7683945, "supported_languages": null}, "macro.dbt.py_script_comment": {"unique_id": "macro.dbt.py_script_comment", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "name": "py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7683945, "supported_languages": null}, "macro.dbt.any_value": {"unique_id": "macro.dbt.any_value", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7708962, "supported_languages": null}, "macro.dbt.default__any_value": {"unique_id": "macro.dbt.default__any_value", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7708962, "supported_languages": null}, "macro.dbt.array_append": {"unique_id": "macro.dbt.array_append", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "name": "array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7708962, "supported_languages": null}, "macro.dbt.default__array_append": {"unique_id": "macro.dbt.default__array_append", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "name": "default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7708962, "supported_languages": null}, "macro.dbt.array_concat": {"unique_id": "macro.dbt.array_concat", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "name": "array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7719142, "supported_languages": null}, "macro.dbt.default__array_concat": {"unique_id": "macro.dbt.default__array_concat", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "name": "default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7719142, "supported_languages": null}, "macro.dbt.array_construct": {"unique_id": "macro.dbt.array_construct", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "name": "array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7730293, "supported_languages": null}, "macro.dbt.default__array_construct": {"unique_id": "macro.dbt.default__array_construct", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "name": "default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7730293, "supported_languages": null}, "macro.dbt.bool_or": {"unique_id": "macro.dbt.bool_or", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7730293, "supported_languages": null}, "macro.dbt.default__bool_or": {"unique_id": "macro.dbt.default__bool_or", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7730293, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"unique_id": "macro.dbt.cast_bool_to_text", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7730293, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"unique_id": "macro.dbt.default__cast_bool_to_text", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7730293, "supported_languages": null}, "macro.dbt.concat": {"unique_id": "macro.dbt.concat", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7730293, "supported_languages": null}, "macro.dbt.default__concat": {"unique_id": "macro.dbt.default__concat", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7730293, "supported_languages": null}, "macro.dbt.type_string": {"unique_id": "macro.dbt.type_string", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7760355, "supported_languages": null}, "macro.dbt.default__type_string": {"unique_id": "macro.dbt.default__type_string", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7760355, "supported_languages": null}, "macro.dbt.type_timestamp": {"unique_id": "macro.dbt.type_timestamp", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7760355, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"unique_id": "macro.dbt.default__type_timestamp", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7760355, "supported_languages": null}, "macro.dbt.type_float": {"unique_id": "macro.dbt.type_float", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7760355, "supported_languages": null}, "macro.dbt.default__type_float": {"unique_id": "macro.dbt.default__type_float", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7760355, "supported_languages": null}, "macro.dbt.type_numeric": {"unique_id": "macro.dbt.type_numeric", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7760355, "supported_languages": null}, "macro.dbt.default__type_numeric": {"unique_id": "macro.dbt.default__type_numeric", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7760355, "supported_languages": null}, "macro.dbt.type_bigint": {"unique_id": "macro.dbt.type_bigint", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7760355, "supported_languages": null}, "macro.dbt.default__type_bigint": {"unique_id": "macro.dbt.default__type_bigint", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7760355, "supported_languages": null}, "macro.dbt.type_int": {"unique_id": "macro.dbt.type_int", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7760355, "supported_languages": null}, "macro.dbt.default__type_int": {"unique_id": "macro.dbt.default__type_int", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7760355, "supported_languages": null}, "macro.dbt.type_boolean": {"unique_id": "macro.dbt.type_boolean", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7760355, "supported_languages": null}, "macro.dbt.default__type_boolean": {"unique_id": "macro.dbt.default__type_boolean", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7760355, "supported_languages": null}, "macro.dbt.dateadd": {"unique_id": "macro.dbt.dateadd", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7760355, "supported_languages": null}, "macro.dbt.default__dateadd": {"unique_id": "macro.dbt.default__dateadd", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7760355, "supported_languages": null}, "macro.dbt.datediff": {"unique_id": "macro.dbt.datediff", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7810404, "supported_languages": null}, "macro.dbt.default__datediff": {"unique_id": "macro.dbt.default__datediff", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7810404, "supported_languages": null}, "macro.dbt.date_trunc": {"unique_id": "macro.dbt.date_trunc", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7820451, "supported_languages": null}, "macro.dbt.default__date_trunc": {"unique_id": "macro.dbt.default__date_trunc", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7820451, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"unique_id": "macro.dbt.escape_single_quotes", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7820451, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"unique_id": "macro.dbt.default__escape_single_quotes", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7820451, "supported_languages": null}, "macro.dbt.except": {"unique_id": "macro.dbt.except", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7820451, "supported_languages": null}, "macro.dbt.default__except": {"unique_id": "macro.dbt.default__except", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7820451, "supported_languages": null}, "macro.dbt.hash": {"unique_id": "macro.dbt.hash", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7820451, "supported_languages": null}, "macro.dbt.default__hash": {"unique_id": "macro.dbt.default__hash", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7820451, "supported_languages": null}, "macro.dbt.intersect": {"unique_id": "macro.dbt.intersect", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7820451, "supported_languages": null}, "macro.dbt.default__intersect": {"unique_id": "macro.dbt.default__intersect", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7820451, "supported_languages": null}, "macro.dbt.last_day": {"unique_id": "macro.dbt.last_day", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7820451, "supported_languages": null}, "macro.dbt.default_last_day": {"unique_id": "macro.dbt.default_last_day", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "name": "default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7820451, "supported_languages": null}, "macro.dbt.default__last_day": {"unique_id": "macro.dbt.default__last_day", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7820451, "supported_languages": null}, "macro.dbt.length": {"unique_id": "macro.dbt.length", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.786051, "supported_languages": null}, "macro.dbt.default__length": {"unique_id": "macro.dbt.default__length", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.786051, "supported_languages": null}, "macro.dbt.listagg": {"unique_id": "macro.dbt.listagg", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.786051, "supported_languages": null}, "macro.dbt.default__listagg": {"unique_id": "macro.dbt.default__listagg", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.786051, "supported_languages": null}, "macro.dbt.string_literal": {"unique_id": "macro.dbt.string_literal", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.786051, "supported_languages": null}, "macro.dbt.default__string_literal": {"unique_id": "macro.dbt.default__string_literal", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.786051, "supported_languages": null}, "macro.dbt.position": {"unique_id": "macro.dbt.position", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.786051, "supported_languages": null}, "macro.dbt.default__position": {"unique_id": "macro.dbt.default__position", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.786051, "supported_languages": null}, "macro.dbt.replace": {"unique_id": "macro.dbt.replace", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.786051, "supported_languages": null}, "macro.dbt.default__replace": {"unique_id": "macro.dbt.default__replace", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.786051, "supported_languages": null}, "macro.dbt.right": {"unique_id": "macro.dbt.right", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.786051, "supported_languages": null}, "macro.dbt.default__right": {"unique_id": "macro.dbt.default__right", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.786051, "supported_languages": null}, "macro.dbt.safe_cast": {"unique_id": "macro.dbt.safe_cast", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7910528, "supported_languages": null}, "macro.dbt.default__safe_cast": {"unique_id": "macro.dbt.default__safe_cast", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7910528, "supported_languages": null}, "macro.dbt.split_part": {"unique_id": "macro.dbt.split_part", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7920578, "supported_languages": null}, "macro.dbt.default__split_part": {"unique_id": "macro.dbt.default__split_part", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7920578, "supported_languages": null}, "macro.dbt._split_part_negative": {"unique_id": "macro.dbt._split_part_negative", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.7920578, "supported_languages": null}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.793063, "supported_languages": null}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.793063, "supported_languages": null}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.793063, "supported_languages": null}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.793063, "supported_languages": null}, "macro.claims_preprocessing.default__generate_schema_name": {"unique_id": "macro.claims_preprocessing.default__generate_schema_name", "package_name": "claims_preprocessing", "root_path": "C:\\Users\\forre\\PycharmProjects\\claims_preprocessing\\docs\\docs_generate\\dbt_packages\\claims_preprocessing", "path": "macros\\generate_schema_name.sql", "original_file_path": "macros\\generate_schema_name.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\r\n    {%- set default_schema = target.schema -%}\r\n    {%- if custom_schema_name is not none -%}\r\n        {{ custom_schema_name | trim }}\r\n    {%- else -%}\r\n        {{ default_schema }}\r\n    {%- endif -%}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.793063, "supported_languages": null}, "macro.terminology.default__generate_schema_name": {"unique_id": "macro.terminology.default__generate_schema_name", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\claims_preprocessing\\docs\\docs_generate\\dbt_packages\\terminology", "path": "macros\\generate_schema_name.sql", "original_file_path": "macros\\generate_schema_name.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is not none -%}\n        {{ custom_schema_name | trim }}\n    {%- else -%}\n        {{ default_schema }}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1673363034.793063, "supported_languages": null}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "overview.md", "original_file_path": "docs\\overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.claims_preprocessing_input.eligibility": [], "model.claims_preprocessing_input.medical_claim": [], "model.claims_preprocessing_input.pharmacy_claim": [], "model.claims_preprocessing.claims_preprocessing__condition": ["model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "seed.terminology.terminology__icd_10_cm", "seed.terminology.terminology__present_on_admission"], "model.claims_preprocessing.claims_preprocessing__encounter": ["model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "seed.terminology.terminology__admit_source", "seed.terminology.terminology__admit_type", "seed.terminology.terminology__discharge_disposition", "seed.terminology.terminology__ms_drg"], "model.claims_preprocessing.claims_preprocessing__patient": ["model.claims_preprocessing.claims_preprocessing__eligibility"], "model.claims_preprocessing.claims_preprocessing__prescription": ["model.claims_preprocessing_input.pharmacy_claim"], "model.claims_preprocessing.claims_preprocessing__procedure": ["model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "seed.terminology.terminology__icd_10_pcs"], "model.claims_preprocessing.claims_preprocessing__encounter_id": ["model.claims_preprocessing.claims_preprocessing__generate_institutional_encounter_id", "model.claims_preprocessing.claims_preprocessing__professional_claims_in_institutional_encounters", "model.claims_preprocessing.claims_preprocessing__professional_encounters"], "model.claims_preprocessing.claims_preprocessing__encounter_type": ["model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "seed.terminology.terminology__ms_drg"], "model.claims_preprocessing.claims_preprocessing__generate_institutional_encounter_id": ["model.claims_preprocessing.claims_preprocessing__relevant_encounter_type_claims", "model.claims_preprocessing.claims_preprocessing__relevant_encounter_type_claims", "model.claims_preprocessing.claims_preprocessing__relevant_encounter_type_claims"], "model.claims_preprocessing.claims_preprocessing__institutional_encounter_start_and_end_dates": ["model.claims_preprocessing.claims_preprocessing__generate_institutional_encounter_id", "model.claims_preprocessing.claims_preprocessing__medical_claim"], "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced": ["model.claims_preprocessing.claims_preprocessing__encounter_id", "model.claims_preprocessing.claims_preprocessing__medical_claim"], "model.claims_preprocessing.claims_preprocessing__mutually_exclusive_encounter_type": ["model.claims_preprocessing.claims_preprocessing__encounter_type"], "model.claims_preprocessing.claims_preprocessing__professional_claims_in_institutional_encounters": ["model.claims_preprocessing.claims_preprocessing__institutional_encounter_start_and_end_dates", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__mutually_exclusive_encounter_type"], "model.claims_preprocessing.claims_preprocessing__professional_encounters": ["model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__mutually_exclusive_encounter_type"], "model.claims_preprocessing.claims_preprocessing__relevant_encounter_type_claims": ["model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__mutually_exclusive_encounter_type"], "model.claims_preprocessing.claims_preprocessing__eligibility": ["model.claims_preprocessing_input.eligibility"], "model.claims_preprocessing.claims_preprocessing__medical_claim": ["model.claims_preprocessing_input.medical_claim"], "seed.terminology.terminology__admit_source": [], "seed.terminology.terminology__admit_type": [], "seed.terminology.terminology__bill_type": [], "seed.terminology.terminology__claim_type": [], "seed.terminology.terminology__cms_chronic_conditions": [], "seed.terminology.terminology__code_type": [], "seed.terminology.terminology__discharge_disposition": [], "seed.terminology.terminology__encounter_type": [], "seed.terminology.terminology__ethnicity": [], "seed.terminology.terminology__fips_county": [], "seed.terminology.terminology__fips_state": [], "seed.terminology.terminology__gender": [], "seed.terminology.terminology__hcpcs_level_2": [], "seed.terminology.terminology__icd_10_cm": [], "seed.terminology.terminology__icd_10_pcs": [], "seed.terminology.terminology__mdc": [], "seed.terminology.terminology__medicare_dual_eligibility": [], "seed.terminology.terminology__medicare_state_fips": [], "seed.terminology.terminology__medicare_status": [], "seed.terminology.terminology__ms_drg": [], "seed.terminology.terminology__payer_type": [], "seed.terminology.terminology__place_of_service": [], "seed.terminology.terminology__present_on_admission": [], "seed.terminology.terminology__race": [], "seed.terminology.terminology__revenue_center": [], "seed.terminology.terminology__acute_diagnosis_ccs": [], "seed.terminology.terminology__acute_diagnosis_icd_10_cm": [], "seed.terminology.terminology__always_planned_ccs_diagnosis_category": [], "seed.terminology.terminology__always_planned_ccs_procedure_category": [], "seed.terminology.terminology__exclusion_ccs_diagnosis_category": [], "seed.terminology.terminology__icd_10_cm_to_ccs": [], "seed.terminology.terminology__icd_10_pcs_to_ccs": [], "seed.terminology.terminology__potentially_planned_ccs_procedure_category": [], "seed.terminology.terminology__potentially_planned_icd_10_pcs": [], "seed.terminology.terminology__specialty_cohort": [], "seed.terminology.terminology__surgery_gynecology_cohort": []}, "child_map": {"model.claims_preprocessing_input.eligibility": ["model.claims_preprocessing.claims_preprocessing__eligibility"], "model.claims_preprocessing_input.medical_claim": ["model.claims_preprocessing.claims_preprocessing__medical_claim"], "model.claims_preprocessing_input.pharmacy_claim": ["model.claims_preprocessing.claims_preprocessing__prescription"], "model.claims_preprocessing.claims_preprocessing__condition": [], "model.claims_preprocessing.claims_preprocessing__encounter": [], "model.claims_preprocessing.claims_preprocessing__patient": [], "model.claims_preprocessing.claims_preprocessing__prescription": [], "model.claims_preprocessing.claims_preprocessing__procedure": [], "model.claims_preprocessing.claims_preprocessing__encounter_id": ["model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced"], "model.claims_preprocessing.claims_preprocessing__encounter_type": ["model.claims_preprocessing.claims_preprocessing__mutually_exclusive_encounter_type"], "model.claims_preprocessing.claims_preprocessing__generate_institutional_encounter_id": ["model.claims_preprocessing.claims_preprocessing__encounter_id", "model.claims_preprocessing.claims_preprocessing__institutional_encounter_start_and_end_dates"], "model.claims_preprocessing.claims_preprocessing__institutional_encounter_start_and_end_dates": ["model.claims_preprocessing.claims_preprocessing__professional_claims_in_institutional_encounters"], "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced": ["model.claims_preprocessing.claims_preprocessing__condition", "model.claims_preprocessing.claims_preprocessing__condition", "model.claims_preprocessing.claims_preprocessing__condition", "model.claims_preprocessing.claims_preprocessing__condition", "model.claims_preprocessing.claims_preprocessing__condition", "model.claims_preprocessing.claims_preprocessing__condition", "model.claims_preprocessing.claims_preprocessing__condition", "model.claims_preprocessing.claims_preprocessing__condition", "model.claims_preprocessing.claims_preprocessing__condition", "model.claims_preprocessing.claims_preprocessing__condition", "model.claims_preprocessing.claims_preprocessing__condition", "model.claims_preprocessing.claims_preprocessing__condition", "model.claims_preprocessing.claims_preprocessing__condition", "model.claims_preprocessing.claims_preprocessing__condition", "model.claims_preprocessing.claims_preprocessing__condition", "model.claims_preprocessing.claims_preprocessing__condition", "model.claims_preprocessing.claims_preprocessing__condition", "model.claims_preprocessing.claims_preprocessing__condition", "model.claims_preprocessing.claims_preprocessing__condition", "model.claims_preprocessing.claims_preprocessing__condition", "model.claims_preprocessing.claims_preprocessing__condition", "model.claims_preprocessing.claims_preprocessing__condition", "model.claims_preprocessing.claims_preprocessing__condition", "model.claims_preprocessing.claims_preprocessing__condition", "model.claims_preprocessing.claims_preprocessing__condition", "model.claims_preprocessing.claims_preprocessing__encounter", "model.claims_preprocessing.claims_preprocessing__procedure", "model.claims_preprocessing.claims_preprocessing__procedure", "model.claims_preprocessing.claims_preprocessing__procedure", "model.claims_preprocessing.claims_preprocessing__procedure", "model.claims_preprocessing.claims_preprocessing__procedure", "model.claims_preprocessing.claims_preprocessing__procedure", "model.claims_preprocessing.claims_preprocessing__procedure", "model.claims_preprocessing.claims_preprocessing__procedure", "model.claims_preprocessing.claims_preprocessing__procedure", "model.claims_preprocessing.claims_preprocessing__procedure", "model.claims_preprocessing.claims_preprocessing__procedure", "model.claims_preprocessing.claims_preprocessing__procedure", "model.claims_preprocessing.claims_preprocessing__procedure", "model.claims_preprocessing.claims_preprocessing__procedure", "model.claims_preprocessing.claims_preprocessing__procedure", "model.claims_preprocessing.claims_preprocessing__procedure", "model.claims_preprocessing.claims_preprocessing__procedure", "model.claims_preprocessing.claims_preprocessing__procedure", "model.claims_preprocessing.claims_preprocessing__procedure", "model.claims_preprocessing.claims_preprocessing__procedure", "model.claims_preprocessing.claims_preprocessing__procedure", "model.claims_preprocessing.claims_preprocessing__procedure", "model.claims_preprocessing.claims_preprocessing__procedure", "model.claims_preprocessing.claims_preprocessing__procedure", "model.claims_preprocessing.claims_preprocessing__procedure"], "model.claims_preprocessing.claims_preprocessing__mutually_exclusive_encounter_type": ["model.claims_preprocessing.claims_preprocessing__professional_claims_in_institutional_encounters", "model.claims_preprocessing.claims_preprocessing__professional_encounters", "model.claims_preprocessing.claims_preprocessing__relevant_encounter_type_claims"], "model.claims_preprocessing.claims_preprocessing__professional_claims_in_institutional_encounters": ["model.claims_preprocessing.claims_preprocessing__encounter_id"], "model.claims_preprocessing.claims_preprocessing__professional_encounters": ["model.claims_preprocessing.claims_preprocessing__encounter_id"], "model.claims_preprocessing.claims_preprocessing__relevant_encounter_type_claims": ["model.claims_preprocessing.claims_preprocessing__generate_institutional_encounter_id", "model.claims_preprocessing.claims_preprocessing__generate_institutional_encounter_id", "model.claims_preprocessing.claims_preprocessing__generate_institutional_encounter_id"], "model.claims_preprocessing.claims_preprocessing__eligibility": ["model.claims_preprocessing.claims_preprocessing__patient"], "model.claims_preprocessing.claims_preprocessing__medical_claim": ["model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__institutional_encounter_start_and_end_dates", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__professional_claims_in_institutional_encounters", "model.claims_preprocessing.claims_preprocessing__professional_encounters", "model.claims_preprocessing.claims_preprocessing__relevant_encounter_type_claims"], "seed.terminology.terminology__admit_source": ["model.claims_preprocessing.claims_preprocessing__encounter"], "seed.terminology.terminology__admit_type": ["model.claims_preprocessing.claims_preprocessing__encounter"], "seed.terminology.terminology__bill_type": [], "seed.terminology.terminology__claim_type": [], "seed.terminology.terminology__cms_chronic_conditions": [], "seed.terminology.terminology__code_type": [], "seed.terminology.terminology__discharge_disposition": ["model.claims_preprocessing.claims_preprocessing__encounter"], "seed.terminology.terminology__encounter_type": [], "seed.terminology.terminology__ethnicity": [], "seed.terminology.terminology__fips_county": [], "seed.terminology.terminology__fips_state": [], "seed.terminology.terminology__gender": [], "seed.terminology.terminology__hcpcs_level_2": [], "seed.terminology.terminology__icd_10_cm": ["model.claims_preprocessing.claims_preprocessing__condition"], "seed.terminology.terminology__icd_10_pcs": ["model.claims_preprocessing.claims_preprocessing__procedure"], "seed.terminology.terminology__mdc": [], "seed.terminology.terminology__medicare_dual_eligibility": [], "seed.terminology.terminology__medicare_state_fips": [], "seed.terminology.terminology__medicare_status": [], "seed.terminology.terminology__ms_drg": ["model.claims_preprocessing.claims_preprocessing__encounter", "model.claims_preprocessing.claims_preprocessing__encounter_type"], "seed.terminology.terminology__payer_type": [], "seed.terminology.terminology__place_of_service": [], "seed.terminology.terminology__present_on_admission": ["model.claims_preprocessing.claims_preprocessing__condition"], "seed.terminology.terminology__race": [], "seed.terminology.terminology__revenue_center": [], "seed.terminology.terminology__acute_diagnosis_ccs": [], "seed.terminology.terminology__acute_diagnosis_icd_10_cm": [], "seed.terminology.terminology__always_planned_ccs_diagnosis_category": [], "seed.terminology.terminology__always_planned_ccs_procedure_category": [], "seed.terminology.terminology__exclusion_ccs_diagnosis_category": [], "seed.terminology.terminology__icd_10_cm_to_ccs": [], "seed.terminology.terminology__icd_10_pcs_to_ccs": [], "seed.terminology.terminology__potentially_planned_ccs_procedure_category": [], "seed.terminology.terminology__potentially_planned_icd_10_pcs": [], "seed.terminology.terminology__specialty_cohort": [], "seed.terminology.terminology__surgery_gynecology_cohort": []}}